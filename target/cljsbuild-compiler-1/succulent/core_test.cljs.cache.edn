{:rename-macros {}, :renames {}, :use-macros {testing cljs.test, async cljs.test, is cljs.test, deftest devcards.core}, :excludes #{}, :name succulent.core-test, :imports nil, :requires {cljs.test cljs.test, devcards.core devcards.core, s succulent.core, succulent.core succulent.core}, :uses nil, :defs {test1 {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/succulent/test/succulent/core_test.cljs", :line 13, :column 10, :end-line 13, :end-column 15}, :name succulent.core-test/test1, :variadic false, :file "test/succulent/core_test.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, test2 {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/succulent/test/succulent/core_test.cljs", :line 17, :column 10, :end-line 17, :end-column 15}, :name succulent.core-test/test2, :variadic false, :file "test/succulent/core_test.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test, devcards.core devcards.core}, :cljs.analyzer/constants {:seen #{test1 = succulent.core-test :testing-contexts succulent.core-test/test1 :ns :name :file :end-column empty? :type :column :fail :line not clojure.core/deref :expected s/app-state :end-line succulent.core-test/test2 :error :pass :arglists :actual test2 :doc :test :cpu and :message contains?k}, :order [:testing-contexts :type :expected :actual :message :error and not empty? clojure.core/deref s/app-state contains?k :cpu :pass :fail succulent.core-test/test1 :ns :name :file :end-column :column :line :end-line :arglists :doc :test succulent.core-test test1 = succulent.core-test/test2 test2]}, :doc nil}