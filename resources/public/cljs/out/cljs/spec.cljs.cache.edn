{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {form {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 21, :column 1, :end-line 21, :end-column 33, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:name cljs.spec/*coll-error-limit*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 35, :column 1, :end-line 35, :end-column 34, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, t_cljs$spec63358 {:num-fields 25, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63358, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 706, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-printer {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 180, :column 7, :end-line 180, :end-column 22, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, :name cljs.spec/explain-printer, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 22, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, op-explain {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 970, :column 8, :end-line 970, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 970, :end-line 970, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, ->t_cljs$spec63342 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta63343])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63342, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([forms preds gfn meta63343]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 643, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta63343])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 854, :column 19, :end-line 854, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 854, :end-line 854, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 540, :column 8, :end-line 540, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 540, :end-line 540, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, def-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 256, :column 19, :end-line 256, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *explain-out* {:name cljs.spec/*explain-out*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 212, :column 1, :end-line 212, :end-column 29, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 212, :column 16, :end-line 212, :end-column 29, :dynamic true}}, t_cljs$spec63191 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63191, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 451, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *runtime-asserts* {:name cljs.spec/*runtime-asserts*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 1231, :column 1, :end-line 1233, :end-column 20, :private true, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1233, :column 3, :end-line 1233, :end-column 20, :private true, :dynamic true}}, regex-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1102, :column 19, :end-line 1102, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1102, :end-line 1102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 640, :column 19, :end-line 640, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec/merge-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 640, :end-line 640, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, explain-data* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 166, :column 7, :end-line 166, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 921, :column 8, :end-line 921, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 921, :end-line 921, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 597, :column 8, :end-line 597, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, ->t_cljs$spec63325 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta63326])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63325, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([forms preds gfn meta63326]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 611, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta63326])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, MAX_INT {:name cljs.spec/MAX_INT, :file "resources/public/cljs/out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :const true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}}, check-asserts {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1241, :column 7, :end-line 1241, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec/check-asserts, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1241, :end-line 1241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 852, :column 8, :end-line 852, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 852, :end-line 852, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1249, :column 7, :end-line 1249, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec/assert*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1249, :end-line 1249, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1197, :column 7, :end-line 1197, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1197, :end-line 1197, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "resources/public/cljs/out/cljs/spec.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}}, accept? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 789, :column 8, :end-line 789, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([p__63382]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 789, :end-line 789, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 608, :column 19, :end-line 608, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 608, :end-line 608, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 787, :column 8, :end-line 787, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 787, :end-line 787, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ->t_cljs$spec63328 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta63329])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63328, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([forms preds gfn meta63329]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 611, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta63329])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, recur-limit? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 299, :column 8, :end-line 299, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 333, :column 19, :end-line 333, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 32, :method-params ([p__63102]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, t_cljs$spec63627 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec63627, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1150, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, reg-resolve! {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 73, :column 8, :end-line 73, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1076, :column 8, :end-line 1076, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :end-line 1076, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 851, :column 8, :end-line 851, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 851, :end-line 851, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, t_cljs$spec63611 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63611, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1105, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec63222 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps cform meta63223])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63222, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([keys forms preds gfn id kps cform meta63223]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 560, :max-fixed-arity 8, :fn-var true, :arglists (quote ([keys forms preds gfn id kps cform meta63223])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec63621 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec63621, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1150, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, t_cljs$spec63135 {:num-fields 19, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63135, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 341, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-name {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 51, :column 8, :end-line 51, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, t_cljs$spec63222 {:num-fields 8, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63222, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 560, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 220, :column 7, :end-line 220, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 54, :column 8, :end-line 54, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "resources/public/cljs/out/cljs/spec.cljs", :line 283, :column 1, :end-line 283, :end-column 18, :declared true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 283, :column 10, :end-line 283, :end-column 18, :declared true}}, with-gen* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, or-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 546, :column 19, :end-line 546, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 546, :end-line 546, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, ->t_cljs$spec63608 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta63609])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63608, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([re gfn meta63609]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1105, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta63609])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, specize {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 112, :column 8, :end-line 112, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 27, :column 1, :end-line 27, :end-column 34, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :impls #{cljs.spec/t_cljs$spec63325 cljs.spec/t_cljs$spec63611 cljs.spec/t_cljs$spec63621 cljs.spec/t_cljs$spec63135 cljs.spec/t_cljs$spec63176 cljs.spec/t_cljs$spec63358 cljs.spec/t_cljs$spec63342 cljs.spec/t_cljs$spec63191 cljs.spec/t_cljs$spec63608 cljs.spec/t_cljs$spec63222 cljs.spec/t_cljs$spec63105 cljs.spec/t_cljs$spec63209 cljs.spec/t_cljs$spec63229 cljs.spec/t_cljs$spec63339 cljs.spec/t_cljs$spec63627 cljs.spec/t_cljs$spec63328}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 121, :column 7, :end-line 121, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 319, :column 7, :end-line 319, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, gen {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 243, :column 7, :end-line 243, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"}, ->t_cljs$spec63176 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta63177])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63176, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([form pred gfn cpred? unc meta63177]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 422, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta63177])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 41, :column 4, :end-line 41, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->t_cljs$spec63191 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta63192])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63191, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta63192]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 451, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta63192])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec63176 {:num-fields 6, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63176, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 422, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->sym {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 271, :column 8, :end-line 271, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 134, :column 7, :end-line 134, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 86, :column 7, :end-line 86, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, ->t_cljs$spec63621 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta63622])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec63621, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta63622]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1150, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta63622])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, int-in-range? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1204, :column 7, :end-line 1204, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec/int-in-range?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1204, :end-line 1204, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, ->t_cljs$spec63209 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta63210])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63209, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([forms preds gfn meta63210]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 489, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta63210])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, dt {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 306, :column 8, :end-line 306, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, preturn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 885, :column 8, :end-line 885, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 885, :end-line 885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, t_cljs$spec63229 {:num-fields 8, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63229, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 560, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, re-conform {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1063, :column 8, :end-line 1063, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([p p__63576]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1063, :end-line 1063, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 81, :column 7, :end-line 81, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, named? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 49, :column 8, :end-line 49, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/named?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, registry {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 266, :column 7, :end-line 266, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec/registry, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, rep+impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 820, :column 19, :end-line 820, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 934, :column 8, :end-line 934, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 934, :end-line 934, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, exercise {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1188, :column 7, :end-line 1188, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1188, :end-line 1188, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, explain-data {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 171, :column 7, :end-line 171, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 485, :column 19, :end-line 485, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, multi-spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 439, :column 19, :end-line 439, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, t_cljs$spec63342 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63342, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 643, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, conform {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, ->t_cljs$spec63229 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([keys forms preds gfn id kps cform meta63230])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63229, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([keys forms preds gfn id kps cform meta63230]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 560, :max-fixed-arity 8, :fn-var true, :arglists (quote ([keys forms preds gfn id kps cform meta63230])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec63339 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta63340])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63339, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([forms preds gfn meta63340]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 643, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta63340])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 43, :column 4, :end-line 43, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, fspec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1146, :column 19, :end-line 1146, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1146, :end-line 1146, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, t_cljs$spec63339 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63339, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 643, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, inck {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 303, :column 8, :end-line 303, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, t_cljs$spec63608 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63608, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 1105, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *coll-check-limit* {:name cljs.spec/*coll-check-limit*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 31, :column 1, :end-line 31, :end-column 34, :dynamic true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 31, :column 16, :end-line 31, :end-column 34, :dynamic true}, :doc "The number of items validated in a collection spec'ed with 'every'"}, get-spec {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 278, :column 7, :end-line 278, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec/get-spec, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, ->t_cljs$spec63358 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count check? gfn gen-max map__63353 pred kindform conform-keys kind-form addcv cfns vec__63355 p__63352 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta63359])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63358, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([form max-count check? gfn gen-max map__63353 pred kindform conform-keys kind-form addcv cfns vec__63355 p__63352 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta63359]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 706, :max-fixed-arity 25, :fn-var true, :arglists (quote ([form max-count check? gfn gen-max map__63353 pred kindform conform-keys kind-form addcv cfns vec__63355 p__63352 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta63359])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gensub {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 232, :column 8, :end-line 232, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, t_cljs$spec63328 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63328, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 611, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, the-spec {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 105, :column 8, :end-line 105, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, coll-prob {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 620, :column 8, :end-line 620, :end-column 17, :private true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, :private true, :name cljs.spec/coll-prob, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([x kfn kform distinct count min-count max-count path via in]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 620, :end-line 620, :max-fixed-arity 10, :fn-var true, :arglists (quote ([x kfn kform distinct count min-count max-count path via in]))}, t_cljs$spec63325 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63325, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 611, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec63209 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63209, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 4, :line 489, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, every-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 664, :column 19, :end-line 664, :end-column 29, :skip-wiki true, :arglists (quote ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn])), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/every-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :arglists-meta (nil nil)}, :method-params ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 664, :end-line 664, :max-fixed-arity 4, :fn-var true, :arglists ([form pred opts] [form pred {gen-into :into, :keys [kind :cljs.spec/kind-form count max-count min-count distinct gen-max :cljs.spec/kfn conform-keys :cljs.spec/conform-all], :or {gen-max 20, gen-into []}, :as opts} gfn]), :doc "Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"}, accept-nil? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 870, :column 8, :end-line 870, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 870, :end-line 870, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->t_cljs$spec63135 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map__63133 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63136])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63135, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([map__63133 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63136]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 341, :max-fixed-arity 19, :fn-var true, :arglists (quote ([map__63133 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63136])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, maybe-spec {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 94, :column 8, :end-line 94, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, ->t_cljs$spec63105 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([map__63103 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63106])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63105, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([map__63103 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63106]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 341, :max-fixed-arity 19, :fn-var true, :arglists (quote ([map__63103 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63106])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, spec-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 413, :column 19, :end-line 413, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec/spec-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, t_cljs$spec63105 {:num-fields 19, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec63105, :file "resources/public/cljs/out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 341, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, amp-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 825, :column 19, :end-line 825, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 792, :column 8, :end-line 792, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 13, :method-params ([p__63387]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 792, :end-line 792, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, alt* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 839, :column 8, :end-line 839, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 839, :end-line 839, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 804, :column 19, :end-line 804, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 804, :end-line 804, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 285, :column 8, :end-line 285, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec/macroexpand-check, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 285, :end-line 285, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 61, :column 8, :end-line 61, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, explain-str {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 225, :column 7, :end-line 225, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, *compile-asserts* {:name cljs.spec/*compile-asserts*, :file "resources/public/cljs/out/cljs/spec.cljs", :line 1221, :column 1, :end-line 1228, :end-column 20, :dynamic true, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true.", :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1228, :column 3, :end-line 1228, :end-column 20, :dynamic true, :doc "If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."}}, ->t_cljs$spec63611 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([re gfn meta63612])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec63611, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([re gfn meta63612]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1105, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re gfn meta63612])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 158, :column 7, :end-line 158, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, conform* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 40, :column 4, :end-line 40, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, check-asserts? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1236, :column 16, :end-line 1236, :end-column 30, :tag boolean, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, :name cljs.spec/check-asserts?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1236, :ret-tag boolean, :end-line 1236, :max-fixed-arity 0, :tag boolean, :fn-var true, :arglists (quote ([])), :doc "Returns the value set by check-asserts."}, noret? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 862, :column 8, :end-line 862, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 862, :end-line 862, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 816, :column 19, :end-line 816, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 816, :end-line 816, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, ->t_cljs$spec63627 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta63628])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec63627, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :method-params ([argspec aform retspec rform fnspec fform gfn specs meta63628]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1150, :max-fixed-arity 9, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn specs meta63628])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, op-describe {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 954, :column 8, :end-line 954, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 954, :end-line 954, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 153, :column 7, :end-line 153, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 326, :column 8, :end-line 326, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 214, :column 7, :end-line 214, :end-column 18, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, :name cljs.spec/explain-out, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."}, re-gen {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1025, :column 8, :end-line 1025, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1025, :end-line 1025, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 830, :column 8, :end-line 830, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 830, :end-line 830, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, and-preds {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 585, :column 8, :end-line 585, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 585, :end-line 585, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, call-valid? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1125, :column 8, :end-line 1125, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1125, :end-line 1125, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, op-unform {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 900, :column 8, :end-line 900, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/op-unform, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 900, :end-line 900, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, rep* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 809, :column 8, :end-line 809, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 809, :end-line 809, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, maybe-impl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 858, :column 19, :end-line 858, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 858, :end-line 858, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 802, :column 8, :end-line 802, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 802, :end-line 802, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 42, :column 4, :end-line 42, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 42, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, validate-fn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/spec.cljs", :line 1136, :column 8, :end-line 1136, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "resources/public/cljs/out/cljs/spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1136, :end-line 1136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag max-count :args :max-tries :path :req-un :opt-un cljs.spec/keys unc :cljs.spec/invalid cljs.spec/merge :p2 :ret :gfn map__63133 :pred-exprs :into vector? :gen-max map :shrunk :fn cljs.core/vector? predx :rep+ :cljs.spec/amp cljs.core/= p1__63639# :opt-keys aform meta63210 :pred dval map__63103 :splice check? forms meta63612 opt argspec meta63223 :else :cljs.spec/k meta63136 :ks cljs.core/count meta63106 req-un opt-un :cljs.spec/args :_ :maybe :via :cljs.spec/kfn zipmap meta63359 meta63230 :req-specs gfn gen-max fnspec cljs.spec/multi-spec v map? map__63353 pred-exprs :conform-keys keys-pred cpred? argm fn :val fform opt-keys pred :cljs.spec/alt cljs.core/map? :cljs.spec/conform-all meta63340 :p1 meta63622 cljs.core/zipmap :cljs.spec/nil % :cljs.spec/pcat cljs.core/map cljs.spec/conformer method :distinct cljs.spec/? req-specs cljs.spec/* kindform :cljs.spec/failure p1__63638# re conform-keys kps :reason preds kind-form cljs.spec/+ :req addcv meta63326 meta63329 :cljs.spec/name :cljs.spec/unknown :cljs.spec/recursion-limit cfns :assertion-failed meta63609 fn* vec__63355 cljs.core/<= cljs.spec/alt meta63343 :id p__63352 :min-count :kind :cljs.spec/rep :smallest cljs.core/set? :count keys->specs mmvar p__63102 :req-keys retag k cljs.core/fn cljs.core/list? distinct retspec :cljs.spec/accept :opt-specs cljs.spec/and :cljs.spec/kind-form cljs.spec/cat rform ifn? kindfn :pred-forms req js/Number.MAX_SAFE_INTEGER cljs.spec/every :cljs.spec/gfn keys distinct? meta63628 :max-count cljs.spec/or kfn :max-elements gen-into cljs.core/seqable? cljs.core/coll? id :num-elements cljs.spec/fspec specs cljs.spec/tuple count req-keys meta63192 apply :cljs.spec/op min-count opts kind meta63177 :cljs.spec/v cform :min-elements clojure.spec/& opt-specs conform-all :cljs.spec/problems :forms :ps k->s :cljs.spec/kvs->map :in conform-into :accept :opt pred-forms}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/gfn :cljs.spec/problems :path :pred :val :reason :via :in :cljs.spec/recursion-limit :args :cljs.spec/invalid :cljs.spec/args :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys map__63103 opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs keys->specs p__63102 req id req-keys opt-specs k->s pred-forms meta63106 map__63133 meta63136 form pred cpred? unc meta63177 method cljs.spec/multi-spec mmvar retag predx dval tag meta63192 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds meta63210 cljs.spec/or keys kps cform meta63223 meta63230 cljs.spec/and meta63326 meta63329 cljs.core/coll? distinct? cljs.core/<= js/Number.MAX_SAFE_INTEGER cljs.spec/merge meta63340 meta63343 :max-count :cljs.spec/kfn :gen-max :cljs.spec/conform-all :conform-keys :distinct :cljs.spec/kind-form :into :count :min-count :kind cljs.core/map? cljs.core/vector? cljs.core/list? cljs.core/set? cljs.core/seqable? :num-elements :max-tries :min-elements :max-elements cljs.spec/every max-count check? gen-max map__63353 kindform conform-keys kind-form addcv cfns vec__63355 p__63352 distinct kindfn kfn gen-into count min-count opts kind conform-all conform-into meta63359 :ret :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil :maybe clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/? cljs.spec/alt :accept re meta63609 meta63612 :fn :smallest :shrunk apply ifn? cljs.spec/fspec argspec aform retspec rform fnspec fform specs meta63622 meta63628 :cljs.spec/kvs->map cljs.spec/conformer fn* p1__63638# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v p1__63639# cljs.core/fn k v zipmap map :cljs.spec/failure :assertion-failed]}, :doc nil}