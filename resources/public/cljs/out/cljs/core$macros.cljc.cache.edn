{:rename-macros {}, :renames {}, :use-macros {assert-args cljs.support}, :excludes #{unsafe-bit-and macroexpand unchecked-remainder-int when-first cond->> bit-set gen-class while satisfies? unchecked-subtract-int ns-unmap import bit-shift-right aget pvalues bound-fn specify vswap! dosync caching-hash bit-shift-left coercive-not aclone dec < with-loading-context test this-as .. delay char unchecked-long unchecked-negate simple-benchmark gen-interface unchecked-inc-int with-bindings js-str bit-shift-right-zero-fill implements? goog-define pos? specify! if-not alength bit-xor doseq unsigned-bit-shift-right neg? unchecked-float undefined? deftype mask when-let divide coercive-boolean <= if-some * min with-precision lazy-seq js-delete truth_ defcurried js-debugger let -> defstruct coercive-not= get doto areduce long double definline bit-and-not unchecked-add-int future fn short definterface js-this unchecked-double string? js-arguments unchecked-multiply-int as-> when-not when int > unchecked-int keyword? use-macros unchecked-multiply gen-apply-to some->> unchecked-dec defn float js-in ns es6-iterable mod amap use declare - hash-set or assert-args extend-type macroexpand-1 bit-test defmethod time zero? require unchecked-dec-int memfn js-obj nil? extend-protocol cond-> dotimes bit-and reify instance? with-open load-file* defonce unchecked-add rfn identical? unchecked-divide-int defn- defprotocol unchecked-subtract sync assert true? array letfn / bitpos bit-or vector proxy-super >= loop bit-flip js-mod unchecked-divide with-out-str condp cond with-in-str some-> ns-interns for binding array-map unchecked-byte with-local-vars defmacro unchecked-short alias proxy inc with-redefs bit-clear locking list + var aset destructure defmulti str coercive-= hash-map if-let false? case exists? bit-not io! byte max == lazy-cat comment copy-arguments unsafe-cast defrecord make-array unchecked-negate-int unchecked-inc and number? js-comment symbol? when-some unchecked-char require-macros ->> js-inline-comment refer-clojure}, :name cljs.core$macros, :imports nil, :requires {cljs.compiler cljs.compiler, comp cljs.compiler, cljs.core cljs.core, cljs.env cljs.env, ana cljs.analyzer, clojure.set clojure.set, env cljs.env, string clojure.string, cljs.analyzer cljs.analyzer, clojure.string clojure.string, clojure.walk clojure.walk, core cljs.core}, :uses nil, :defs {unsafe-bit-and {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1126, :column 31, :end-line 1126, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/unsafe-bit-and, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 45, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1126, :macro true, :end-line 1126, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, macroexpand {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2843, :column 16, :end-line 2843, :end-column 27, :macro true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, :name cljs.core$macros/macroexpand, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2843, :macro true, :end-line 2843, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms."}, unchecked-remainder-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1033, :column 31, :end-line 1033, :end-column 54, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unchecked-remainder-int, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 54, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :macro true, :end-line 1033, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, when-first {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 398, :column 19, :end-line 398, :end-column 29, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-first, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 398, :macro true, :end-line 398, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => x xs\n\n     Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once"}, cond->> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 457, :column 19, :end-line 457, :end-column 26, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->>, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 457, :macro true, :end-line 457, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n     through each form for which the corresponding test expression\n     is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n     after the first true test expression."}, bit-set {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1166, :column 31, :end-line 1166, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-set, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1166, :macro true, :end-line 1166, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, while {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 433, :column 19, :end-line 433, :end-column 24, :macro true, :arglists (quote ([test & body])), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/while, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 433, :macro true, :end-line 433, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Repeatedly executes body while test expression is true. Presumes\n     some side-effect will cause test to become false/nil. Returns nil"}, satisfies? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2028, :column 16, :end-line 2028, :end-column 26, :macro true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, :name cljs.core$macros/satisfies?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2028, :macro true, :end-line 2028, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "Returns true if x satisfies the protocol"}, protocol-prefix {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1220, :column 13, :end-line 1220, :end-column 28, :private true, :arglists (quote ([psym]))}, :private true, :name cljs.core$macros/protocol-prefix, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([psym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1220, :end-line 1220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([psym]))}, unchecked-subtract-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1039, :column 31, :end-line 1039, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract-int, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1039, :macro true, :end-line 1039, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, ns-unmap {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2711, :column 16, :end-line 2711, :end-column 24, :macro true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, :name cljs.core$macros/ns-unmap, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([&form &env p__54144 p__54145]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2711, :macro true, :end-line 2711, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[quote0 ns] [quote1 sym]])), :doc "Removes the mappings for the symbol from the namespace."}, sigs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 580, :column 3, :end-line 580, :end-column 7, :private true}, :private true, :name cljs.core$macros/sigs, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 7, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (), :column 1, :line 578, :end-line 580, :max-fixed-arity 1, :fn-var true, :arglists nil}, bool-expr {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 813, :column 13, :end-line 813, :end-column 22, :private true, :arglists (quote ([e]))}, :private true, :name cljs.core$macros/bool-expr, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 813, :end-line 813, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e]))}, adapt-ifn-params {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1386, :column 13, :end-line 1386, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-params, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :method-params ([type p__53431]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1386, :end-line 1386, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, import {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2806, :column 16, :end-line 2806, :end-column 22, :macro true, :arglists (quote ([& import-symbols-or-lists])), :doc "import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env import-symbols-or-lists)], :arglists ([&form &env & import-symbols-or-lists]), :arglists-meta (nil)}}, :name cljs.core$macros/import, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env import-symbols-or-lists)], :arglists ([&form &env & import-symbols-or-lists]), :arglists-meta (nil)}, :method-params [(&form &env import-symbols-or-lists)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2806, :macro true, :end-line 2806, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & import-symbols-or-lists]), :doc "import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly."}, bit-shift-right {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1157, :column 31, :end-line 1157, :end-column 46, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 46, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1157, :macro true, :end-line 1157, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, aget {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 968, :column 16, :end-line 968, :end-column 20, :macro true, :arglists (quote ([a i] [a i & idxs])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aget, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env a i]), :arglists ([&form &env a i] [&form &env a i & idxs]), :arglists-meta (nil nil)}, :method-params ([&form &env a i]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 968, :macro true, :end-line 968, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env a i] [&form &env a i & idxs])}, specify {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1312, :column 16, :end-line 1312, :end-column 23, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1312, :macro true, :end-line 1312, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance."}, vswap! {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2720, :column 16, :end-line 2720, :end-column 22, :macro true, :arglists (quote ([vol f & args])), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}}, :name cljs.core$macros/vswap!, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env vol f args)], :arglists ([&form &env vol f & args]), :arglists-meta (nil)}, :method-params [(&form &env vol f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2720, :macro true, :end-line 2720, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env vol f & args]), :doc "Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in."}, type-hint-sigs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1527, :column 13, :end-line 1527, :end-column 27, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-sigs, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1527, :end-line 1527, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, caching-hash {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1178, :column 16, :end-line 1178, :end-column 28, :macro true, :arglists (quote ([coll hash-fn hash-key]))}, :name cljs.core$macros/caching-hash, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([&form &env coll hash-fn hash-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1178, :macro true, :end-line 1178, :max-fixed-arity 5, :fn-var true, :arglists (quote ([coll hash-fn hash-key]))}, bit-shift-left {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1154, :column 31, :end-line 1154, :end-column 45, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-left, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 45, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1154, :macro true, :end-line 1154, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-base-type {:name cljs.core$macros/js-base-type, :file "resources/public/cljs/out/cljs/core.cljc", :line 1236, :column 1, :end-line 1236, :end-column 29, :private true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1236, :column 17, :end-line 1236, :end-column 29, :private true}}, coercive-not {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 861, :column 16, :end-line 861, :end-column 28, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-not, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :macro true, :end-line 861, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, resolve-var {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1349, :column 13, :end-line 1349, :end-column 24, :private true, :arglists (quote ([env sym]))}, :private true, :name cljs.core$macros/resolve-var, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([env sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1349, :end-line 1349, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env sym]))}, dec {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1088, :column 31, :end-line 1088, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/dec, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1088, :macro true, :end-line 1088, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, < {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1063, :column 31, :end-line 1063, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1063, :macro true, :end-line 1063, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, variadic-fn? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2862, :column 13, :end-line 2862, :end-column 25, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/variadic-fn?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2862, :end-line 2862, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, this-as {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1322, :column 16, :end-line 1322, :end-column 23, :macro true, :arglists (quote ([name & body])), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}}, :name cljs.core$macros/this-as, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name body)], :arglists ([&form &env name & body]), :arglists-meta (nil)}, :method-params [(&form &env name body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1322, :macro true, :end-line 1322, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & body]), :doc "Defines a scope where JavaScript's implicit \"this\" is bound to the name provided."}, .. {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 135, :column 19, :end-line 135, :end-column 21, :macro true, :arglists (quote ([x form] [x form & more])), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/.., :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x form]), :arglists ([&form &env x form] [&form &env x form & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 135, :macro true, :end-line 135, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x form] [&form &env x form & more]), :doc "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n     Expands into a member access (.) of the first member on the first\n     argument, followed by the next member on the result, etc. For\n     instance:\n\n     (.. System (getProperties) (get \"os.name\"))\n\n     expands to:\n\n     (. (. System (getProperties)) (get \"os.name\"))\n\n     but is easier to write, read, and understand."}, delay {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2066, :column 16, :end-line 2066, :end-column 21, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/delay, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2066, :macro true, :end-line 2066, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls."}, unchecked-negate {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1027, :column 31, :end-line 1027, :end-column 47, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 47, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1027, :macro true, :end-line 1027, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-benchmark {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2626, :column 16, :end-line 2626, :end-column 32, :macro true, :arglists (quote ([bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}])), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.", :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}}, :name cljs.core$macros/simple-benchmark, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 5, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :arglists-meta (nil)}, :method-params [(&form &env bindings expr iterations {:keys [print-fn], :or {print-fn (quote println)}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2626, :macro true, :end-line 2626, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings expr iterations & {:keys [print-fn], :or {print-fn (quote println)}}]), :doc "Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case."}, prepare-protocol-masks {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1581, :column 13, :end-line 1581, :end-column 35, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/prepare-protocol-masks, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 35, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1581, :end-line 1581, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, unchecked-inc-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1018, :column 31, :end-line 1018, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc-int, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1018, :macro true, :end-line 1018, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, js-str {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2691, :column 16, :end-line 2691, :end-column 22, :macro true, :arglists (quote ([s]))}, :name cljs.core$macros/js-str, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([&form &env s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2691, :macro true, :end-line 2691, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s]))}, bit-shift-right-zero-fill {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1160, :column 31, :end-line 1160, :end-column 56, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-shift-right-zero-fill, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 56, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1160, :macro true, :end-line 1160, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, implements? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2002, :column 16, :end-line 2002, :end-column 27, :macro true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, :name cljs.core$macros/implements?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([&form &env psym x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2002, :macro true, :end-line 2002, :max-fixed-arity 4, :fn-var true, :arglists (quote ([psym x])), :doc "EXPERIMENTAL"}, assert-valid-fdecl {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 539, :column 30, :end-line 539, :end-column 48, :dynamic true, :private true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, :private true, :name cljs.core$macros/assert-valid-fdecl, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 48, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 539, :end-line 539, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl])), :doc "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn."}, const? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2168, :column 13, :end-line 2168, :end-column 19, :private true, :arglists (quote ([env x]))}, :private true, :name cljs.core$macros/const?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :method-params ([env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2168, :end-line 2168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env x]))}, goog-define {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 715, :column 16, :end-line 715, :end-column 27, :macro true, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, :name cljs.core$macros/goog-define, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([&form &env sym default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 715, :macro true, :end-line 715, :max-fixed-arity 4, :fn-var true, :arglists (quote ([sym default])), :doc "Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}"}, pos? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1097, :column 31, :end-line 1097, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/pos?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1097, :macro true, :end-line 1097, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, specify! {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1304, :column 16, :end-line 1304, :end-column 24, :macro true, :arglists (quote ([expr & impls])), :doc "Identical to reify but mutates its first argument.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/specify!, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr impls)], :arglists ([&form &env expr & impls]), :arglists-meta (nil)}, :method-params [(&form &env expr impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1304, :macro true, :end-line 1304, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & impls]), :doc "Identical to reify but mutates its first argument."}, if-not {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 357, :column 19, :end-line 357, :end-column 25, :macro true, :arglists (quote ([test then] [test then else])), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-not, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([&form &env test then] [&form &env test then else]), :arglists ([&form &env test then] [&form &env test then else]), :arglists-meta (nil nil)}, :method-params ([&form &env test then] [&form &env test then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 357, :macro true, :end-line 357, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env test then] [&form &env test then else]), :doc "Evaluates test. If logical false, evaluates and returns then expr,\n     otherwise else expr, if supplied, else nil."}, build-positional-factory {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1631, :column 13, :end-line 1631, :end-column 37, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-positional-factory, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 37, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1631, :end-line 1631, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, alength {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2510, :column 16, :end-line 2510, :end-column 23, :macro true, :arglists (quote ([a]))}, :name cljs.core$macros/alength, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2510, :macro true, :end-line 2510, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a]))}, bit-xor {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1137, :column 31, :end-line 1137, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-xor, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1137, :macro true, :end-line 1137, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, doseq {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2344, :column 16, :end-line 2344, :end-column 21, :macro true, :arglists (quote ([seq-exprs & body])), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}}, :name cljs.core$macros/doseq, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env seq-exprs body)], :arglists ([&form &env seq-exprs & body]), :arglists-meta (nil)}, :method-params [(&form &env seq-exprs body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2344, :macro true, :end-line 2344, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env seq-exprs & body]), :doc "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil."}, unsigned-bit-shift-right {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1163, :column 31, :end-line 1163, :end-column 55, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/unsigned-bit-shift-right, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 55, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1163, :macro true, :end-line 1163, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, neg? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1100, :column 31, :end-line 1100, :end-column 35, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/neg?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 35, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1100, :macro true, :end-line 1100, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, adapt-ifn-invoke-params {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1394, :column 13, :end-line 1394, :end-column 36, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-ifn-invoke-params, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 36, :method-params ([type p__53444]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1394, :end-line 1394, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, unchecked-float {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 997, :column 16, :end-line 997, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-float, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 997, :macro true, :end-line 997, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, undefined? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 942, :column 16, :end-line 942, :end-column 26, :macro true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, :name cljs.core$macros/undefined?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 942, :macro true, :end-line 942, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument is identical to the JavaScript undefined value."}, deftype {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1647, :column 16, :end-line 1647, :end-column 23, :macro true, :arglists (quote ([t fields & impls])), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/deftype, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env t fields impls)], :arglists ([&form &env t fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env t fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1647, :macro true, :end-line 1647, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env t fields & impls]), :doc "(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields"}, mask {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1170, :column 16, :end-line 1170, :end-column 20, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/mask, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1170, :macro true, :end-line 1170, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, build-map-factory {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1805, :column 13, :end-line 1805, :end-column 30, :private true, :arglists (quote ([rsym rname fields]))}, :private true, :name cljs.core$macros/build-map-factory, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([rsym rname fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1805, :end-line 1805, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rsym rname fields]))}, when-let {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 412, :column 19, :end-line 412, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-let, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 412, :macro true, :end-line 412, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n     When test is true, evaluates body with binding-form bound to the value of test"}, divide {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1058, :column 31, :end-line 1058, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/divide, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1058, :macro true, :end-line 1058, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, coercive-boolean {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 873, :column 16, :end-line 873, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/coercive-boolean, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 873, :macro true, :end-line 873, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, <= {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1068, :column 31, :end-line 1068, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/<=, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1068, :macro true, :end-line 1068, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, if-some {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 503, :column 19, :end-line 503, :end-column 26, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-some, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 503, :macro true, :end-line 503, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n      If test is not nil, evaluates then with binding-form bound to the\n      value of test, if not, yields else"}, * {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1047, :column 31, :end-line 1047, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/*, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 1047, :macro true, :end-line 1047, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, min {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1109, :column 31, :end-line 1109, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/min, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1109, :macro true, :end-line 1109, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, adapt-proto-params {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1399, :column 13, :end-line 1399, :end-column 31, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-proto-params, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([type p__53457]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1399, :end-line 1399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, lazy-seq {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2058, :column 16, :end-line 2058, :end-column 24, :macro true, :arglists (quote ([& body])), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-seq, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2058, :macro true, :end-line 2058, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls."}, js-delete {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 886, :column 16, :end-line 886, :end-column 25, :macro true, :arglists (quote ([obj key]))}, :name cljs.core$macros/js-delete, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :method-params ([&form &env obj key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 886, :macro true, :end-line 886, :max-fixed-arity 4, :fn-var true, :arglists (quote ([obj key]))}, truth_ {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 878, :column 16, :end-line 878, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/truth_, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 878, :macro true, :end-line 878, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, annotate-specs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1603, :column 13, :end-line 1603, :end-column 27, :private true, :arglists (quote ([annots v [f sigs]]))}, :private true, :name cljs.core$macros/annotate-specs, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([annots v p__53559]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1603, :end-line 1603, :max-fixed-arity 3, :fn-var true, :arglists (quote ([annots v [f sigs]]))}, defcurried {:protocol-inline nil, :meta {:private true, :file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :column 26, :line 1196, :macro true, :end-line 1196, :arglists (quote ([name doc meta args & body])), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, :private true, :name cljs.core$macros/defcurried, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 36, :top-fn {:variadic true, :max-fixed-arity 6, :method-params [(&form &env name doc meta args body)], :arglists ([&form &env name doc meta args & body]), :arglists-meta (nil)}, :method-params [(&form &env name doc meta args body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1196, :macro true, :end-line 1196, :max-fixed-arity 6, :fn-var true, :arglists ([&form &env name doc meta args & body]), :doc "Builds another arity of the fn that returns a fn awaiting the last\n  param"}, js-debugger {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 892, :column 16, :end-line 892, :end-column 27, :macro true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement"}, :name cljs.core$macros/js-debugger, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 892, :macro true, :end-line 892, :max-fixed-arity 2, :fn-var true, :arglists (quote ([])), :doc "Emit JavaScript \"debugger;\" statement"}, let {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 745, :column 16, :end-line 745, :end-column 19, :macro true, :arglists (quote ([bindings & body])), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/let, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 745, :macro true, :end-line 745, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein."}, base-type {:name cljs.core$macros/base-type, :file "resources/public/cljs/out/cljs/core.cljc", :line 1226, :column 1, :end-line 1226, :end-column 26, :private true, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1226, :column 17, :end-line 1226, :end-column 26, :private true}}, -> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 103, :column 19, :end-line 103, :end-column 21, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 103, :macro true, :end-line 103, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     second item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     second item in second form, etc."}, coercive-not= {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 865, :column 16, :end-line 865, :end-column 29, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-not=, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 865, :macro true, :end-line 865, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, doto {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 178, :column 19, :end-line 178, :end-column 23, :macro true, :arglists (quote ([x & forms])), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/doto, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 178, :macro true, :end-line 178, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Evaluates x then calls all of the methods and functions with the\n     value of x supplied at the front of the given arguments.  The forms\n     are evaluated in order.  Returns x.\n\n     (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))"}, areduce {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2530, :column 16, :end-line 2530, :end-column 23, :macro true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, :name cljs.core$macros/areduce, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env a idx ret init expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2530, :macro true, :end-line 2530, :max-fixed-arity 7, :fn-var true, :arglists (quote ([a idx ret init expr])), :doc "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret."}, double {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 992, :column 16, :end-line 992, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/double, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 992, :macro true, :end-line 992, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-extend-protocol {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 203, :column 16, :end-line 203, :end-column 36, :private true, :arglists (quote ([p specs]))}, :private true, :name cljs.core$macros/emit-extend-protocol, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 36, :method-params ([p specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 203, :end-line 203, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p specs]))}, bit-and-not {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1141, :column 31, :end-line 1141, :end-column 42, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and-not, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 42, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1141, :macro true, :end-line 1141, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, unchecked-add-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1003, :column 31, :end-line 1003, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add-int, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 48, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1003, :macro true, :end-line 1003, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, do-rfn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1202, :column 13, :end-line 1202, :end-column 19, :private true, :arglists (quote ([f1 k fkv]))}, :private true, :name cljs.core$macros/do-rfn, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :method-params ([f1 k fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1202, :end-line 1202, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f1 k fkv]))}, fn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :column 19, :line 269, :macro true, :end-line 269, :arglists (quote ([& sigs])), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, :name cljs.core$macros/fn, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env sigs)], :arglists ([&form &env & sigs]), :arglists-meta (nil)}, :method-params [(&form &env sigs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 269, :macro true, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & sigs]), :doc "params => positional-params* , or positional-params* & next-param\n     positional-param => binding-form\n     next-param => binding-form\n     name => symbol\n\n     Defines a function", :forms (quote [(fn name? [params*] exprs*) (fn name? ([params*] exprs*) +)])}, short {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 990, :column 16, :end-line 990, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/short, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 990, :macro true, :end-line 990, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-this {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1319, :column 26, :end-line 1319, :end-column 33, :private true, :macro true, :arglists (quote ([]))}, :private true, :name cljs.core$macros/js-this, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 33, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1319, :macro true, :end-line 1319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-double {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 998, :column 16, :end-line 998, :end-column 32, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-double, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 998, :macro true, :end-line 998, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, fast-path-protocols {:name cljs.core$macros/fast-path-protocols, :file "resources/public/cljs/out/cljs/core.cljc", :line 781, :column 1, :end-line 781, :end-column 25, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 781, :column 6, :end-line 781, :end-column 25}, :doc "protocol fqn -> [partition number, bit]"}, string? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 930, :column 16, :end-line 930, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/string?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 930, :macro true, :end-line 930, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, emit-defrecord {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1717, :column 13, :end-line 1717, :end-column 27, :private true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, :private true, :name cljs.core$macros/emit-defrecord, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([env tagname rname fields impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1717, :end-line 1717, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env tagname rname fields impls])), :doc "Do not use this directly - use defrecord"}, validate-impl-sigs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1465, :column 13, :end-line 1465, :end-column 31, :private true, :arglists (quote ([env p method]))}, :private true, :name cljs.core$macros/validate-impl-sigs, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([env p method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1465, :end-line 1465, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env p method]))}, js-arguments {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 883, :column 16, :end-line 883, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/js-arguments, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 883, :macro true, :end-line 883, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, unchecked-multiply-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1024, :column 31, :end-line 1024, :end-column 53, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply-int, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 53, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1024, :macro true, :end-line 1024, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, as-> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 471, :column 19, :end-line 471, :end-column 23, :macro true, :arglists (quote ([expr name & forms])), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/as->, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env expr name forms)], :arglists ([&form &env expr name & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr name forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 471, :macro true, :end-line 471, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env expr name & forms]), :doc "Binds name to expr, evaluates the first form in the lexical context\n     of that binding, then binds name to that result, repeating for each\n     successive form, returning the result of the last form."}, when-not {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 427, :column 19, :end-line 427, :end-column 27, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical false, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-not, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 427, :macro true, :end-line 427, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical false, evaluates body in an implicit do."}, when {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 392, :column 19, :end-line 392, :end-column 23, :macro true, :arglists (quote ([test & body])), :doc "Evaluates test. If logical true, evaluates body in an implicit do.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env test body)], :arglists ([&form &env test & body]), :arglists-meta (nil)}, :method-params [(&form &env test body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 392, :macro true, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env test & body]), :doc "Evaluates test. If logical true, evaluates body in an implicit do."}, int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1134, :column 31, :end-line 1134, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/int, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1134, :macro true, :end-line 1134, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, multi-arity-fn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2940, :column 13, :end-line 2940, :end-column 27, :private true, :arglists (quote ([name meta fdecl emit-var?]))}, :private true, :name cljs.core$macros/multi-arity-fn, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([name meta fdecl emit-var?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2940, :end-line 2940, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name meta fdecl emit-var?]))}, > {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1073, :column 31, :end-line 1073, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1073, :macro true, :end-line 1073, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, keyword? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 965, :column 16, :end-line 965, :end-column 24, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/keyword?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 965, :macro true, :end-line 965, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, ->impl-map {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1356, :column 13, :end-line 1356, :end-column 23, :private true, :arglists (quote ([impls]))}, :private true, :name cljs.core$macros/->impl-map, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1356, :end-line 1356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impls]))}, js-obj* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2481, :column 13, :end-line 2481, :end-column 20, :private true, :arglists (quote ([kvs]))}, :private true, :name cljs.core$macros/js-obj*, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2481, :end-line 2481, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kvs]))}, use-macros {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2801, :column 16, :end-line 2801, :end-column 26, :macro true, :arglists (quote ([& args])), :doc "Similar to use but only for macros.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/use-macros, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2801, :macro true, :end-line 2801, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args]), :doc "Similar to use but only for macros."}, unchecked-multiply {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1021, :column 31, :end-line 1021, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-multiply, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1021, :macro true, :end-line 1021, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, gen-apply-to {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2661, :column 16, :end-line 2661, :end-column 28, :macro true, :arglists (quote ([]))}, :name cljs.core$macros/gen-apply-to, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2661, :macro true, :end-line 2661, :max-fixed-arity 2, :fn-var true, :arglists (quote ([]))}, some->> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 492, :column 19, :end-line 492, :end-column 26, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->>, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 492, :macro true, :end-line 492, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->>),\n     and when that result is not nil, through the next etc"}, unchecked-dec {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1006, :column 31, :end-line 1006, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1006, :macro true, :end-line 1006, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, defn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 3015, :column 3, :end-line 3015, :end-column 7, :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.", :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?]))}, :name cljs.core$macros/defn, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 7, :method-params ([&form &env name fdecl]), :protocol-impl nil, :arglists-meta (nil {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 3013, :column 16, :end-line 3014, :end-column 88}), :column 1, :line 3008, :end-line 3015, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name doc-string? attr-map? [params*] prepost-map? body] [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])), :doc "Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions."}, float {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 991, :column 16, :end-line 991, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/float, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 991, :macro true, :end-line 991, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, js-in {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 889, :column 16, :end-line 889, :end-column 21, :macro true, :arglists (quote ([key obj]))}, :name cljs.core$macros/js-in, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :method-params ([&form &env key obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 889, :macro true, :end-line 889, :max-fixed-arity 4, :fn-var true, :arglists (quote ([key obj]))}, es6-iterable {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2694, :column 16, :end-line 2694, :end-column 28, :macro true, :arglists (quote ([ty]))}, :name cljs.core$macros/es6-iterable, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([&form &env ty]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2694, :macro true, :end-line 2694, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ty]))}, amap {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2515, :column 16, :end-line 2515, :end-column 20, :macro true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, :name cljs.core$macros/amap, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([&form &env a idx ret expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2515, :macro true, :end-line 2515, :max-fixed-arity 6, :fn-var true, :arglists (quote ([a idx ret expr])), :doc "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret."}, type-hint-impl-map {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1533, :column 13, :end-line 1533, :end-column 31, :private true, :arglists (quote ([type-sym impl-map]))}, :private true, :name cljs.core$macros/type-hint-impl-map, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([type-sym impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1533, :end-line 1533, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym impl-map]))}, use {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2788, :column 16, :end-line 2788, :end-column 19, :macro true, :arglists (quote ([& args])), :doc "Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/use, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2788, :macro true, :end-line 2788, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args]), :doc "Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])"}, declare {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 173, :column 19, :end-line 173, :end-column 26, :macro true, :arglists (quote ([& names])), :doc "defs the supplied var names with no bindings, useful for making forward declarations.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}}, :name cljs.core$macros/declare, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env names)], :arglists ([&form &env & names]), :arglists-meta (nil)}, :method-params [(&form &env names)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 173, :macro true, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & names]), :doc "defs the supplied var names with no bindings, useful for making forward declarations."}, fast-path-protocol-partitions-count {:name cljs.core$macros/fast-path-protocol-partitions-count, :file "resources/public/cljs/out/cljs/core.cljc", :line 799, :column 1, :end-line 799, :end-column 41, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 799, :column 6, :end-line 799, :end-column 41}, :doc "total number of partitions"}, - {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1042, :column 31, :end-line 1042, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/-, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1042, :macro true, :end-line 1042, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, extend-prefix {:name cljs.core$macros/extend-prefix, :file "resources/public/cljs/out/cljs/core.cljc", :line 1374, :column 1, :end-line 1374, :end-column 29, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1374, :column 16, :end-line 1374, :end-column 29}}, hash-set {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2467, :column 16, :end-line 2467, :end-column 24, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-set, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2467, :macro true, :end-line 2467, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, or {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 839, :column 16, :end-line 839, :end-column 18, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/or, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 839, :macro true, :end-line 839, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil."}, extend-type {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1539, :column 16, :end-line 1539, :end-column 27, :macro true, :arglists (quote ([type-sym & impls])), :doc "Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-type, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env type-sym impls)], :arglists ([&form &env type-sym & impls]), :arglists-meta (nil)}, :method-params [(&form &env type-sym impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1539, :macro true, :end-line 1539, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env type-sym & impls]), :doc "Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y & zs] ...))"}, cs {:name cljs.core$macros/cs, :file "resources/public/cljs/out/cljs/core.cljc", :line 2644, :column 1, :end-line 2644, :end-column 8, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2644, :column 6, :end-line 2644, :end-column 8}}, macroexpand-1 {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2832, :column 16, :end-line 2832, :end-column 29, :macro true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, :name cljs.core$macros/macroexpand-1, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :method-params ([&form &env quoted]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2832, :macro true, :end-line 2832, :max-fixed-arity 3, :fn-var true, :arglists (quote ([quoted])), :doc "If form represents a macro form, returns its expansion,\n  else returns form."}, bit-test {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1151, :column 16, :end-line 1151, :end-column 24, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-test, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1151, :macro true, :end-line 1151, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n]))}, defmethod {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2611, :column 16, :end-line 2611, :end-column 25, :macro true, :arglists (quote ([multifn dispatch-val & fn-tail])), :doc "Creates and installs a new method of multimethod associated with dispatch-value. ", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}}, :name cljs.core$macros/defmethod, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env multifn dispatch-val fn-tail)], :arglists ([&form &env multifn dispatch-val & fn-tail]), :arglists-meta (nil)}, :method-params [(&form &env multifn dispatch-val fn-tail)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2611, :macro true, :end-line 2611, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env multifn dispatch-val & fn-tail]), :doc "Creates and installs a new method of multimethod associated with dispatch-value. "}, time {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2616, :column 16, :end-line 2616, :end-column 20, :macro true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, :name cljs.core$macros/time, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([&form &env expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2616, :macro true, :end-line 2616, :max-fixed-arity 3, :fn-var true, :arglists (quote ([expr])), :doc "Evaluates expr and prints the time it took. Returns the value of expr."}, type-hint-single-arity-sig {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1515, :column 13, :end-line 1515, :end-column 39, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-single-arity-sig, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 39, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1515, :end-line 1515, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, zero? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1094, :column 31, :end-line 1094, :end-column 36, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/zero?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 36, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1094, :macro true, :end-line 1094, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, require {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2731, :column 16, :end-line 2731, :end-column 23, :macro true, :arglists (quote ([& args])), :doc "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace..\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure/string :as string])", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/require, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2731, :macro true, :end-line 2731, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args]), :doc "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace..\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure/string :as string])"}, unchecked-dec-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1009, :column 31, :end-line 1009, :end-column 48, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-dec-int, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 48, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1009, :macro true, :end-line 1009, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, proto-assign-impls {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1448, :column 13, :end-line 1448, :end-column 31, :private true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, :private true, :name cljs.core$macros/proto-assign-impls, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([env resolve type-sym type p__53516]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1448, :end-line 1448, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve type-sym type [p sigs]]))}, memfn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 379, :column 19, :end-line 379, :end-column 24, :macro true, :arglists (quote ([name & args])), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/memfn, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 379, :macro true, :end-line 379, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Expands into code that creates a fn that expects to be passed an\n     object and any args and calls the named instance method on the\n     object passing the args. Use when you want to treat a Java method as\n     a first-class fn. name may be type-hinted with the method receiver's\n     type in order to avoid reflective calls."}, parse-impls {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 195, :column 16, :end-line 195, :end-column 27, :private true, :arglists (quote ([specs]))}, :private true, :name cljs.core$macros/parse-impls, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([specs]))}, js-obj {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2490, :column 16, :end-line 2490, :end-column 22, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/js-obj, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2490, :macro true, :end-line 2490, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, nil? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 857, :column 16, :end-line 857, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/nil?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 857, :macro true, :end-line 857, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, type-hint-first-arg {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1511, :column 13, :end-line 1511, :end-column 32, :private true, :arglists (quote ([type-sym argv]))}, :private true, :name cljs.core$macros/type-hint-first-arg, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :method-params ([type-sym argv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1511, :end-line 1511, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym argv]))}, extend-protocol {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 211, :column 19, :end-line 211, :end-column 34, :macro true, :arglists (quote ([p & specs])), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}}, :name cljs.core$macros/extend-protocol, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env p specs)], :arglists ([&form &env p & specs]), :arglists-meta (nil)}, :method-params [(&form &env p specs)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 211, :macro true, :end-line 211, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env p & specs]), :doc "Useful when you want to provide several implementations of the same\n     protocol all at once. Takes a single protocol and the implementation\n     of that protocol for one or more types. Expands into calls to\n     extend-type:\n\n     (extend-protocol Protocol\n       AType\n         (foo [x] ...)\n         (bar [x y] ...)\n       BType\n         (foo [x] ...)\n         (bar [x y] ...)\n       AClass\n         (foo [x] ...)\n         (bar [x y] ...)\n       nil\n         (foo [x] ...)\n         (bar [x y] ...))\n\n     expands into:\n\n     (do\n      (clojure.core/extend-type AType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type BType Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type AClass Protocol\n        (foo [x] ...)\n        (bar [x y] ...))\n      (clojure.core/extend-type nil Protocol\n        (foo [x] ...)\n        (bar [x y] ...)))"}, cond-> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 443, :column 19, :end-line 443, :end-column 25, :macro true, :arglists (quote ([expr & clauses])), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/cond->, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr clauses)], :arglists ([&form &env expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 443, :macro true, :end-line 443, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & clauses]), :doc "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n     through each form for which the corresponding test\n     expression is true. Note that, unlike cond branching, cond-> threading does\n     not short circuit after the first true test expression."}, dotimes {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2541, :column 16, :end-line 2541, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/dotimes, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2541, :macro true, :end-line 2541, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1."}, bit-and {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1121, :column 31, :end-line 1121, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-and, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1121, :macro true, :end-line 1121, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, reify {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1244, :column 16, :end-line 1244, :end-column 21, :macro true, :arglists (quote ([& impls])), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/reify, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env impls)], :arglists ([&form &env & impls]), :arglists-meta (nil)}, :method-params [(&form &env impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1244, :macro true, :end-line 1244, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & impls]), :doc "reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (-seq f)))))\n  == (\\f \\o \\o))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}"}, do-curried {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1189, :column 13, :end-line 1189, :end-column 23, :private true, :arglists (quote ([name doc meta args body]))}, :private true, :name cljs.core$macros/do-curried, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([name doc meta args body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 5, :fn-var true, :arglists (quote ([name doc meta args body]))}, instance? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 950, :column 16, :end-line 950, :end-column 25, :macro true, :arglists (quote ([c x]))}, :name cljs.core$macros/instance?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :method-params ([&form &env c x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 950, :macro true, :end-line 950, :max-fixed-arity 4, :fn-var true, :arglists (quote ([c x]))}, load-file* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2829, :column 16, :end-line 2829, :end-column 26, :macro true, :arglists (quote ([f]))}, :name cljs.core$macros/load-file*, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2829, :macro true, :end-line 2829, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f]))}, defonce {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 605, :column 16, :end-line 605, :end-column 23, :macro true, :arglists (quote ([x init])), :doc "defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated"}, :name cljs.core$macros/defonce, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 605, :macro true, :end-line 605, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x init])), :doc "defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated"}, unchecked-add {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1000, :column 31, :end-line 1000, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-add, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 44, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1000, :macro true, :end-line 1000, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, rfn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1213, :column 26, :end-line 1213, :end-column 29, :private true, :macro true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, :private true, :name cljs.core$macros/rfn, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :method-params ([&form &env p__53367 fkv]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1213, :macro true, :end-line 1213, :max-fixed-arity 4, :fn-var true, :arglists (quote ([[f1 k] fkv])), :doc "Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl."}, identical? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 947, :column 16, :end-line 947, :end-column 26, :macro true, :arglists (quote ([a b]))}, :name cljs.core$macros/identical?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 947, :macro true, :end-line 947, :max-fixed-arity 4, :fn-var true, :arglists (quote ([a b]))}, collect-protocols {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1625, :column 13, :end-line 1625, :end-column 30, :private true, :arglists (quote ([impls env]))}, :private true, :name cljs.core$macros/collect-protocols, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([impls env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1625, :end-line 1625, :max-fixed-arity 2, :fn-var true, :arglists (quote ([impls env]))}, unchecked-divide-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1012, :column 31, :end-line 1012, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-divide-int, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 51, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1012, :macro true, :end-line 1012, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, defn- {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 331, :column 19, :end-line 331, :end-column 24, :macro true, :arglists (quote ([name & decls])), :doc "same as defn, yielding non-public def", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}}, :name cljs.core$macros/defn-, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name decls)], :arglists ([&form &env name & decls]), :arglists-meta (nil)}, :method-params [(&form &env name decls)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 331, :macro true, :end-line 331, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & decls]), :doc "same as defn, yielding non-public def"}, type-hint-multi-arity-sig {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1519, :column 13, :end-line 1519, :end-column 38, :private true, :arglists (quote ([type-sym sig]))}, :private true, :name cljs.core$macros/type-hint-multi-arity-sig, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 38, :method-params ([type-sym sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1519, :end-line 1519, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sig]))}, maybe-destructured {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 251, :column 4, :end-line 251, :end-column 22, :private true, :arglists (quote ([params body]))}, :private true, :name cljs.core$macros/maybe-destructured, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([params body]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 250, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([params body]))}, defprotocol {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1883, :column 16, :end-line 1883, :end-column 27, :macro true, :arglists (quote ([psym & doc+methods])), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}}, :name cljs.core$macros/defprotocol, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env psym doc+methods)], :arglists ([&form &env psym & doc+methods]), :arglists-meta (nil)}, :method-params [(&form &env psym doc+methods)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1883, :macro true, :end-line 1883, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env psym & doc+methods]), :doc "A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17"}, unchecked-subtract {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1036, :column 31, :end-line 1036, :end-column 49, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/unchecked-subtract, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 49, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1036, :macro true, :end-line 1036, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs]), :cljs.analyzer/numeric true}, variadic-fn {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2905, :column 13, :end-line 2905, :end-column 24, :private true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl] emit-var?]))}, :private true, :name cljs.core$macros/variadic-fn, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([name meta p__54226 emit-var?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2905, :end-line 2905, :max-fixed-arity 4, :fn-var true, :arglists (quote ([name meta [[arglist & body :as method] :as fdecl] emit-var?]))}, gen-apply-to-helper {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2646, :column 13, :end-line 2646, :end-column 32, :private true, :arglists (quote ([] [n])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/gen-apply-to-helper, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2646, :end-line 2646, :max-fixed-arity 1, :fn-var true, :arglists ([] [n])}, ifn-invoke-methods {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1413, :column 13, :end-line 1413, :end-column 31, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/ifn-invoke-methods, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([type type-sym p__53486]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1413, :end-line 1413, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, assert {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2244, :column 16, :end-line 2244, :end-column 22, :macro true, :arglists (quote ([x] [x message])), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}}, :name cljs.core$macros/assert, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x message]), :arglists ([&form &env x] [&form &env x message]), :arglists-meta (nil nil)}, :method-params ([&form &env x] [&form &env x message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2244, :macro true, :end-line 2244, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x message]), :doc "Evaluates expr and throws an exception if it does not evaluate to\n  logical true."}, true? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 924, :column 16, :end-line 924, :end-column 21, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/true?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 924, :macro true, :end-line 924, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, array {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2400, :column 16, :end-line 2400, :end-column 21, :macro true, :arglists (quote ([& rest])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}}, :name cljs.core$macros/array, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env rest)], :arglists ([&form &env & rest]), :arglists-meta (nil)}, :method-params [(&form &env rest)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2400, :macro true, :end-line 2400, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & rest])}, multi-arity-fn? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2859, :column 13, :end-line 2859, :end-column 28, :private true, :arglists (quote ([fdecl]))}, :private true, :name cljs.core$macros/multi-arity-fn?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([fdecl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2859, :end-line 2859, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fdecl]))}, letfn {:protocol-inline nil, :meta {:special-form true, :file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :column 19, :line 365, :macro true, :url nil, :end-line 365, :arglists (quote ([fnspecs & body])), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, :name cljs.core$macros/letfn, :variadic true, :special-form true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env fnspecs body)], :arglists ([&form &env fnspecs & body]), :arglists-meta (nil)}, :method-params [(&form &env fnspecs body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 365, :macro true, :url nil, :end-line 365, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env fnspecs & body]), :doc "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n     Takes a vector of function specs and a body, and generates a set of\n     bindings of functions to their names. All of the names are available\n     in all of the definitions of the functions, as well as the body.", :forms (quote [(letfn [fnspecs*] exprs*)])}, / {:protocol-inline nil, :meta {:cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :file nil}, :name cljs.core$macros//, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1053, :macro true, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, bitpos {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1174, :column 16, :end-line 1174, :end-column 22, :macro true, :arglists (quote ([hash shift]))}, :name cljs.core$macros/bitpos, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([&form &env hash shift]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1174, :macro true, :end-line 1174, :max-fixed-arity 4, :fn-var true, :arglists (quote ([hash shift]))}, bit-or {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1130, :column 31, :end-line 1130, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}}, :name cljs.core$macros/bit-or, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 37, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x y]), :arglists ([&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil)}, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1130, :macro true, :end-line 1130, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, vector {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2436, :column 16, :end-line 2436, :end-column 22, :macro true, :arglists (quote ([] [& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/vector, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2436, :macro true, :end-line 2436, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & xs])}, adapt-obj-params {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1382, :column 13, :end-line 1382, :end-column 29, :private true, :arglists (quote ([type [[this & args :as sig] & body]]))}, :private true, :name cljs.core$macros/adapt-obj-params, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :method-params ([type p__53418]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1382, :end-line 1382, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type [[this & args :as sig] & body]]))}, >= {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1078, :column 31, :end-line 1078, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/>=, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1078, :macro true, :end-line 1078, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, loop {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 757, :column 16, :end-line 757, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/loop, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 757, :macro true, :end-line 757, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target."}, add-obj-methods {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1404, :column 13, :end-line 1404, :end-column 28, :private true, :arglists (quote ([type type-sym sigs]))}, :private true, :name cljs.core$macros/add-obj-methods, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1404, :end-line 1404, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym sigs]))}, bit-flip {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1148, :column 31, :end-line 1148, :end-column 39, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-flip, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 39, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1148, :macro true, :end-line 1148, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, js-mod {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1115, :column 31, :end-line 1115, :end-column 37, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([num div]))}, :name cljs.core$macros/js-mod, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 37, :method-params ([&form &env num div]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1115, :macro true, :end-line 1115, :max-fixed-arity 4, :fn-var true, :arglists (quote ([num div])), :cljs.analyzer/numeric true}, to-property {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1328, :column 13, :end-line 1328, :end-column 24, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.core$macros/to-property, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1328, :end-line 1328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, variadic-fn* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2866, :column 13, :end-line 2866, :end-column 25, :private true, :arglists (quote ([sym method] [sym [arglist & body :as method] solo])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}}, :private true, :name cljs.core$macros/variadic-fn*, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([sym method] [sym [arglist & body :as method] solo]), :arglists ([sym method] [sym [arglist & body :as method] solo]), :arglists-meta (nil nil)}, :method-params ([sym method] [sym [arglist & body :as method] solo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2866, :end-line 2866, :max-fixed-arity 3, :fn-var true, :arglists ([sym method] [sym [arglist & body :as method] solo])}, with-out-str {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2671, :column 16, :end-line 2671, :end-column 28, :macro true, :arglists (quote ([& body])), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-out-str, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2671, :macro true, :end-line 2671, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls."}, condp {:protocol-inline nil, :meta {:added "1.0", :file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :column 16, :line 2109, :macro true, :end-line 2109, :arglists (quote ([pred expr & clauses])), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, :added "1.0", :name cljs.core$macros/condp, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env pred expr clauses)], :arglists ([&form &env pred expr & clauses]), :arglists-meta (nil)}, :method-params [(&form &env pred expr clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2109, :macro true, :end-line 2109, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env pred expr & clauses]), :doc "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown."}, cond {:protocol-inline nil, :meta {:added "1.0", :file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :column 19, :line 158, :macro true, :end-line 158, :arglists (quote ([& clauses])), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, :added "1.0", :name cljs.core$macros/cond, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env clauses)], :arglists ([&form &env & clauses]), :arglists-meta (nil)}, :method-params [(&form &env clauses)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 158, :macro true, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & clauses]), :doc "Takes a set of test/expr pairs. It evaluates each test one at a\n     time.  If a test returns logical true, cond evaluates and returns\n     the value of the corresponding expr and doesn't evaluate any of the\n     other tests or exprs. (cond) returns nil."}, check-valid-options {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2555, :column 13, :end-line 2555, :end-column 32, :private true, :arglists (quote ([options & valid-keys])), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}}, :private true, :name cljs.core$macros/check-valid-options, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(options valid-keys)], :arglists ([options & valid-keys]), :arglists-meta (nil)}, :method-params [(options valid-keys)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2555, :end-line 2555, :max-fixed-arity 1, :fn-var true, :arglists ([options & valid-keys]), :doc "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil."}, add-proto-methods* {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1436, :column 13, :end-line 1436, :end-column 31, :private true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-proto-methods*, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([pprefix type type-sym p__53501]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1436, :end-line 1436, :max-fixed-arity 4, :fn-var true, :arglists (quote ([pprefix type type-sym [f & meths :as form]]))}, some-> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 481, :column 19, :end-line 481, :end-column 25, :macro true, :arglists (quote ([expr & forms])), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/some->, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env expr forms)], :arglists ([&form &env expr & forms]), :arglists-meta (nil)}, :method-params [(&form &env expr forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 481, :macro true, :end-line 481, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env expr & forms]), :doc "When expr is not nil, threads it into the first form (via ->),\n     and when that result is not nil, through the next etc"}, ns-interns {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2700, :column 16, :end-line 2700, :end-column 26, :macro true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, :name cljs.core$macros/ns-interns, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env p__54121]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2700, :macro true, :end-line 2700, :max-fixed-arity 3, :fn-var true, :arglists (quote ([[quote ns]])), :doc "Returns a map of the intern mappings for the namespace."}, base-assign-impls {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1363, :column 13, :end-line 1363, :end-column 30, :private true, :arglists (quote ([env resolve tsym type [p sigs]]))}, :private true, :name cljs.core$macros/base-assign-impls, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([env resolve tsym type p__53403]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1363, :end-line 1363, :max-fixed-arity 5, :fn-var true, :arglists (quote ([env resolve tsym type [p sigs]]))}, for {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2257, :column 16, :end-line 2257, :end-column 19, :macro true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, :name cljs.core$macros/for, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :method-params ([&form &env seq-exprs body-expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2257, :macro true, :end-line 2257, :max-fixed-arity 4, :fn-var true, :arglists (quote ([seq-exprs body-expr])), :doc "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))"}, binding {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2096, :column 16, :end-line 2096, :end-column 23, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/binding, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2096, :macro true, :end-line 2096, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values."}, array-map {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2447, :column 16, :end-line 2447, :end-column 25, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/array-map, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2447, :macro true, :end-line 2447, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, unchecked-byte {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 994, :column 16, :end-line 994, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-byte, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 994, :macro true, :end-line 994, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, defmacro {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 3083, :column 12, :end-line 3083, :end-column 20, :arglists (quote ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ([params*] body) + attr-map?])), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.", :macro true, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}}, :name cljs.core$macros/defmacro, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env name args)], :arglists ([&form &env name & args]), :arglists-meta (nil)}, :method-params [(&form &env name args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 3083, :macro true, :end-line 3083, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env name & args]), :doc "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called."}, unchecked-short {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 996, :column 16, :end-line 996, :end-column 31, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-short, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 31, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 996, :macro true, :end-line 996, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, validate-fields {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1640, :column 13, :end-line 1640, :end-column 28, :private true, :arglists (quote ([case name fields]))}, :private true, :name cljs.core$macros/validate-fields, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([case name fields]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1640, :end-line 1640, :max-fixed-arity 3, :fn-var true, :arglists (quote ([case name fields]))}, inc {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1091, :column 31, :end-line 1091, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/inc, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1091, :macro true, :end-line 1091, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, with-redefs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2074, :column 16, :end-line 2074, :end-column 27, :macro true, :arglists (quote ([bindings & body])), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/with-redefs, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2074, :macro true, :end-line 2074, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing."}, bit-clear {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1145, :column 31, :end-line 1145, :end-column 40, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x n]))}, :name cljs.core$macros/bit-clear, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 40, :method-params ([&form &env x n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1145, :macro true, :end-line 1145, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x n])), :cljs.analyzer/numeric true}, locking {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2727, :column 16, :end-line 2727, :end-column 23, :macro true, :arglists (quote ([x & forms])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/locking, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2727, :macro true, :end-line 2727, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms])}, list {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2427, :column 16, :end-line 2427, :end-column 20, :macro true, :arglists (quote ([] [x & xs])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/list, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env]), :arglists ([&form &env] [&form &env x & xs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2427, :macro true, :end-line 2427, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x & xs])}, + {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 983, :column 31, :end-line 983, :end-column 32, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([] [x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}}, :name cljs.core$macros/+, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env] [&form &env x] [&form &env x y]), :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil nil)}, :method-params ([&form &env] [&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 983, :macro true, :end-line 983, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, aset {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 975, :column 16, :end-line 975, :end-column 20, :macro true, :arglists (quote ([a i v] [a idx idx2 & idxv])), :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}}, :name cljs.core$macros/aset, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env a i v]), :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv]), :arglists-meta (nil nil)}, :method-params ([&form &env a i v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 975, :macro true, :end-line 975, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env a i v] [&form &env a idx idx2 & idxv])}, destructure {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 612, :column 12, :end-line 612, :end-column 23, :arglists (quote ([bindings]))}, :name cljs.core$macros/destructure, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([bindings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 612, :end-line 612, :max-fixed-arity 1, :fn-var true, :arglists (quote ([bindings]))}, defmulti {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2565, :column 16, :end-line 2565, :end-column 24, :macro true, :arglists (quote ([mm-name & options])), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}}, :name cljs.core$macros/defmulti, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env mm-name options)], :arglists ([&form &env mm-name & options]), :arglists-meta (nil)}, :method-params [(&form &env mm-name options)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2565, :macro true, :end-line 2565, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env mm-name & options]), :doc "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy"}, str {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 807, :column 16, :end-line 807, :end-column 19, :macro true, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}}, :name cljs.core$macros/str, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env xs)], :arglists ([&form &env & xs]), :arglists-meta (nil)}, :method-params [(&form &env xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 807, :macro true, :end-line 807, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & xs])}, coercive-= {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 869, :column 16, :end-line 869, :end-column 26, :macro true, :arglists (quote ([x y]))}, :name cljs.core$macros/coercive-=, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 869, :macro true, :end-line 869, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y]))}, hash-map {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2457, :column 16, :end-line 2457, :end-column 24, :macro true, :arglists (quote ([] [& kvs])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}}, :name cljs.core$macros/hash-map, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([&form &env]), :arglists ([&form &env] [&form &env & kvs]), :arglists-meta (nil nil)}, :method-params ([&form &env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2457, :macro true, :end-line 2457, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env] [&form &env & kvs])}, if-let {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 337, :column 19, :end-line 337, :end-column 25, :macro true, :arglists (quote ([bindings then] [bindings then else & oldform])), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else", :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}}, :name cljs.core$macros/if-let, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 5, :method-params ([&form &env bindings then]), :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :arglists-meta (nil nil)}, :method-params ([&form &env bindings then]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 337, :macro true, :end-line 337, :max-fixed-arity 5, :fn-var true, :arglists ([&form &env bindings then] [&form &env bindings then else & oldform]), :doc "bindings => binding-form test\n\n     If test is true, evaluates then with binding-form bound to the value of\n     test, if not, yields else"}, add-ifn-methods {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1421, :column 13, :end-line 1421, :end-column 28, :private true, :arglists (quote ([type type-sym [f & meths :as form]]))}, :private true, :name cljs.core$macros/add-ifn-methods, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :method-params ([type type-sym p__53494]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1421, :end-line 1421, :max-fixed-arity 3, :fn-var true, :arglists (quote ([type type-sym [f & meths :as form]]))}, false? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 927, :column 16, :end-line 927, :end-column 22, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/false?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 927, :macro true, :end-line 927, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, case {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2173, :column 16, :end-line 2173, :end-column 20, :macro true, :arglists (quote ([e & clauses])), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}}, :name cljs.core$macros/case, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env e clauses)], :arglists ([&form &env e & clauses]), :arglists-meta (nil)}, :method-params [(&form &env e clauses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2173, :macro true, :end-line 2173, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env e & clauses]), :doc "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type."}, exists? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 934, :column 16, :end-line 934, :end-column 23, :macro true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, :name cljs.core$macros/exists?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 934, :macro true, :end-line 934, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :doc "Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript."}, bit-not {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1118, :column 31, :end-line 1118, :end-column 38, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/bit-not, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 38, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1118, :macro true, :end-line 1118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, byte {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 989, :column 16, :end-line 989, :end-column 20, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/byte, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 20, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 989, :macro true, :end-line 989, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, max {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1103, :column 31, :end-line 1103, :end-column 34, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/max, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1103, :macro true, :end-line 1103, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, == {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1083, :column 31, :end-line 1083, :end-column 33, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x] [x y] [x y & more])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/==, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env x] [&form &env x y]), :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :arglists-meta (nil nil nil)}, :method-params ([&form &env x] [&form &env x y]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1083, :macro true, :end-line 1083, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env x] [&form &env x y] [&form &env x y & more]), :cljs.analyzer/numeric true}, lazy-cat {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2682, :column 16, :end-line 2682, :end-column 24, :macro true, :arglists (quote ([& colls])), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}}, :name cljs.core$macros/lazy-cat, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env colls)], :arglists ([&form &env & colls]), :arglists-meta (nil)}, :method-params [(&form &env colls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2682, :macro true, :end-line 2682, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & colls]), :doc "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))"}, comment {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 153, :column 19, :end-line 153, :end-column 26, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cljs.core$macros/comment, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 153, :macro true, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}, warn-and-update-protocol {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1331, :column 13, :end-line 1331, :end-column 37, :private true, :arglists (quote ([p type env]))}, :private true, :name cljs.core$macros/warn-and-update-protocol, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 37, :method-params ([p type env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1331, :end-line 1331, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p type env]))}, copy-arguments {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2898, :column 16, :end-line 2898, :end-column 30, :macro true, :arglists (quote ([dest]))}, :name cljs.core$macros/copy-arguments, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([&form &env dest]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2898, :macro true, :end-line 2898, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dest]))}, unsafe-cast {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 913, :column 16, :end-line 913, :end-column 27, :macro true, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, :name cljs.core$macros/unsafe-cast, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([&form &env t x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :macro true, :end-line 913, :max-fixed-arity 4, :fn-var true, :arglists (quote ([t x])), :doc "EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type."}, type-hint-multi-arity-sigs {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1523, :column 13, :end-line 1523, :end-column 39, :private true, :arglists (quote ([type-sym sigs]))}, :private true, :name cljs.core$macros/type-hint-multi-arity-sigs, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 39, :method-params ([type-sym sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1523, :end-line 1523, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type-sym sigs]))}, defrecord {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1814, :column 16, :end-line 1814, :end-column 25, :macro true, :arglists (quote ([rsym fields & impls])), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}}, :name cljs.core$macros/defrecord, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(&form &env rsym fields impls)], :arglists ([&form &env rsym fields & impls]), :arglists-meta (nil)}, :method-params [(&form &env rsym fields impls)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1814, :macro true, :end-line 1814, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env rsym fields & impls]), :doc "(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values."}, make-array {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2409, :column 16, :end-line 2409, :end-column 26, :macro true, :arglists (quote ([size] [type size] [type size & more-sizes])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env size] [&form &env type size]), :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/make-array, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 4, :method-params ([&form &env size] [&form &env type size]), :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes]), :arglists-meta (nil nil nil)}, :method-params ([&form &env size] [&form &env type size]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 2409, :macro true, :end-line 2409, :max-fixed-arity 4, :fn-var true, :arglists ([&form &env size] [&form &env type size] [&form &env type size & more-sizes])}, unchecked-negate-int {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1030, :column 31, :end-line 1030, :end-column 51, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-negate-int, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 51, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1030, :macro true, :end-line 1030, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, simple-test-expr? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 816, :column 13, :end-line 816, :end-column 30, :private true, :arglists (quote ([env ast]))}, :private true, :name cljs.core$macros/simple-test-expr?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([env ast]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 816, :end-line 816, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env ast]))}, unchecked-inc {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1015, :column 31, :end-line 1015, :end-column 44, :cljs.analyzer/numeric true, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-inc, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 44, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1015, :macro true, :end-line 1015, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x])), :cljs.analyzer/numeric true}, and {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 821, :column 16, :end-line 821, :end-column 19, :macro true, :arglists (quote ([] [x] [x & next])), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}}, :name cljs.core$macros/and, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([&form &env] [&form &env x]), :arglists ([&form &env] [&form &env x] [&form &env x & next]), :arglists-meta (nil nil nil)}, :method-params ([&form &env] [&form &env x]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 821, :macro true, :end-line 821, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env] [&form &env x] [&form &env x & next]), :doc "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true."}, number? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 959, :column 16, :end-line 959, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/number?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 959, :macro true, :end-line 959, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, assoc-test {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2151, :column 13, :end-line 2151, :end-column 23, :private true, :arglists (quote ([m test expr env]))}, :private true, :name cljs.core$macros/assoc-test, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([m test expr env]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2151, :end-line 2151, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m test expr env]))}, js-comment {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 899, :column 16, :end-line 899, :end-column 26, :macro true, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, :name cljs.core$macros/js-comment, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 26, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 899, :macro true, :end-line 899, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comment])), :doc "Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline"}, validate-impls {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1493, :column 13, :end-line 1493, :end-column 27, :private true, :arglists (quote ([env impls]))}, :private true, :name cljs.core$macros/validate-impls, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 27, :method-params ([env impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1493, :end-line 1493, :max-fixed-arity 2, :fn-var true, :arglists (quote ([env impls]))}, symbol? {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 962, :column 16, :end-line 962, :end-column 23, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/symbol?, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 23, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :macro true, :end-line 962, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, when-some {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 523, :column 19, :end-line 523, :end-column 28, :macro true, :arglists (quote ([bindings & body])), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name cljs.core$macros/when-some, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 523, :macro true, :end-line 523, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body]), :doc "bindings => binding-form test\n\n      When test is not nil, evaluates body with binding-form bound to the\n      value of test"}, unchecked-char {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 995, :column 16, :end-line 995, :end-column 30, :macro true, :arglists (quote ([x]))}, :name cljs.core$macros/unchecked-char, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :method-params ([&form &env x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 995, :macro true, :end-line 995, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x]))}, require-macros {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2783, :column 16, :end-line 2783, :end-column 30, :macro true, :arglists (quote ([& args])), :doc "Similar to require but only for macros.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/require-macros, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2783, :macro true, :end-line 2783, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args]), :doc "Similar to require but only for macros."}, ->> {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 119, :column 19, :end-line 119, :end-column 22, :macro true, :arglists (quote ([x & forms])), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}}, :name cljs.core$macros/->>, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env x forms)], :arglists ([&form &env x & forms]), :arglists-meta (nil)}, :method-params [(&form &env x forms)], :protocol-impl nil, :arglists-meta (nil), :column 4, :line 119, :macro true, :end-line 119, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env x & forms]), :doc "Threads the expr through the forms. Inserts x as the\n     last item in the first form, making a list of it if it is not a\n     list already. If there are more forms, inserts the first form as the\n     last item in second form, etc."}, js-inline-comment {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 919, :column 16, :end-line 919, :end-column 33, :macro true, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, :name cljs.core$macros/js-inline-comment, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 33, :method-params ([&form &env comment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 919, :macro true, :end-line 919, :max-fixed-arity 3, :fn-var true, :arglists (quote ([comment])), :doc "Emit an inline JavaScript comment."}, dt->et {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 1608, :column 12, :end-line 1608, :end-column 18, :arglists (quote ([type specs fields] [type specs fields inline])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}}, :name cljs.core$macros/dt->et, :variadic false, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([type specs fields] [type specs fields inline]), :arglists ([type specs fields] [type specs fields inline]), :arglists-meta (nil nil)}, :method-params ([type specs fields] [type specs fields inline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1608, :end-line 1608, :max-fixed-arity 4, :fn-var true, :arglists ([type specs fields] [type specs fields inline])}, refer-clojure {:protocol-inline nil, :meta {:file "/Users/kevinzeidler/rhizome/reg2/resources/public/cljs/out/cljs/core.cljc", :line 2815, :column 16, :end-line 2815, :end-column 29, :macro true, :arglists (quote ([& args])), :doc "Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}}, :name cljs.core$macros/refer-clojure, :variadic true, :file "resources/public/cljs/out/cljs/core.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env args)], :arglists ([&form &env & args]), :arglists-meta (nil)}, :method-params [(&form &env args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2815, :macro true, :end-line 2815, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & args]), :doc "Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes."}}, :require-macros {core cljs.core, cljs.core cljs.core, cljs.support cljs.support}, :cljs.analyzer/constants {:seen #{cljs.core$macros/or cljs.core/-rest ITransientAssociative .-cljs$lang$ctorPrWriter & seq self__ case* :extending-base-js-type cljs.core/PROTOCOL_SENTINEL cljs.core$macros/- cljs.core/rest i__53956__auto__ -with-meta :cljs.analyzer/namespaces defrecord* -prototype cljs.core$macros/zero? js/Function -iterator cljs.core/str cljs.core$macros/extend-type cljs.core/PersistentHashMap try opts__53613__auto__ ___54083__auto__ Object ILookup cljs.core/MultiFn cljs.core$macros/nil? temp__52902__auto__ -assoc this__53602__auto__ iter__53771__auto__ js/goog IKVReduce :js .-fqn -conj cljs.core$macros/defonce cljs.core$macros/bit-and ITransientMap cljs.core$macros/identical? :fname cljs.core$macros/instance? boolean cljs.core/PersistentHashSet. k__53598__auto__ cljs.core/specify! cljs.core/pr-sequential-writer :let ret__54082__auto__ cljs.core$macros/dotimes args__54224__auto__ object cljs.core/vector? cljs.core/PersistentArrayMap :cljs.core$macros/not-found :invalid-protocol-symbol this-as p__53716__auto__ cljs.core/= .. -clone -count cljs.core/MultiFn. cljs.core$macros// cljs.core$macros/vector this__53595__auto__ h__53354__auto__ cljs.core/-assoc :pre cljs.core$macros/bit-or var_args cljs.core$macros/array cljs.core/-write .-constructor cljs.core$macros/assert a__54044__auto__ :instance cljs.core/IndexedSeq IIndexed cljs.core/-deref :private :extend IPrintWithWriter :else cljs.core/pr-writer :when IVector IIterable opt__53578__auto__ cljs.core$macros/loop cljs.core/-iterator cljs.core$macros/>= :protocol-duped-method :protocol-symbol .toFixed :protocol .apply cljs.core/count nodeGlobalRequire ns* cljs.core/hash-map goog/typeOf cljs.core/reduce cljs.core/seq js/Date. cljs.core/chunk-first :use-macros k__53607__auto__ cljs.core/IFn cljs.core$macros/cond cljs.core/get-global-hierarchy cljs.core/apply args :locals cljs.core$macros/condp finally cljs.core/Keyword :method cljs.core/prn :use y__53281__auto__ IMeta :default apply-to -lookup ICloneable this__53593__auto__ cljs.core/aclone loop* :protocols y__53267__auto__ :ns -pr-writer cljs.core$macros/binding cljs.core/chunk argc :def-emits-var INext :name ICounted IMapEntry :as cljs.core/es6-iterator &form cljs.core$macros/with-redefs cljs.core$macros/inc :nonchar cljs.core/dissoc IStack :variadic cljs.core/keyword-identical? this__53576__auto__ cljs.core/*print-newline* cljs.core/Delay dimarray__53955__auto__ cljs.core/LazySeq cljs.core/chunk-rest :constant cljs.core/atom IReversible :or or__53058__auto__ cljs.core$macros/coercive-= cljs.core$macros/str cljs.core$macros/if-let :file cljs.core/concat -> cljs.core$macros/list cljs.core$macros/+ this__53597__auto__ this__53592__auto__ this__53609__auto__ :end-column cljs.core$macros/aset __hash argseq__54225__auto__ IHash cljs.core$macros/exists? :top-fn cljs.core$macros/== :require IEquiv cljs.core$macros/max cljs.core$macros/case hierarchy__54063__auto__ writer__53623__auto__ cljs.core$macros/copy-arguments keyval__53615__auto__ js/Boolean ITransientVector RecordIter. cljs.core/native-satisfies? .append .concat js/String do __meta :method-params call number x__53969__auto__ IEditableCollection cljs.core/contains? :op :current-symbol cljs.core/into :>> :cljs.analyzer/type cljs.core/-conj letfn* :protocol-with-variadic-method if cljs.core/with-meta cljs.core$macros/unchecked-inc cljs.core$macros/and IReset :arglists-meta IEmptyableCollection :cljs.analyzer/protocol-inline % x__53632__auto__ IRecord new IDerefWithTimeout :anonymous ISet IPending :column cljs.core/not-native .getTime n__54045__auto__ :cljs.analyzer/protocol-impl default .fromArray cljs.core$macros/->> cljs.core/-first cljs.core$macros/when-first cljs.core/PersistentVector -equiv :internal-ctor writer__53577__auto__ c__53769__auto__ cljs.core/ISeq cljs.core$macros/unsafe-bit-and .-prototype x__53078__auto__ cljs.core/List .push cljs.core/-add-method sb__54105__auto__ c__53077__auto__ println this__53604__auto__ cljs.core/make-array ISwap .-cljs$lang$ctorStr cljs.core/get .fromArrays ret__54080__auto__ :positional hash-imap cljs.core/cond writer__53612__auto__ x__53355__auto__ :factory :const INamed cljs.core$macros/aget deftype* IReduce let* cljs.core/chunk-append js/Array ITransientCollection cljs.core/-nth :methods this__53591__auto__ not-native js* :undeclared-protocol-symbol :undeclared cljs.core/IMeta cljs.core$macros/coercive-not cljs.core$macros/dec x__53280__auto__ :line temp__52982__auto__ cljs.core/not-empty :var cljs.core/PersistentArrayMap. fn* :protocol-info -cljs$lang$applyTo cljs.core$macros/caching-hash recur start__54081__auto__ cljs.core/-vreset! iterys__53767__auto__ other__53594__auto__ :macro cljs.core$macros/this-as cljs.core/symbol :deprecation-nowarn cljs.core$macros/< method-table__54059__auto__ js/Error. entry__53603__auto__ .-getBasis :deprecated and__53044__auto__ .-cljs$lang$type cljs.core/missing-protocol -meta pr-pair__53614__auto__ IMap array :defs ISeq cljs.core/-lookup this__54120__auto__ elapsed__54085__auto__ &env string this__53606__auto__ :declared cljs.core/nth this__53599__auto__ cljs.core/PersistentHashSet IMultiFn .slice goog/define IAssociative function cljs$core$IFn$_invoke$arity$variadic cljs.core$macros/implements? cljs.core/nil-iter ISeqable size__53770__auto__ k__53605__auto__ :end-line cljs.core$macros/alength :cljs.analyzer/no-resolve ISequential xs__52891__auto__ cljs.core$macros/if-not :invoke :print-fn IChunkedSeq cljs.core/next :post x__54106__auto__ cljs.core$macros/bit-xor a__54043__auto__ -dissoc IAtom cljs.core$macros/when-let map-> cljs.core$macros/mask IWatchable :no-such-method :refer-clojure cljs.core$macros/coercive-boolean cljs.core/chunk-cons cljs.core/*print-fn* cljs.core$macros/deftype ITransientSet cljs.core/not :require-macros cljs.core$macros/* :max-fixed-arity cljs.core$macros/min start__54079__auto__ i__54223__auto__ temp__52968__auto__ temp__52848__auto__ set! dims__53954__auto__ cljs.core/cons :tag cljs.core$macros/<= cljs.core/assoc -cljs$lang$maxFixedArity cljs.core$macros/if-some :dot :protocol-deprecated cljs.core$macros/-> . IWithMeta var :mutable cljs.core/system-time cljs.core/chunk-buffer quote cljs.core/Symbol c__53937__auto__ m__53633__auto__ ICollection :while ASeq cljs.core$macros/lazy-seq cljs.core$macros/js-delete fs__53768__auto__ IFn end__54084__auto__ :arglists this__53596__auto__ this__53601__auto__ :skip-protocol-flag cljs.core$macros/let :import cljs.core$macros/fn :impls :hierarchy js/Object cljs.core$macros/bit-and-not js/Array. IComparable :doc -cljs$lang$macro cljs.core$macros/when-not cached-hierarchy__54062__auto__ cljs.core/PersistentVector. cljs.core/clone method-cache__54061__auto__ apply cljs.core/first :protocol-multiple-impls else__53600__auto__ cljs.core$macros/js-this :jsdoc IChunkedNext js/Number cljs.core/equiv-map cljs.core$macros/js-arguments :protocol-invalid-method argseq__54241__auto__ :invalid-arity :extend-type-invalid-method-shape .-EMPTY cljs.core$macros/keyword? cljs.core/IWithMeta IWriter :suggested-symbol :map cljs.core/list __extmap cljs.core$macros/when len__54222__auto__ x__53266__auto__ cljs.core$macros/> IDeref this__53611__auto__ ISorted *unchecked-if* throw js/goog.string.StringBuffer. .-cljs$lang$ctorPrSeq cljs.core$macros/defn -hash .-EMPTY-NODE prefer-table__54060__auto__ def cljs.core$macros/declare cljs.core/chunked-seq? IList f cljs.core$macros/mod cljs.core/ITER_SYMBOL .-call -seq this__53622__auto__}, :order [. .. if cljs.core/cond do def :declared cljs.core$macros/let cljs.core$macros/extend-type :pre :post % cljs.core$macros/assert fn* cljs.core$macros/defn :private cljs.core$macros/if-let temp__52848__auto__ cljs.core$macros/if-not cljs.core/not letfn* cljs.core$macros/fn cljs.core$macros/when-let xs__52891__auto__ cljs.core/seq cljs.core/first temp__52902__auto__ cljs.core$macros/when cljs.core$macros/loop recur cljs.core$macros/-> cljs.core$macros/->> cljs.core$macros/nil? cljs.core$macros/if-some temp__52968__auto__ temp__52982__auto__ &form cljs.core$macros/when-not cljs.core$macros/exists? & :as :else cljs.core/next cljs.core/nth :or cljs.core$macros/implements? cljs.core/ISeq cljs.core/apply cljs.core/hash-map quote cljs.core/get cljs.core$macros/declare js* goog/define let* loop* IFn ICounted IEmptyableCollection ICollection IIndexed ASeq ISeq INext ILookup IAssociative IMap IMapEntry ISet IStack IVector IDeref IDerefWithTimeout IMeta IWithMeta IReduce IKVReduce IEquiv IHash ISeqable ISequential IList IRecord IReversible ISorted IPrintWithWriter IWriter IPending IWatchable IEditableCollection ITransientCollection ITransientAssociative ITransientMap ITransientVector ITransientSet IMultiFn IChunkedSeq IChunkedNext IComparable INamed ICloneable IAtom IReset ISwap :tag boolean :js :constant :var :invoke :dot :op seq and__53044__auto__ cljs.core$macros/and or__53058__auto__ cljs.core$macros/or cljs.core$macros/coercive-= :cljs.analyzer/no-resolve c__53077__auto__ x__53078__auto__ cljs.core$macros/instance? cljs.core/Symbol cljs.core/Keyword cljs.core$macros/+ cljs.core$macros/dec cljs.core$macros// cljs.core$macros/inc cljs.core$macros/* cljs.core$macros/- cljs.core$macros/mod cljs.core$macros/< cljs.core$macros/<= cljs.core$macros/> cljs.core$macros/>= cljs.core$macros/== x__53266__auto__ y__53267__auto__ cljs.core$macros/max x__53280__auto__ y__53281__auto__ cljs.core$macros/min cljs.core$macros/bit-and cljs.core$macros/unsafe-bit-and cljs.core$macros/bit-or cljs.core$macros/bit-xor cljs.core$macros/bit-and-not cljs.core$macros/mask h__53354__auto__ set! x__53355__auto__ object string number array function default js/Boolean js/String js/Array js/Object js/Number js/Function :anonymous :locals :name :ns cljs.core$macros/deftype cljs.core/IWithMeta -with-meta new cljs.core/IMeta -meta :extend :instance cljs.core/specify! cljs.core/clone cljs.core$macros/js-this Object :protocol-symbol :invalid-protocol-symbol :protocol :protocol-deprecated :deprecated :deprecation-nowarn :cljs.analyzer/namespaces :defs :impls :undeclared :undeclared-protocol-symbol cljs.core$macros/aset :hierarchy :default -prototype this-as self__ cljs.core$macros/this-as call apply .apply .-call .concat cljs.core$macros/array cljs.core/aclone :skip-protocol-flag cljs.core/PROTOCOL_SENTINEL cljs.core/IFn :methods :protocol-info :cljs.core$macros/not-found :protocol-invalid-method :fname :no-such-method :protocol-duped-method :invalid-arity :protocol-multiple-impls :extend-type-invalid-method-shape :method :extending-base-js-type :current-symbol :suggested-symbol :cljs.analyzer/type :cljs.analyzer/protocol-impl :cljs.analyzer/protocol-inline -> :factory :positional :internal-ctor :protocols deftype* .-getBasis .-cljs$lang$type .-cljs$lang$ctorStr .-cljs$lang$ctorPrWriter this__53576__auto__ writer__53577__auto__ opt__53578__auto__ cljs.core/-write __meta __extmap __hash :mutable -clone this__53591__auto__ -hash this__53592__auto__ cljs.core$macros/caching-hash hash-imap -equiv this__53593__auto__ other__53594__auto__ cljs.core$macros/identical? .-constructor cljs.core/equiv-map this__53595__auto__ this__53596__auto__ -lookup this__53597__auto__ k__53598__auto__ cljs.core/-lookup this__53599__auto__ else__53600__auto__ cljs.core$macros/case -count this__53601__auto__ cljs.core/count -conj this__53602__auto__ entry__53603__auto__ cljs.core/vector? cljs.core/-assoc cljs.core/-nth cljs.core/reduce cljs.core/-conj -assoc this__53604__auto__ k__53605__auto__ cljs.core$macros/condp cljs.core/keyword-identical? cljs.core/assoc -dissoc this__53606__auto__ k__53607__auto__ cljs.core/contains? cljs.core/dissoc cljs.core/with-meta cljs.core/into cljs.core/not-empty -seq this__53609__auto__ cljs.core/concat cljs.core$macros/vector IIterable -iterator RecordIter. cljs.core/-iterator cljs.core/nil-iter -pr-writer this__53611__auto__ writer__53612__auto__ opts__53613__auto__ pr-pair__53614__auto__ keyval__53615__auto__ cljs.core/pr-sequential-writer cljs.core/pr-writer defrecord* map-> :map .-cljs$lang$ctorPrSeq this__53622__auto__ cljs.core/list writer__53623__auto__ :doc x__53632__auto__ m__53633__auto__ cljs.core$macros/aget goog/typeOf throw cljs.core/missing-protocol :jsdoc :protocol-with-variadic-method *unchecked-if* cljs.core$macros/coercive-not cljs.core/native-satisfies? cljs.core/LazySeq cljs.core/Delay try finally cljs.core$macros/with-redefs :>> js/Error. cljs.core/str p__53716__auto__ :line :const :nonchar case* cljs.core$macros/keyword? .-fqn cljs.core$macros/cond cljs.core/= :let :while :when cljs.core/rest iterys__53767__auto__ fs__53768__auto__ cljs.core/cons cljs.core$macros/lazy-seq cljs.core$macros/when-first cljs.core$macros/unchecked-inc cljs.core/chunk-append cljs.core/chunked-seq? c__53769__auto__ cljs.core/chunk-first :file :column :end-line :end-column cljs.core/not-native size__53770__auto__ cljs.core/chunk-buffer cljs.core$macros/coercive-boolean cljs.core/chunk-cons cljs.core/chunk cljs.core/chunk-rest iter__53771__auto__ not-native c__53937__auto__ js/Array. cljs.core/make-array dims__53954__auto__ cljs.core$macros/list dimarray__53955__auto__ cljs.core$macros/dotimes i__53956__auto__ cljs.core$macros/alength .-EMPTY cljs.core/List x__53969__auto__ cljs.core/PersistentVector cljs.core/PersistentVector. .-EMPTY-NODE .fromArray cljs.core/PersistentArrayMap cljs.core/PersistentArrayMap. cljs.core/PersistentHashMap .fromArrays cljs.core/PersistentHashSet cljs.core/PersistentHashSet. a__54043__auto__ a__54044__auto__ n__54045__auto__ cljs.core$macros/defonce method-table__54059__auto__ cljs.core/atom prefer-table__54060__auto__ method-cache__54061__auto__ cached-hierarchy__54062__auto__ hierarchy__54063__auto__ cljs.core/get-global-hierarchy cljs.core/MultiFn. cljs.core/symbol cljs.core/-add-method cljs.core/MultiFn start__54079__auto__ cljs.core/system-time ret__54080__auto__ cljs.core/prn .toFixed :print-fn println start__54081__auto__ .getTime js/Date. ret__54082__auto__ ___54083__auto__ end__54084__auto__ elapsed__54085__auto__ cljs.core$macros/str cljs.core/-first args cljs.core/-rest argc f apply-to cljs.core$macros/zero? sb__54105__auto__ js/goog.string.StringBuffer. cljs.core$macros/binding cljs.core/*print-newline* cljs.core/*print-fn* x__54106__auto__ .append .-prototype cljs.core/ITER_SYMBOL this__54120__auto__ cljs.core/es6-iterator var cljs.core$macros/js-delete cljs.core/-vreset! cljs.core/-deref ns* :require :require-macros :use :use-macros :import :refer-clojure js/goog nodeGlobalRequire cljs$core$IFn$_invoke$arity$variadic -cljs$lang$maxFixedArity -cljs$lang$applyTo len__54222__auto__ cljs.core$macros/js-arguments i__54223__auto__ .push :top-fn :variadic :max-fixed-arity :method-params :arglists :arglists-meta var_args args__54224__auto__ cljs.core$macros/copy-arguments argseq__54225__auto__ cljs.core/IndexedSeq .slice argseq__54241__auto__ :macro :def-emits-var &env -cljs$lang$macro]}, :doc nil}