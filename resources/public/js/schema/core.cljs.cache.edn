;; Analyzed by ClojureScript 1.7.122
{:use-macros nil, :excludes #{Symbol defn defmethod letfn Keyword defrecord}, :name schema.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, utils schema.utils, schema.utils schema.utils}, :uses nil, :defs {->Predicate {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 297, :column 25, :end-line 297, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([p? pred-name]))}, :name schema.core/->Predicate, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :method-params ([p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 297, :end-line 297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? pred-name]))}, ConditionalSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/ConditionalSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 42, :type true, :column 25, :internal-ctor true, :line 508, :record true, :end-line 508, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, arity {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 923, :column 21, :end-line 923, :end-column 26, :private true, :arglists (quote ([input-schema]))}, :private true, :name schema.core/arity, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 26, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map->FnSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 911, :column 25, :end-line 911, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__9494]))}, :name schema.core/map->FnSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([G__9494]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 911, :end-line 911, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9494]))}, ->One {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 784, :column 25, :end-line 784, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([schema optional? name]))}, :name schema.core/->One, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([schema optional? name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 784, :end-line 784, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema optional? name]))}, named {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 451, :column 20, :end-line 451, :end-column 25, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, :name schema.core/named, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 25, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, optional-key {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 617, :column 20, :end-line 617, :end-column 32, :arglists (quote ([k])), :doc "An optional key in a map"}, :name schema.core/optional-key, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 617, :end-line 617, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "An optional key in a map"}, Protocol {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Protocol, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 328, :record true, :end-line 328, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->AnythingSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 229, :column 25, :end-line 229, :end-column 39, :internal-ctor true, :factory :map, :arglists (quote ([G__9278]))}, :name schema.core/map->AnythingSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 39, :method-params ([G__9278]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9278]))}, map-explain {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 741, :column 21, :end-line 741, :end-column 32, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-explain, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, Maybe {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Maybe, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 427, :record true, :end-line 427, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, MapEntry {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/MapEntry, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 647, :record true, :end-line 647, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, One {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/One, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 784, :record true, :end-line 784, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Isa {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 259, :column 25, :end-line 259, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([h parent]))}, :name schema.core/->Isa, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([h parent]))}, map->ConditionalSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 508, :column 25, :end-line 508, :end-column 42, :internal-ctor true, :factory :map, :arglists (quote ([G__9361]))}, :name schema.core/map->ConditionalSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 42, :method-params ([G__9361]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9361]))}, NamedSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/NamedSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 444, :record true, :end-line 444, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MapEntry {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 647, :column 25, :end-line 647, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__9398]))}, :name schema.core/map->MapEntry, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([G__9398]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 647, :end-line 647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9398]))}, required-key? {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 611, :column 20, :end-line 611, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/required-key?, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 611, :end-line 611, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, ->Both {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 483, :column 25, :end-line 483, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Both, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 29, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 483, :end-line 483, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, schema-with-name {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 962, :column 20, :end-line 962, :end-column 36, :arglists (quote ([schema name]))}, :name schema.core/schema-with-name, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, Symbol {:name schema.core/Symbol, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 397, :column 1, :end-line 397, :end-column 12, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 397, :column 6, :end-line 397, :end-column 12}, :doc "A symbol"}, Either {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Either, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 459, :record true, :end-line 459, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->One {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 784, :column 25, :end-line 784, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__9450]))}, :name schema.core/map->One, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([G__9450]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 784, :end-line 784, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9450]))}, fn-schema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 1070, :column 30, :end-line 1070, :end-column 39, :tag FnSchema, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, :name schema.core/fn-schema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 39, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1070, :ret-tag FnSchema, :end-line 1070, :max-fixed-arity 1, :tag FnSchema, :fn-var true, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, conditional {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 522, :column 20, :end-line 522, :end-column 31, :arglists (quote ([& preds-and-schemas])), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}}, :name schema.core/conditional, :variadic true, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}, :method-params [(preds-and-schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 522, :end-line 522, :max-fixed-arity 0, :fn-var true, :arglists ([& preds-and-schemas]), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked."}, either {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 475, :column 20, :end-line 475, :end-column 26, :arglists (quote ([& schemas])), :doc "A value that must satisfy at least one schema in schemas.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/either, :variadic true, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy at least one schema in schemas."}, explicit-schema-key {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 626, :column 20, :end-line 626, :end-column 39, :arglists (quote ([ks]))}, :name schema.core/explicit-schema-key, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 39, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 626, :end-line 626, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, schema-name {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 966, :column 20, :end-line 966, :end-column 31, :arglists (quote ([schema]))}, :name schema.core/schema-name, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :end-line 966, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, Bool {:name schema.core/Bool, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 381, :column 1, :end-line 381, :end-column 10, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 381, :column 6, :end-line 381, :end-column 10}, :doc "Boolean true or false"}, ->EqSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 243, :column 25, :end-line 243, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([v]))}, :name schema.core/->EqSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, enum {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 289, :column 20, :end-line 289, :end-column 24, :arglists (quote ([& vs])), :doc "A value that must be = to some element of vs.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}}, :name schema.core/enum, :variadic true, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}, :method-params [(vs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 0, :fn-var true, :arglists ([& vs]), :doc "A value that must be = to some element of vs."}, one {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 786, :column 20, :end-line 786, :end-column 23, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, :name schema.core/one, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 23, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 786, :end-line 786, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, find-extra-keys-schema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 692, :column 20, :end-line 692, :end-column 42, :arglists (quote ([map-schema]))}, :name schema.core/find-extra-keys-schema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 42, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, map->Predicate {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 297, :column 25, :end-line 297, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__9310]))}, :name schema.core/map->Predicate, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :method-params ([G__9310]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9310]))}, map->RequiredKey {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 602, :column 25, :end-line 602, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__9384]))}, :name schema.core/map->RequiredKey, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([G__9384]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 602, :end-line 602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9384]))}, Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Record, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 869, :record true, :end-line 869, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parse-sequence-schema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 796, :column 20, :end-line 796, :end-column 41, :arglists (quote ([s]))}, :name schema.core/parse-sequence-schema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 41, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, ->t_schema$core9326 {:protocol-inline nil, :meta {:anonymous true, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta9327])), :file nil}, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/->t_schema$core9326, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :method-params ([meta9327]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta9327])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, OptionalKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/OptionalKey, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 615, :record true, :end-line 615, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Record {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 869, :column 25, :end-line 869, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__9483]))}, :name schema.core/map->Record, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([G__9483]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 869, :end-line 869, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9483]))}, EqSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EqSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 243, :record true, :end-line 243, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 107, :column 4, :end-line 107, :end-column 11, :protocol schema.core/Schema, :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/explain, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}"}, ->RequiredKey {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 602, :column 25, :end-line 602, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->RequiredKey, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 602, :end-line 602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, subschema-walker {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 122, :column 16, :end-line 122, :end-column 32, :dynamic true}, :name schema.core/subschema-walker, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 32, :method-params ([s]), :protocol-impl nil, :arglists-meta (), :column 1, :dynamic true, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "The function to call within 'walker' implementations to create walkers for subschemas.\n   Can be dynamically bound (using start-walker below) to create different walking behaviors.\n\n   For the curious, implemented using dynamic binding rather than making walker take a\n   subschema-walker as an argument because some behaviors (e.g. recursive schema walkers)\n   seem to require mind-bending things like fixed-point combinators that way, but are\n   simple this way."}, map->Protocol {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 328, :column 25, :end-line 328, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__9321]))}, :name schema.core/map->Protocol, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([G__9321]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9321]))}, preserve-map-type {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 699, :column 21, :end-line 699, :end-column 38, :private true, :arglists (quote ([original walker-result]))}, :private true, :name schema.core/preserve-map-type, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 38, :method-params ([original walker-result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 2, :fn-var true, :arglists (quote ([original walker-result]))}, fn-validation? {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 1033, :column 20, :end-line 1033, :end-column 34, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, :name schema.core/fn-validation?, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :end-line 1033, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, isa {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 270, :column 20, :end-line 270, :end-column 23, :arglists (quote ([parent] [h parent])), :doc "A value that must be a child of parent.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}}, :name schema.core/isa, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :method-params ([parent] [h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists ([parent] [h parent]), :doc "A value that must be a child of parent."}, Num {:name schema.core/Num, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 385, :column 1, :end-line 385, :end-column 9, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 385, :column 6, :end-line 385, :end-column 9}, :doc "Any number"}, eq {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 252, :column 20, :end-line 252, :end-column 22, :arglists (quote ([v])), :doc "A value that must be (= v)."}, :name schema.core/eq, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "A value that must be (= v)."}, validate {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 157, :column 20, :end-line 157, :end-column 28, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value."}, :name schema.core/validate, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([schema value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value."}, pred {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 311, :column 20, :end-line 311, :end-column 24, :arglists (quote ([p?] [p? pred-name])), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/pred, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :method-params ([p?] [p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 2, :fn-var true, :arglists ([p?] [p? pred-name]), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors."}, AnythingSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/AnythingSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 39, :type true, :column 25, :internal-ctor true, :line 229, :record true, :end-line 229, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Any {:name schema.core/Any, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 237, :column 1, :end-line 237, :end-column 9, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 237, :column 6, :end-line 237, :end-column 9}, :doc "Any value, including nil."}, Regex {:name schema.core/Regex, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 401, :column 1, :end-line 401, :end-column 11, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 401, :column 6, :end-line 401, :end-column 11}, :doc "A regular expression"}, ->EnumSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 280, :column 25, :end-line 280, :end-column 35, :internal-ctor true, :factory :positional, :arglists (quote ([vs]))}, :name schema.core/->EnumSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 35, :method-params ([vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vs]))}, RequiredKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/RequiredKey, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 602, :record true, :end-line 602, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain-kspec {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 636, :column 21, :end-line 636, :end-column 34, :private true, :arglists (quote ([kspec]))}, :private true, :name schema.core/explain-kspec, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :method-params ([kspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kspec]))}, Inst {:name schema.core/Inst, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 412, :column 1, :end-line 412, :end-column 10, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 412, :column 6, :end-line 412, :end-column 10}, :doc "The local representation of #inst ..."}, map->OptionalKey {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 615, :column 25, :end-line 615, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__9391]))}, :name schema.core/map->OptionalKey, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([G__9391]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9391]))}, FnSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/FnSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 911, :record true, :end-line 911, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, if {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 535, :column 20, :end-line 535, :end-column 22, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, :name schema.core/if, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 22, :method-params ([pred if-schema else-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, Predicate {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Predicate, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 297, :record true, :end-line 297, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-fn-schema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 930, :column 20, :end-line 930, :end-column 34, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, :name schema.core/make-fn-schema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 34, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 930, :end-line 930, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, map-walker {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 704, :column 21, :end-line 704, :end-column 31, :private true, :arglists (quote ([map-schema]))}, :private true, :name schema.core/map-walker, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 704, :end-line 704, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, Str {:name schema.core/Str, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 376, :column 1, :end-line 376, :end-column 9, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 376, :column 6, :end-line 376, :end-column 9}, :doc "Satisfied only by String.\n   Is (pred string?) and not js/String in cljs because of keywords."}, map->EqSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 243, :column 25, :end-line 243, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__9285]))}, :name schema.core/map->EqSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([G__9285]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9285]))}, ->AnythingSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 229, :column 25, :end-line 229, :end-column 39, :internal-ctor true, :factory :positional, :arglists (quote ([_]))}, :name schema.core/->AnythingSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 39, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, maybe {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 436, :column 20, :end-line 436, :end-column 25, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, :name schema.core/maybe, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, check {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 151, :column 20, :end-line 151, :end-column 25, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures."}, :name schema.core/check, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 25, :method-params ([schema x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures."}, pair {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 855, :column 20, :end-line 855, :end-column 24, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, :name schema.core/pair, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 24, :method-params ([first-schema first-name second-schema second-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 855, :end-line 855, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, set-fn-validation! {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 1038, :column 20, :end-line 1038, :end-column 38, :arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances."}, :name schema.core/set-fn-validation!, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 38, :method-params ([on?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1038, :end-line 1038, :max-fixed-arity 1, :fn-var true, :arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances."}, EnumSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EnumSchema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 35, :type true, :column 25, :internal-ctor true, :line 280, :record true, :end-line 280, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->OptionalKey {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 615, :column 25, :end-line 615, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->OptionalKey, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, ->ConditionalSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 508, :column 25, :end-line 508, :end-column 42, :internal-ctor true, :factory :positional, :arglists (quote ([preds-and-schemas]))}, :name schema.core/->ConditionalSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 42, :method-params ([preds-and-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([preds-and-schemas]))}, t_schema$core9326 {:num-fields 1, :protocols #{schema.core/Schema cljs.core/IMeta cljs.core/IWithMeta}, :name schema.core/t_schema$core9326, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :type true, :anonymous true, :column 10, :line 404, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->NamedSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 444, :column 25, :end-line 444, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema name]))}, :name schema.core/->NamedSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, schematize-fn {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 1065, :column 20, :end-line 1065, :end-column 33, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, :name schema.core/schematize-fn, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([f schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1065, :end-line 1065, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, Uuid {:name schema.core/Uuid, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 416, :column 1, :end-line 416, :end-column 10, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 416, :column 6, :end-line 416, :end-column 10}, :doc "The local representation of #uuid ..."}, map->Isa {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 259, :column 25, :end-line 259, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__9292]))}, :name schema.core/map->Isa, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([G__9292]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9292]))}, map->Either {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 459, :column 25, :end-line 459, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__9345]))}, :name schema.core/map->Either, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([G__9345]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9345]))}, ->Record {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 869, :column 25, :end-line 869, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([klass schema]))}, :name schema.core/->Record, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 869, :end-line 869, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema]))}, protocol-name {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 323, :column 20, :end-line 323, :end-column 33, :arglists (quote ([protocol]))}, :name schema.core/protocol-name, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([protocol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([protocol]))}, Isa {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Isa, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 259, :record true, :end-line 259, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, +missing+ {:name schema.core/+missing+, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 598, :column 1, :end-line 598, :end-column 24, :no-doc true, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 598, :column 15, :end-line 598, :end-column 24, :no-doc true}, :doc "A sentinel value representing missing portions of the input data."}, ->Either {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 459, :column 25, :end-line 459, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Either, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 31, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, map->NamedSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 444, :column 25, :end-line 444, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__9338]))}, :name schema.core/map->NamedSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 36, :method-params ([G__9338]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9338]))}, start-walker {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 136, :column 20, :end-line 136, :end-column 32, :arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior."}, :name schema.core/start-walker, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 32, :method-params ([sub-walker schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior."}, checker {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 145, :column 20, :end-line 145, :end-column 27, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, :name schema.core/checker, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, Keyword {:name schema.core/Keyword, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 393, :column 1, :end-line 393, :end-column 13, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 393, :column 6, :end-line 393, :end-column 13}, :doc "A keyword"}, ->MapEntry {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 647, :column 25, :end-line 647, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([kspec val-schema]))}, :name schema.core/->MapEntry, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 647, :end-line 647, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema]))}, ->Protocol {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 328, :column 25, :end-line 328, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name schema.core/->Protocol, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->Maybe {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 427, :column 25, :end-line 427, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Maybe, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, explain-input-schema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 905, :column 20, :end-line 905, :end-column 40, :arglists (quote ([input-schema]))}, :name schema.core/explain-input-schema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 40, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 905, :end-line 905, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, record {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 888, :column 20, :end-line 888, :end-column 26, :arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'."}, :name schema.core/record, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 26, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 888, :end-line 888, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'."}, optional-key? {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 622, :column 20, :end-line 622, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/optional-key?, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, map->Both {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 483, :column 25, :end-line 483, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__9353]))}, :name schema.core/map->Both, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 29, :method-params ([G__9353]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 483, :end-line 483, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9353]))}, required-key {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 604, :column 20, :end-line 604, :end-column 32, :arglists (quote ([k])), :doc "A required key in a map"}, :name schema.core/required-key, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "A required key in a map"}, optional {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 791, :column 20, :end-line 791, :end-column 28, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, :name schema.core/optional, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 28, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 791, :end-line 791, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, Int {:name schema.core/Int, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 389, :column 1, :end-line 389, :end-column 9, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 389, :column 6, :end-line 389, :end-column 9}, :doc "Any integral number"}, ->FnSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 911, :column 25, :end-line 911, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([output-schema input-schemas]))}, :name schema.core/->FnSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 911, :end-line 911, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas]))}, Schema {:meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 90, :column 14, :end-line 90, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {walker [[this]], explain [[this]]}}}, :protocol-symbol true, :name schema.core/Schema, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 20, :column 1, :line 90, :protocol-info {:methods {walker [[this]], explain [[this]]}}, :info nil, :end-line 90, :impls #{schema.core/Isa cljs/core.PersistentHashMap js/RegExp schema.core/t_schema$core9326 cljs/core.PersistentArrayMap schema.core/NamedSchema cljs/core.PersistentVector schema.core/Either schema.core/Both cljs/core.PersistentHashSet schema.core/ConditionalSchema schema.core/Record schema.core/EqSchema schema.core/MapEntry function schema.core/Maybe schema.core/AnythingSchema schema.core/FnSchema schema.core/Predicate schema.core/EnumSchema schema.core/Protocol}, :doc nil, :jsdoc ("@interface")}, Both {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Both, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 29, :type true, :column 25, :internal-ctor true, :line 483, :record true, :end-line 483, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Maybe {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 427, :column 25, :end-line 427, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__9331]))}, :name schema.core/map->Maybe, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 30, :method-params ([G__9331]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 427, :end-line 427, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9331]))}, map-entry {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 686, :column 20, :end-line 686, :end-column 29, :arglists (quote ([kspec val-schema]))}, :name schema.core/map-entry, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 29, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema]))}, walker {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 91, :column 4, :end-line 91, :end-column 10, :protocol schema.core/Schema, :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below.", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/walker, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below."}, specific-key? {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 632, :column 20, :end-line 632, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/specific-key?, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 632, :end-line 632, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, map->EnumSchema {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 280, :column 25, :end-line 280, :end-column 35, :internal-ctor true, :factory :map, :arglists (quote ([G__9302]))}, :name schema.core/map->EnumSchema, :variadic false, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 35, :method-params ([G__9302]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__9302]))}, both {:protocol-inline nil, :meta {:file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :line 500, :column 20, :end-line 500, :end-column 24, :arglists (quote ([& schemas])), :doc "A value that must satisfy every schema in schemas.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/both, :variadic true, :file "file:/Users/kevinzeidler/.m2/repository/prismatic/schema/0.4.0/schema-0.4.0.jar!/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 500, :end-line 500, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy every schema in schemas."}}, :require-macros {macros schema.macros, schema.macros schema.macros}, :cljs.analyzer/constants {:seen #{& named :schema optional-key present? satisfies? p? js/RegExp = :klass :v :schema.core/error p isa? Symbol throws? vs :parent conditional :else missing-required-key either enum sequential? one :_ set? :kspec schema :name :extra-validator-fn :output-schema :value xk klass v map? :proto-sym has-extra-elts? :input-schemas string? :type eq parent pred Any Regex protocol :val-schema keyword? :schema.core/missing :preds-and-schemas _ % Str kspec :k maybe check name output-schema :optional? meta9327 input-schemas some :schemas instance? re-find not :h val-schema preds-and-schemas :pred-name k integer? => Keyword ifn? :error optional? schemas =>* h :p? invalid-key record count pred-name required-key optional :proto-pred Int matches-some-condition? :p :vs map-entry symbol? both disallowed-key}, :order [:type :schema :value :error :schema.core/error instance? :_ Any _ :v = eq v :h :parent isa? h parent :vs enum vs :p? :pred-name throws? :else not Int Keyword Symbol Str pred p? pred-name :proto-sym :p :proto-pred satisfies? protocol p string? re-find integer? keyword? symbol? js/RegExp Regex meta9327 maybe schema :name named name :schemas schemas % check some either both :preds-and-schemas matches-some-condition? conditional preds-and-schemas :schema.core/missing :k k required-key optional-key :kspec :val-schema missing-required-key count xk invalid-key map-entry kspec val-schema map? disallowed-key set? :optional? optional? sequential? present? has-extra-elts? optional one :klass :extra-validator-fn record klass & :output-schema :input-schemas ifn? =>* => output-schema input-schemas]}, :doc "A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   You can directly type hint a symbol as a class, primitive, or simple\n   schema.\n\n   See the docstrings of defrecord, fn, and defn for more details about how\n   to use these macros."}