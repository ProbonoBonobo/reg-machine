Starting nREPL server...
/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:50233,suspend=y,server=n -Dfile.encoding=UTF-8 -XX:-OmitStackTraceInFastThrow -Dclojure.compile.path=/Users/kevinzeidler/rhizome/reg2/target/classes -Dsucculent.version=0.1.0-SNAPSHOT -Dclojure.debug=false -classpath "/Users/kevinzeidler/rhizome/reg2/test:/Users/kevinzeidler/rhizome/reg2/src:/Users/kevinzeidler/rhizome/reg2/dev-resources:/Users/kevinzeidler/rhizome/reg2/resources:/Users/kevinzeidler/rhizome/reg2/target/classes:/Users/kevinzeidler/.m2/repository/lein-doo/lein-doo/0.1.7/lein-doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/devcards/devcards/0.2.1-7/devcards-0.2.1-7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react/0.14.3-0/react-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/sablono/sablono/0.5.3/sablono-0.5.3.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer.jvm/0.6.10/tools.analyzer.jvm-0.6.10.jar:/Users/kevinzeidler/.m2/repository/doo/doo/0.1.7/doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer/0.6.9/tools.analyzer-0.6.9.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-externs/v20160315/closure-compiler-externs-v20160315.jar:/Users/kevinzeidler/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:/Users/kevinzeidler/.m2/repository/args4j/args4j/2.0.26/args4j-2.0.26.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom/0.14.3-0/react-dom-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.async/0.2.391/core.async-0.2.391.jar:/Users/kevinzeidler/.m2/repository/karma-reporter/karma-reporter/0.1.0/karma-reporter-0.1.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20160609-f42b4a24/google-closure-library-third-party-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library/0.0-20160609-f42b4a24/google-closure-library-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.memoize/0.5.9/core.memoize-0.5.9.jar:/Users/kevinzeidler/.m2/repository/cljsjs/showdown/0.4.0-1/showdown-0.4.0-1.jar:/Users/kevinzeidler/.m2/repository/cljs-react-reload/cljs-react-reload/0.1.1/cljs-react-reload-0.1.1.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom-server/0.14.3-0/react-dom-server-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/kevinzeidler/.m2/repository/org/ow2/asm/asm-all/4.2/asm-all-4.2.jar:/Users/kevinzeidler/.m2/repository/garden/garden/1.3.2/garden-1.3.2.jar:/Users/kevinzeidler/.m2/repository/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.reader/1.0.0-beta3/tools.reader-1.0.0-beta3.jar:/Users/kevinzeidler/.m2/repository/com/yahoo/platform/yui/yuicompressor/2.4.8/yuicompressor-2.4.8.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-unshaded/v20160315/closure-compiler-unshaded-v20160315.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojurescript/1.9.227/clojurescript-1.9.227.jar:/Users/kevinzeidler/.m2/repository/org/mozilla/rhino/1.7R5/rhino-1.7R5.jar:/Users/kevinzeidler/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.cache/0.6.5/core.cache-0.6.5.jar:/Users/kevinzeidler/.m2/repository/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" clojure.main -i /private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init954461471239667643.clj
Connected to the target VM, address: '127.0.0.1:50233', transport: 'socket'
Connecting to local nREPL server...
Clojure 1.8.0
nREPL server started on port 50239 on host 127.0.0.1 - nrepl://127.0.0.1:50239
Disconnected from the target VM, address: '127.0.0.1:50233', transport: 'socket'

Process finished with exit code 255


Starting nREPL server...
/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:50262,suspend=y,server=n -Dfile.encoding=UTF-8 -XX:-OmitStackTraceInFastThrow -Dclojure.compile.path=/Users/kevinzeidler/rhizome/reg2/target/classes -Dsucculent.version=0.1.0-SNAPSHOT -Dclojure.debug=false -classpath "/Users/kevinzeidler/rhizome/reg2/test:/Users/kevinzeidler/rhizome/reg2/src:/Users/kevinzeidler/rhizome/reg2/dev-resources:/Users/kevinzeidler/rhizome/reg2/resources:/Users/kevinzeidler/rhizome/reg2/target/classes:/Users/kevinzeidler/.m2/repository/lein-doo/lein-doo/0.1.7/lein-doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/devcards/devcards/0.2.1-7/devcards-0.2.1-7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react/0.14.3-0/react-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/sablono/sablono/0.5.3/sablono-0.5.3.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer.jvm/0.6.10/tools.analyzer.jvm-0.6.10.jar:/Users/kevinzeidler/.m2/repository/doo/doo/0.1.7/doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer/0.6.9/tools.analyzer-0.6.9.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-externs/v20160315/closure-compiler-externs-v20160315.jar:/Users/kevinzeidler/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:/Users/kevinzeidler/.m2/repository/args4j/args4j/2.0.26/args4j-2.0.26.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom/0.14.3-0/react-dom-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.async/0.2.391/core.async-0.2.391.jar:/Users/kevinzeidler/.m2/repository/karma-reporter/karma-reporter/0.1.0/karma-reporter-0.1.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20160609-f42b4a24/google-closure-library-third-party-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library/0.0-20160609-f42b4a24/google-closure-library-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.memoize/0.5.9/core.memoize-0.5.9.jar:/Users/kevinzeidler/.m2/repository/cljsjs/showdown/0.4.0-1/showdown-0.4.0-1.jar:/Users/kevinzeidler/.m2/repository/cljs-react-reload/cljs-react-reload/0.1.1/cljs-react-reload-0.1.1.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom-server/0.14.3-0/react-dom-server-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/kevinzeidler/.m2/repository/org/ow2/asm/asm-all/4.2/asm-all-4.2.jar:/Users/kevinzeidler/.m2/repository/garden/garden/1.3.2/garden-1.3.2.jar:/Users/kevinzeidler/.m2/repository/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.reader/1.0.0-beta3/tools.reader-1.0.0-beta3.jar:/Users/kevinzeidler/.m2/repository/com/yahoo/platform/yui/yuicompressor/2.4.8/yuicompressor-2.4.8.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-unshaded/v20160315/closure-compiler-unshaded-v20160315.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojurescript/1.9.227/clojurescript-1.9.227.jar:/Users/kevinzeidler/.m2/repository/org/mozilla/rhino/1.7R5/rhino-1.7R5.jar:/Users/kevinzeidler/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.cache/0.6.5/core.cache-0.6.5.jar:/Users/kevinzeidler/.m2/repository/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" clojure.main -i /private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init6730902249246696328.clj
Connected to the target VM, address: '127.0.0.1:50262', transport: 'socket'
Connecting to local nREPL server...
Clojure 1.8.0
nREPL server started on port 50270 on host 127.0.0.1 - nrepl://127.0.0.1:50270
Loading src/succulent/core.cljs... done
(active-register)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: active-register in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init6730902249246696328.clj:1:1)
Disconnected from the target VM, address: '127.0.0.1:50262', transport: 'socket'

Process finished with exit code 255


Starting nREPL server...
/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/bin/java -agentlib:jdwp=transport=dt_socket,address=127.0.0.1:50295,suspend=y,server=n -Dfile.encoding=UTF-8 -XX:-OmitStackTraceInFastThrow -Dclojure.compile.path=/Users/kevinzeidler/rhizome/reg2/target/classes -Dsucculent.version=0.1.0-SNAPSHOT -Dclojure.debug=false -classpath "/Users/kevinzeidler/rhizome/reg2/test:/Users/kevinzeidler/rhizome/reg2/src:/Users/kevinzeidler/rhizome/reg2/dev-resources:/Users/kevinzeidler/rhizome/reg2/resources:/Users/kevinzeidler/rhizome/reg2/target/classes:/Users/kevinzeidler/.m2/repository/lein-doo/lein-doo/0.1.7/lein-doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/devcards/devcards/0.2.1-7/devcards-0.2.1-7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react/0.14.3-0/react-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/sablono/sablono/0.5.3/sablono-0.5.3.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer.jvm/0.6.10/tools.analyzer.jvm-0.6.10.jar:/Users/kevinzeidler/.m2/repository/doo/doo/0.1.7/doo-0.1.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.analyzer/0.6.9/tools.analyzer-0.6.9.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.nrepl/0.2.12/tools.nrepl-0.2.12.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-externs/v20160315/closure-compiler-externs-v20160315.jar:/Users/kevinzeidler/.m2/repository/clojure-complete/clojure-complete/0.2.4/clojure-complete-0.2.4.jar:/Users/kevinzeidler/.m2/repository/args4j/args4j/2.0.26/args4j-2.0.26.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom/0.14.3-0/react-dom-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.async/0.2.391/core.async-0.2.391.jar:/Users/kevinzeidler/.m2/repository/karma-reporter/karma-reporter/0.1.0/karma-reporter-0.1.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20160609-f42b4a24/google-closure-library-third-party-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/google-closure-library/0.0-20160609-f42b4a24/google-closure-library-0.0-20160609-f42b4a24.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.memoize/0.5.9/core.memoize-0.5.9.jar:/Users/kevinzeidler/.m2/repository/cljsjs/showdown/0.4.0-1/showdown-0.4.0-1.jar:/Users/kevinzeidler/.m2/repository/cljs-react-reload/cljs-react-reload/0.1.1/cljs-react-reload-0.1.1.jar:/Users/kevinzeidler/.m2/repository/cljsjs/react-dom-server/0.14.3-0/react-dom-server-0.14.3-0.jar:/Users/kevinzeidler/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/Users/kevinzeidler/.m2/repository/org/ow2/asm/asm-all/4.2/asm-all-4.2.jar:/Users/kevinzeidler/.m2/repository/garden/garden/1.3.2/garden-1.3.2.jar:/Users/kevinzeidler/.m2/repository/com/google/code/gson/gson/2.2.4/gson-2.2.4.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar:/Users/kevinzeidler/.m2/repository/org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.jar:/Users/kevinzeidler/.m2/repository/org/clojure/tools.reader/1.0.0-beta3/tools.reader-1.0.0-beta3.jar:/Users/kevinzeidler/.m2/repository/com/yahoo/platform/yui/yuicompressor/2.4.8/yuicompressor-2.4.8.jar:/Users/kevinzeidler/.m2/repository/com/google/javascript/closure-compiler-unshaded/v20160315/closure-compiler-unshaded-v20160315.jar:/Users/kevinzeidler/.m2/repository/org/clojure/clojurescript/1.9.227/clojurescript-1.9.227.jar:/Users/kevinzeidler/.m2/repository/org/mozilla/rhino/1.7R5/rhino-1.7R5.jar:/Users/kevinzeidler/.m2/repository/com/google/guava/guava/19.0/guava-19.0.jar:/Users/kevinzeidler/.m2/repository/org/clojure/core.cache/0.6.5/core.cache-0.6.5.jar:/Users/kevinzeidler/.m2/repository/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar" clojure.main -i /private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj
Connected to the target VM, address: '127.0.0.1:50295', transport: 'socket'
Connecting to local nREPL server...
Clojure 1.8.0
nREPL server started on port 50298 on host 127.0.0.1 - nrepl://127.0.0.1:50298
(in-ns 'succulent.core)
=> #object[clojure.lang.Namespace 0x34b09e88 "succulent.core"]
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:input]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 [:input :children 0 :charstring :val] "5",
 [:input :children 1 :charcode :val] 53,
 [:input :children 2 :data-caption :val] :number,
 [:input :children 3 :destination :val] [true :r1]}
(ask :charstring :val)
=> 0
(goto :charstring)
=> {:idx :charstring, :state 0, :val 0, :children {}}
(defn sendkey [e]
  (do
    (swap! db assoc [:input :children 0 :val] (str e))
    (swap! db assoc [:input :children 1 :val] (charCode e))
    (swap! db assoc [:input :children 2 :val] (inspect-tag e))
    (swap! db assoc [:input :children 3 :val] (compatible? e))))
=> #'succulent.core/sendkey
(sendkey "6")
=>
{[:input :children 0 :charstring :val] "5",
 [:input :children 2 :val] :number,
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:input]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 [:input :children 3 :destination :val] [true :r1],
 :refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 [:input :children 3 :val] [true :r1],
 [:input :children 2 :data-caption :val] :number,
 [:input :children 1 :charcode :val] 53,
 [:input :children 1 :val] 54,
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 [:input :children 0 :val] "6"}
(defn sendkey [e]
  (do
    (swap! db assoc-in [:input :children 0 :val] (str e))
    (swap! db assoc-in [:input :children 1 :val] (charCode e))
    (swap! db assoc-in [:input :children 2 :val] (inspect-tag e))
    (swap! db assoc-in [:input :children 3 :val] (compatible? e))))
=> #'succulent.core/sendkey
(sendkey "6")
=>
{[:input :children 0 :charstring :val] "5",
 [:input :children 2 :val] :number,
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:input]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x298a0bb5 "succulent.core$make_root_component@298a0bb5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x34d74e16 "succulent.core$make_nested_component@34d74e16"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 [:input :children 3 :destination :val] [true :r1],
 :refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 [:input :children 3 :val] [true :r1],
 [:input :children 2 :data-caption :val] :number,
 [:input :children 1 :charcode :val] 53,
 [:input :children 1 :val] 54,
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "6", :children {}},
                    1 {:idx :charcode, :state 0, :val 54, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 [:input :children 0 :val] "6"}
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 1 tests containing 1 assertions.
1 failures, 0 errors.
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 2 tests containing 2 assertions.
0 failures, 0 errors.
Loading src/succulent/core.cljs... done
Running succulent.core/input-number2
Ran 1 test containing 1 assertion.
1 failure, 0 errors.
(put "5")
ClassCastException java.lang.Boolean cannot be cast to clojure.lang.IFn  succulent.core$put.invokeStatic (core.cljs:269)
(put 5)
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Util.compare (Util.java:152)
(ask :r1 :state)
=> 0
(compatible? "5")
=> [true :r1]
(green? (ask :r1 :state))
=> true
(defn put [k]
  (let [target (active-register)
        status-light (ask target :state)
        event-context (compatible? k)
        k-goes-here? (and (first event-context)
                          (= (second event-context) (active-register)))
        switch-contexts? (and (yellow? status-light)
                              (false? k-goes-here?))]
    (cond k-goes-here? (do
                         (if (green? status-light)
                           (swap! db assoc-in (querytarget target :val) (str k))
                           (swap! db update-in (querytarget target :val) str k))
                         (swap! db assoc-in (querytarget target :val) 1))
          switch-contexts? (do
                             (lock (active-register))
                             (swap! db assoc-in (ask :r2 :val) (str k)))
          :else (str "Unsure what to do with " k))))

=> #'succulent.core/put
(put "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 1, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "6")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 1, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(swap! db assoc-in (querytarget target :val) "5")
CompilerException java.lang.RuntimeException: Unable to resolve symbol: target in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:20)
(swap! db assoc-in (querytarget :r1 :val) "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(defn put [k]
  (let [target (active-register)
        status-light (ask target :state)
        event-context (compatible? k)
        k-goes-here? (and (first event-context)
                          (= (second event-context) (active-register)))
        switch-contexts? (and (yellow? status-light)
                              (false? k-goes-here?))]
    (cond k-goes-here? (do
                         (if (green? status-light)
                           (swap! db assoc-in (querytarget target :val) (str k))
                           (swap! db update-in (querytarget target :val) str k))
                         (swap! db assoc-in (querytarget target :state) 1))
          switch-contexts? (do
                             (lock (active-register))
                             (swap! db assoc-in (ask :r2 :val) (str k)))
          :else (str "Unsure what to do with " k))))
=> #'succulent.core/put
(swap! db assoc-in (querytarget :r1 :val) "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "6")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "6", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "6")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:input]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x29ab5a5e "succulent.core$make_root_component@29ab5a5e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2bc76442 "succulent.core$make_nested_component@2bc76442"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "66", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "+")
=> "Unsure what to do with +"
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:input]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "3", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "4")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:input]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "34", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "4", :children {}},
                    1 {:idx :charcode, :state 0, :val 52, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
UnsupportedOperationException nth not supported on this type: Long  clojure.lang.RT.nthFrom (RT.java:947)
(sendkey "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:input]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "34", :children {}},
                        1 {:idx :op, :state 1, :val "-", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "-", :children {}},
                    1 {:idx :charcode, :state 0, :val 45, :children {}},
                    2 {:idx :data-caption, :state 0, :val :polymorphic, :children {}},
                    3 {:idx :destination, :state 0, :val [true :op], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "6")
UnsupportedOperationException nth not supported on this type: Long  clojure.lang.RT.nthFrom (RT.java:947)
db
=>
#object[clojure.lang.Atom
        0x552cf701
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:input]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "34", :children {}},
                                      1 {:idx :op, :state 2, :val "-", :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val "6", :children {}},
                                  1 {:idx :charcode, :state 0, :val 54, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :children {}},
                                  3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(active-register)
=> :r2
(lock (active-register))
=> "Can't lock: active register is empty!"
(goto (active-register))
=> {:idx :r2, :state 0, :val 0, :children {}}
db
=>
#object[clojure.lang.Atom
        0x552cf701
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:input]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6c0ebe57 "succulent.core$make_root_component@6c0ebe57"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x6102d79f "succulent.core$make_nested_component@6102d79f"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "34", :children {}},
                                      1 {:idx :op, :state 2, :val "-", :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val "6", :children {}},
                                  1 {:idx :charcode, :state 0, :val 54, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :children {}},
                                  3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(goto :r2)
=> {:idx :r2, :state 0, :val 0, :children {}}
(get-in @db [:registers :children 1])
=> {:idx :op, :state 2, :val "-", :children {}}
(get-in @db [:refs :r2])
=> [:registers :children 2]
Loading src/succulent/core.cljs... done
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:input]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "9")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:input]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "59", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "9", :children {}},
                    1 {:idx :charcode, :state 0, :val 57, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
UnsupportedOperationException nth not supported on this type: Long  clojure.lang.RT.nthFrom (RT.java:947)
(sendkey "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:input]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "59", :children {}},
                        1 {:idx :op, :state 1, :val "-", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "-", :children {}},
                    1 {:idx :charcode, :state 0, :val 45, :children {}},
                    2 {:idx :data-caption, :state 0, :val :polymorphic, :children {}},
                    3 {:idx :destination, :state 0, :val [true :op], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "1")
UnsupportedOperationException nth not supported on this type: Long  clojure.lang.RT.nthFrom (RT.java:947)
(get-in @db [:refs :r2])
=> [:registers :children 2]
db
=>
#object[clojure.lang.Atom
        0x2d61e7b6
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:input]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x25b13fa8 "succulent.core$make_root_component@25b13fa8"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x4fd7872e "succulent.core$make_nested_component@4fd7872e"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "59", :children {}},
                                      1 {:idx :op, :state 2, :val "-", :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val "1", :children {}},
                                  1 {:idx :charcode, :state 0, :val 49, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :children {}},
                                  3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:184:5)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
(sendkey "1")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "1", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "1", :children {}},
                    1 {:idx :charcode, :state 0, :val 49, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "6")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "16", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "6", :children {}},
                    1 {:idx :charcode, :state 0, :val 54, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "16", :children {}},
                        1 {:idx :op, :state 0, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "8")
=> "Unsure what to do with 8"
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "16", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [true :op], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(lock :op)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "16", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [true :op], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:registers]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:input]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x62ce3205 "succulent.core$make_root_component@62ce3205"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x4eec1020 "succulent.core$make_nested_component@4eec1020"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "16", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "5", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r2], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(defn put [k]
  (let [target (active-register)
        next (next-register)
        status-light (ask target :state)
        event-context (compatible? k)
        k-goes-here? (and (first event-context)
                          (= (second event-context) (active-register)))
        switch-contexts? (and (yellow? status-light)
                              (false? k-goes-here?))]
    (cond k-goes-here? (do
                         (if (green? status-light)
                           (swap! db assoc-in (querytarget target :val) (str k))
                           (swap! db update-in (querytarget target :val) str k))
                         (swap! db assoc-in (querytarget target :state) 1))
          switch-contexts? (do
                             (lock target)
                             (swap! db assoc-in (querytarget next :val) (str k)))
          :else (str "Unsure what to do with " k))))

=> #'succulent.core/put
Loading src/succulent/core.cljs... done
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:registers]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:input]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "1")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:registers]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:input]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "51", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "1", :children {}},
                    1 {:idx :charcode, :state 0, :val 49, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:registers]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:input]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "51", :children {}},
                        1 {:idx :op, :state 0, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "3")
=> "Unsure what to do with 3"
db
=>
#object[clojure.lang.Atom
        0xc4145b
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:registers]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:input]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x34700cf1 "succulent.core$make_root_component@34700cf1"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0xcb59a0d "succulent.core$make_nested_component@cb59a0d"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "51", :children {}},
                                      1 {:idx :op, :state 0, :val "+", :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                                  1 {:idx :charcode, :state 0, :val 51, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :children {}},
                                  3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:input]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:input]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(querytarget :op :val)
=> [:registers :children 1 :val]
(querytarget :op :state)
=> [:registers :children 1 :state]
(swap! db assoc-in (querytarget :op :state) 1)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:input]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x2319b9ad "succulent.core$make_root_component@2319b9ad"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6655ddd6 "succulent.core$make_nested_component@6655ddd6"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "5", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "+")
=> "Unsure what to do with +"
(sendkey "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:registers]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:input]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "7")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:registers]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:input]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "57", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "7", :children {}},
                    1 {:idx :charcode, :state 0, :val 55, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:registers]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:input]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x73923d17 "succulent.core$make_root_component@73923d17"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x697797ae "succulent.core$make_nested_component@697797ae"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "57", :children {}},
                        1 {:idx :op, :state 0, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "7")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:input]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "7", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "7", :children {}},
                    1 {:idx :charcode, :state 0, :val 55, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "4")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:input]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "74", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "4", :children {}},
                    1 {:idx :charcode, :state 0, :val 52, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:input]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "74", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "4")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:input]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "74", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "4", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "4", :children {}},
                    1 {:idx :charcode, :state 0, :val 52, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "=")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:input]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x6d638389 "succulent.core$make_root_component@6d638389"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2ad5b096 "succulent.core$make_nested_component@2ad5b096"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "74", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 2, :val "4", :children {}},
                        3 {:idx :r3, :state 1, :val "=", :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "=", :children {}},
                    1 {:idx :charcode, :state 0, :val 61, :children {}},
                    2 {:idx :data-caption, :state 0, :val :equals, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(and true true true)
=> true
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Too many arguments to if, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:243:5)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 239, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1394:1)
Loading src/succulent/core.cljs... done
(sendkey "2")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:input]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "2", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "2", :children {}},
                    1 {:idx :charcode, :state 0, :val 50, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:input]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "23", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:input]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "23", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:input]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "23", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "3", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "=")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:registers]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:input]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x13332ae1 "succulent.core$make_root_component@13332ae1"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x6369c4c0 "succulent.core$make_nested_component@6369c4c0"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "23", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 2, :val "3", :children {}},
                        3 {:idx :r3, :state 1, :val "=", :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "=", :children {}},
                    1 {:idx :charcode, :state 0, :val 61, :children {}},
                    2 {:idx :data-caption, :state 0, :val :equals, :children {}},
                    3 {:idx :destination, :state 0, :val [false :evaluate], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:registers]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:input]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "3", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "2")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:registers]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:input]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "32", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "2", :children {}},
                    1 {:idx :charcode, :state 0, :val 50, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:registers]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:input]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "32", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "7")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:registers]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:input]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "32", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "7", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "7", :children {}},
                    1 {:idx :charcode, :state 0, :val 55, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "=")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:registers]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:input]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x799b1005 "succulent.core$make_root_component@799b1005"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x121e80df "succulent.core$make_nested_component@121e80df"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "32", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 2, :val "7", :children {}},
                        3 {:idx :r3, :state 0, :val "(+ 32 7)", :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "=", :children {}},
                    1 {:idx :charcode, :state 0, :val 61, :children {}},
                    2 {:idx :data-caption, :state 0, :val :equals, :children {}},
                    3 {:idx :destination, :state 0, :val [false :evaluate], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "7")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "7", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "7", :children {}},
                    1 {:idx :charcode, :state 0, :val 55, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "9")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "79", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "9", :children {}},
                    1 {:idx :charcode, :state 0, :val 57, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "79", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "1")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "79", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "1", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "1", :children {}},
                    1 {:idx :charcode, :state 0, :val 49, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "4")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "79", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "14", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "4", :children {}},
                    1 {:idx :charcode, :state 0, :val 52, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r2], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:registers]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:input]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x7b7ae2c5 "succulent.core$make_root_component@7b7ae2c5"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x36f53044 "succulent.core$make_nested_component@36f53044"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "79", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "143", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r2], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "=")
ArityException Wrong number of args (2) passed to: core/vec  clojure.lang.AFn.throwArity (AFn.java:429)
Loading src/succulent/core.cljs... done
(sendkey "7")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:registers]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:input]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "7", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "7", :children {}},
                    1 {:idx :charcode, :state 0, :val 55, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:registers]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:input]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "73", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "3", :children {}},
                    1 {:idx :charcode, :state 0, :val 51, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:registers]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:input]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "73", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "+", :children {}},
                    1 {:idx :charcode, :state 0, :val 43, :children {}},
                    2 {:idx :data-caption, :state 0, :val :operator, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "1")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:registers]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:input]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "73", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "1", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "1", :children {}},
                    1 {:idx :charcode, :state 0, :val 49, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [false :sigswitch], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "9")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:registers]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:input]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3735765f "succulent.core$make_root_component@3735765f"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x1dfa4613 "succulent.core$make_nested_component@1dfa4613"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "73", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "19", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "9", :children {}},
                    1 {:idx :charcode, :state 0, :val 57, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r2], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(sendkey "=")
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
(apply "+" [4 5])
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
(charCode "+")
=> 43
(get-in asciitable "+")
ClassCastException java.lang.String cannot be cast to java.lang.Character  java.lang.Character.compareTo (Character.java:122)
(get-in asciitable +)
IllegalArgumentException Don't know how to create ISeq from: clojure.core$_PLUS_  clojure.lang.RT.seqFrom (RT.java:542)
(get-in asciitable \+)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Character  clojure.lang.RT.seqFrom (RT.java:542)
(get-in asciitable "\+")
RuntimeException Unsupported escape character: \+  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException EOF while reading string  clojure.lang.Util.runtimeException (Util.java:221)
asciitable
=>
{" " [32 :invalid],
 "!" [33 :invalid],
 "\"" [34 :invalid],
 "#" [35 :invalid],
 "$" [36 :invalid],
 "%" [37 :invalid],
 "&" [38 :invalid],
 "'" [39 :invalid],
 "(" [40 :invalid],
 ")" [41 :invalid],
 "*" [42 :operator],
 "+" [43 :operator],
 "," [44 :invalid],
 "-" [45 :polymorphic],
 "." [46 :invalid],
 "/" [47 :operator],
 "0" [48 :number],
 "1" [49 :number],
 "2" [50 :number],
 "3" [51 :number],
 "4" [52 :number],
 "5" [53 :number],
 "6" [54 :number],
 "7" [55 :number],
 "8" [56 :number],
 "9" [57 :number],
 ":" [58 :invalid],
 ";" [59 :invalid],
 "<" [60 :invalid],
 "=" [61 :equals],
 ">" [62 :invalid],
 "?" [63 :invalid],
 "@" [64 :invalid],
 "A" [65 :invalid],
 "B" [66 :invalid],
 "C" [67 :invalid],
 "D" [68 :invalid],
 "E" [69 :invalid],
 "F" [70 :invalid],
 "G" [71 :invalid],
 "H" [72 :invalid],
 "I" [73 :invalid],
 "J" [74 :invalid],
 "K" [75 :invalid],
 "L" [76 :invalid],
 "M" [77 :invalid],
 "N" [78 :invalid],
 "O" [79 :invalid],
 "P" [80 :invalid],
 "Q" [81 :invalid],
 "R" [82 :invalid],
 "S" [83 :invalid],
 "T" [84 :invalid],
 "U" [85 :invalid],
 "V" [86 :invalid],
 "W" [87 :invalid],
 "X" [88 :invalid],
 "Y" [89 :invalid],
 "Z" [90 :invalid],
 "[" [91 :invalid],
 "\\" [92 :invalid],
 "]" [93 :invalid],
 "^" [94 :operator],
 "_" [95 :invalid],
 "`" [96 :invalid],
 "a" [97 :invalid],
 "b" [98 :invalid],
 "c" [99 :invalid],
 "d" [100 :invalid],
 "e" [101 :invalid],
 "f" [102 :invalid],
 "g" [103 :invalid],
 "h" [104 :invalid],
 "i" [105 :invalid],
 "j" [106 :invalid],
 "k" [107 :invalid],
 "l" [108 :invalid],
 "m" [109 :invalid],
 "n" [110 :invalid],
 "o" [111 :invalid],
 "p" [112 :invalid],
 "q" [113 :invalid],
 "r" [114 :invalid],
 "s" [115 :invalid],
 "t" [116 :invalid],
 "u" [117 :invalid],
 "v" [118 :invalid],
 "w" [119 :invalid],
 "x" [120 :invalid],
 "y" [121 :invalid],
 "z" [122 :invalid],
 "{" [123 :invalid],
 "|" [124 :invalid],
 "}" [125 :invalid],
 "~" [126 :invalid],
 "" [129 :invalid]}
(get-in ascii-table "+")
CompilerException java.lang.RuntimeException: Unable to resolve symbol: ascii-table in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(get-in asciitable "+")
ClassCastException java.lang.String cannot be cast to java.lang.Character  java.lang.Character.compareTo (Character.java:122)
(get-in asciitable ["+"])
=> [43 :operator]
(char 43)
=> \+
(apply (char 43) [4 5])
ClassCastException java.lang.Character cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unmatched delimiter: ), compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:79:52)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
(in-sandbox? "+")
=> true
(defn make-executable [k f]
  (if-not (= (in-sandbox? k) f)
    (do
      (swap! db update-in [k] f)
      (str "String value '" k "' now invokes the following function: "(get-in db [:atom2action k])))))
=> #'succulent.core/make-executable
(make-executable "+" +)
=> "String value '+' now invokes the following function: "
db
=>
#object[clojure.lang.Atom
        0x2cb2cef7
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:input]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
               "+" nil}}]
(defn make-executable [k f]
  (if-not (= (in-sandbox? k) f)
    (do
      (swap! db update-in [k] f)
      (str "String value '" k "' now invokes the following function: " (get-in db [:atom2action k])))))
=> #'succulent.core/make-executable
(make-executable "+" +)
=> "String value '+' now invokes the following function: "
(defn make-executable [k f]
  (if-not (= (in-sandbox? k) f)
    (doall
      (swap! db update-in [k] f)
      (str "String value '" k "' now invokes the following function: " (get-in db [:atom2action k])))))
=> #'succulent.core/make-executable
(make-executable "+" +)
ClassCastException clojure.lang.PersistentArrayMap cannot be cast to java.lang.Number  clojure.lang.Numbers.isPos (Numbers.java:96)
db
=>
#object[clojure.lang.Atom
        0x2cb2cef7
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:input]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6eabe8cd "succulent.core$make_root_component@6eabe8cd"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x54545699 "succulent.core$make_nested_component@54545699"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
               "+" nil}}]
Loading src/succulent/core.cljs... done
(make-executable "+" +)
=> nil
(make-executable "+" -)
ClassCastException clojure.core$_PLUS_ cannot be cast to java.lang.Number  clojure.lang.Numbers.minus (Numbers.java:104)
(defn make-executable [k f]
  (if-not (= (in-sandbox? k) f)
    (do
      (swap! db update-in [:atom2action k] f)
      (str "String value '" k "' now invokes the following function: " (get-in db [:atom2action k])))))
=> #'succulent.core/make-executable
(make-executable "+" -)
ClassCastException clojure.core$_PLUS_ cannot be cast to java.lang.Number  clojure.lang.Numbers.minus (Numbers.java:104)
(make-executable "*" *)
=> "String value '*' now invokes the following function: "
(defn make-executable [k f]
  (if-not (= (in-sandbox? k) f)
    (do
      (swap! db update-in [:atom2action k] f)
      (str "String value '" k "' now invokes the following function: " (get-in @db [:atom2action k])))))
=> #'succulent.core/make-executable
(make-executable "*" *)
=> "String value '*' now invokes the following function: "
db
=>
#object[clojure.lang.Atom
        0xd27cbb1
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "*" nil},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:input]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(make-executable "*" #(fn [x y] (* x y)))
ArityException Wrong number of args (1) passed to: core/eval4643/fn--4644  clojure.lang.AFn.throwArity (AFn.java:429)
(make-executable "*" (fn [x y] (* x y)))
ArityException Wrong number of args (1) passed to: core/eval4649/fn--4650  clojure.lang.AFn.throwArity (AFn.java:429)
(make-executable "mult" (fn [x y] (* x y)))
ArityException Wrong number of args (1) passed to: core/eval4653/fn--4654  clojure.lang.AFn.throwArity (AFn.java:429)
(defn make-executable [k f]
    (swap! db update-in [:atom2action k] merge {k f}))
=> #'succulent.core/make-executable
(make-executable "mult" (fn [x y] (* x y)))
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
               "*" nil,
               "mult" {"mult" #object[succulent.core$eval4658$fn__4659 0x140eb685 "succulent.core$eval4658$fn__4659@140eb685"]}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:input]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(defn make-executable [k f]
      (swap! db update-in [:atom2action] merge {k f}))
=> #'succulent.core/make-executable
(make-executable "mult" (fn [x y] (* x y)))
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
               "*" nil,
               "mult" #object[succulent.core$eval4663$fn__4664 0x589da7ea "succulent.core$eval4663$fn__4664@589da7ea"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:registers]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:input]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3a97ec93 "succulent.core$make_root_component@3a97ec93"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x2623a9b3 "succulent.core$make_nested_component@2623a9b3"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: component? in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:206:11)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:204:5)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: reg in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:207:17)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unmatched delimiter: ), compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:207:77)
Loading src/succulent/core.cljs... done
(get-color :r1)
=> :green
(get-color :r2)
=> :green
(get-color 1)
=> :yellow
(get-color (goto :r1))
IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Keyword  clojure.lang.RT.seqFrom (RT.java:542)
(goto :r1)
=> {:idx :r1, :state 0, :val 0, :children {}}
(component? :r1)
IllegalArgumentException contains? not supported on type: clojure.lang.Keyword  clojure.lang.RT.contains (RT.java:814)
(contains? {:idx :r1, :state 0, :val 0, :children {}} :state)
=> true
(coll? {:idx :r1, :state 0, :val 0, :children {}})
=> true
(coll? "4")
=> false
(defn keyworded-map [& {function :function sequence :sequence}]
  (map function sequence))

=> #'succulent.core/keyworded-map
(defn matches-pattern? [obj] (keyworded-map :sequence obj :function #(contains? obj :state)))
=> #'succulent.core/matches-pattern?
(goto :r1)
=> {:idx :r1, :state 0, :val 0, :children {}}
(matches-pattern? (goto :r1))
ArityException Wrong number of args (1) passed to: core/matches-pattern?/fn--5107  clojure.lang.AFn.throwArity (AFn.java:429)
(defn matches-pattern? [obj] (keyworded-map :sequence obj :function #(contains? % :state)))
=> #'succulent.core/matches-pattern?
(matches-pattern? (goto :r1))
=> (false false false false)
(defn matches-pattern? [obj] (keyworded-map :sequence (into {} obj) :function #(contains? % :state)))
=> #'succulent.core/matches-pattern?
(matches-pattern? (goto :r1))
=> (false false false false)
(defn matches-pattern? [obj] (keyworded-map :sequence #(contains? % :state) :function obj))
=> #'succulent.core/matches-pattern?
(matches-pattern? (goto :r1))
IllegalArgumentException Don't know how to create ISeq from: succulent.core$matches_pattern_QMARK_$fn__5127  clojure.lang.RT.seqFrom (RT.java:542)
(defn has-all? [& {props :props object :object}]
  (if-not (map? object)(map #(contains? object %) object)

RuntimeException EOF while reading, starting at line 2  clojure.lang.Util.runtimeException (Util.java:221)
(defn has-all? [& {props :props object :object}]
  (if-not (map? object)
    false
    (map #(contains? object %) object)))

=> #'succulent.core/has-all?
(defn has-all? [& {props :props object :object}]
  (if-not (map? object)
    false
    (map #(contains? object %) props)))

=> #'succulent.core/has-all?
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vec? props))  (str "Not an iterable seq of properties: " props)
        :else (reduce true? (map #(contains? object %) props))))

CompilerException java.lang.RuntimeException: Unable to resolve symbol: vec? in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:3:14)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (seq? props))  (str "Not an iterable seq of properties: " props)
        :else (reduce true? (map #(contains? object %) props))))

=> #'succulent.core/has-all?
(has-all? :props [:state :vec] :object (goto :r1))
=> "Not an iterable seq of properties: [:state :vec]"
(seq? [:state :vec])
=> false
(list? [:state :vec])
=> false
(satisfies? ISeq [:state :vec])
CompilerException java.lang.RuntimeException: Unable to resolve symbol: ISeq in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(satisfies? Seq [:state :vec])
CompilerException java.lang.RuntimeException: Unable to resolve symbol: Seq in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(satisfies? ISeqable [:state :vec])
CompilerException java.lang.RuntimeException: Unable to resolve symbol: ISeqable in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(seq? (seq [:state :vec]))
=> true
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        :else (reduce true? (map #(contains? object %) props))))

=> #'succulent.core/has-all?
(has-all? :props [:state :vec] :object (goto :r1))
ArityException Wrong number of args (2) passed to: core/true?  clojure.lang.AFn.throwArity (AFn.java:429)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        :else (reduce true? (into [] (map #(contains? object %) props)))))

=> #'succulent.core/has-all?
(has-all? :props [:state :vec] :object (goto :r1))
ArityException Wrong number of args (2) passed to: core/true?  clojure.lang.AFn.throwArity (AFn.java:429)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        :else (not-any? false? (into [] (map #(contains? object %) props)))))

=> #'succulent.core/has-all?
(has-all? :props [:state :vec] :object (goto :r1))
=> false
(has-all? :props [:state :val] :object (goto :r1))
=> true
(def any? (complement not-any?))
(defn has-all? [& {props :props object :object constraints :constraints}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        (cond (any? false? (into [] (map #(contains? object %) props)))

=> #'succulent.core/any?
RuntimeException EOF while reading, starting at line 5  clojure.lang.Util.runtimeException (Util.java:221)
(def any? (complement not-any?))
(defn has-all? [& {props :props object :object constraints :constraints}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        (cond (any? false? (into [] (map #(contains? object %) props)))

=> #'succulent.core/any?
RuntimeException EOF while reading, starting at line 5  clojure.lang.Util.runtimeException (Util.java:221)
(defn has-all? [& {props :props object :object constraints :constraints}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        (any? false? (map #(contains? object %) props) (str "Lacks a required property: " (set/difference (into #{} props) (into #{} (keys object))))

RuntimeException EOF while reading, starting at line 4  clojure.lang.Util.runtimeException (Util.java:221)
(defn has-all? [& {props :props object :object constraints :constraints}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        (any? false? (map #(contains? object %) props) (str "Lacks a required property: " (set/difference (into #{} props) (into #{} (keys object))))

RuntimeException EOF while reading, starting at line 4  clojure.lang.Util.runtimeException (Util.java:221)
(defn has-all? [& {props :props object :object constraints :constraints}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (vector? props))  (str "Not an iterable seq of properties: " props)
        (any? false? (map #(contains? object %) props)) (str "Lacks a required property: " (set/difference (into #{} props) (into #{} (keys object)))) :else true))

=> #'succulent.core/has-all?
(set/difference #{:waffles :cans} {:waffles "bisquick"})
=> #{:cans :waffles}
(set/difference #{:waffles :cans} (into #{} {:waffles "bisquick"}))
=> #{:cans :waffles}
(set/difference #{:waffles :cans} (into #{} (keys {:waffles "bisquick"})))
=> #{:cans}
(any? 1)
ArityException Wrong number of args (1) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(any? [1])
ArityException Wrong number of args (1) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(some? [1])
=> true
"  1 (defprotocol Dog\n      2   (sit [this])\n      3   (bark [this])\n      4   (eat [this]))\n  5\n  6 (deftype Terrier []\n      7   Dog\n      8   (sit [this]\n            9     (prn \"sitting\"))\n      10   (bark [this]\n             11     (prn \"woof!\"))\n      12   (eat [this]\n             13     (prn \"nom nom nom!\")))\n  14\n  15   (defn new-terrier []\n         16     (Terrier.))"
=>
"  1 (defprotocol Dog
     2   (sit [this])
     3   (bark [this])
     4   (eat [this]))
 5
 6 (deftype Terrier []
     7   Dog
     8   (sit [this]
           9     (prn \"sitting\"))
     10   (bark [this]
            11     (prn \"woof!\"))
     12   (eat [this]
            13     (prn \"nom nom nom!\")))
 14
 15   (defn new-terrier []
        16     (Terrier.))"
(str/split  "  1 (defprotocol Dog\n      2   (sit [this])\n      3   (bark [this])\n      4   (eat [this]))\n  5\n  6 (deftype Terrier []\n      7   Dog\n      8   (sit [this]\n            9     (prn \"sitting\"))\n      10   (bark [this]\n             11     (prn \"woof!\"))\n      12   (eat [this]\n             13     (prn \"nom nom nom!\")))\n  14\n  15   (defn new-terrier []\n         16     (Terrier.))" #"\d+")
CompilerException java.lang.RuntimeException: No such namespace: str, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(require '[clojure.string :as str])
=> nil
(str/split  "  1 (defprotocol Dog\n      2   (sit [this])\n      3   (bark [this])\n      4   (eat [this]))\n  5\n  6 (deftype Terrier []\n      7   Dog\n      8   (sit [this]\n            9     (prn \"sitting\"))\n      10   (bark [this]\n             11     (prn \"woof!\"))\n      12   (eat [this]\n             13     (prn \"nom nom nom!\")))\n  14\n  15   (defn new-terrier []\n         16     (Terrier.))" #"\d+")
=>
["  "
 " (defprotocol Dog\n"
 "   (sit [this])\n"
 "   (bark [this])\n"
 "   (eat [this]))\n"
 "\n"
 " (deftype Terrier []\n"
 "   Dog\n"
 "   (sit [this]\n"
 "     (prn \"sitting\"))\n"
 "   (bark [this]\n"
 "     (prn \"woof!\"))\n"
 "   (eat [this]\n"
 "     (prn \"nom nom nom!\")))\n"
 "\n"
 "   (defn new-terrier []\n"
 "     (Terrier.))"]
(defprotocol Dog
  (sit [this]
       (bark [this])
       (eat [this]
            (deftype Terrier
              Dog
              (sit [this]
                (prn \"sitting\"))
              (bark [this]
                (prn \"woof!\"))
              (eat [this]
                (prn \"nom nom nom!\")))
            (defn new-terrier []
              (Terrier.)))))
RuntimeException Unsupported character: \"sitting  clojure.lang.Util.runtimeException (Util.java:221)
=> \"
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unsupported character: \"woof!  clojure.lang.Util.runtimeException (Util.java:221)
=> \"
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unsupported character: \"nom  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: nom in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:849)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: nom! in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:849)
=> \"
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.IllegalArgumentException: Unable to resolve classname: Terrier, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:14:15)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defprotocol Dog
  (sit [this]
       (bark [this])
       (eat [this]
            (deftype Terrier
              Dog
              (sit [this]
                (prn "sitting"))
              (bark [this]
                (prn "woof!"))
              (eat [this]
                (prn "nom nom nom!")))
            (defn new-terrier []
              (Terrier.)))))
=> Dog
(def terrier (new-terrier))
CompilerException java.lang.IllegalStateException: Attempting to call unbound fn: #'succulent.core/new-terrier, compiling:(form-init3183983122131059632.clj:1:14)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 84, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1436:1)
(defprotocol Form
  (instance? [obj this]))
(deftype Square [w h]
  Form
  (instance? [obj this]
    (and (map? this)
         (contains? this :width)
         (contains? this :height))))
(defn make-square [w h]
  (Square. w h))
Warning: protocol #'succulent.core/Form is overwriting function instance?
WARNING: instance? already refers to: #'clojure.core/instance? in namespace: succulent.core, being replaced by: #'succulent.core/instance?
=> Form
=> succulent.core.Square
=> #'succulent.core/make-square
(make-square 5 10)
=> #object[succulent.core.Square 0x3045e49 "succulent.core.Square@3045e49"]
(def square (make-square nil nil))
=> #'succulent.core/square
square
=> #object[succulent.core.Square 0x15b77da5 "succulent.core.Square@15b77da5"]
(instance? terrier square)
IllegalArgumentException No implementation of method: :instance? of protocol: #'succulent.core/Form found for class: clojure.lang.Var$Unbound  clojure.core/-cache-protocol-fn (core_deftype.clj:568)
(instance? 5 square)
IllegalArgumentException No implementation of method: :instance? of protocol: #'succulent.core/Form found for class: java.lang.Long  clojure.core/-cache-protocol-fn (core_deftype.clj:568)

(def definstance [k properties]
  (if (vector? properties)
    (swap! db update-in [patterns] merge {k (into #{} properties)})
    (do
      (str "Not a vector of properties: " properties)
      false)))
CompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(defn definstance [k properties]
  (if (vector? properties)
    (swap! db update-in [patterns] merge {k (into #{} properties)})
    (do
      (str "Not a vector of properties: " properties)
      false)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: patterns in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:3:5)
(defn definstance [k properties]
  (if (vector? properties)
    (swap! db update-in [:patterns] merge {k (into #{} properties)})
    (do
      (str "Not a vector of properties: " properties)
      false)))

=> #'succulent.core/definstance
(definstance "quadrilateral" [:width :height :sides])
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" #{:width :sides :height}}}
(defn definstance [k properties constraints]
  (if (vector? properties)
    (swap! db update-in [:patterns] merge {k {:props (into #{} properties) :constraints (vec (into [] constraints)))
    (do
      (str "Not a vector of properties: " properties)
      false)))
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: properties in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:5:7)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn definstance [k properties constraints]
  (if (vector? properties)
    (swap! db update-in [:patterns] merge {k {:props (into #{} properties) :constraints (vec (into [] constraints))}})
    (do
      (str "Not a vector of properties: " properties)
      false)))
=> #'succulent.core/definstance
(definstance "quadrilateral" [:width :height :sides] [#(> (get-in % :width) 5)])
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]}}}
(has-all? :props (get-in @db [:patterns :quadrilateral :props]) :object {:width 7 :height 10})
=> "Not an iterable seq of properties: "
(has-all? :props (into #{} (get-in @db [:patterns :quadrilateral :props])) :object {:width 7 :height 10})
=> "Not an iterable seq of properties: #{}"
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10})
=> "Not an iterable seq of properties: #{:width :sides :height}"
(get-in @db [:patterns "quadrilateral" :props])
=> #{:width :sides :height}
(set? (get-in @db [:patterns "quadrilateral" :props]))
=> true
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not an iterable seq of properties: " props)
        (some? (set/difference props (into #{} (keys object))))))
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:2:3)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not a set: " props)
        (some? (set/difference props (into #{} (keys object)))) false
        :else true))
=> #'succulent.core/has-all?
(set? (get-in @db [:patterns "quadrilateral" :props]))
=> true
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10})
=> false
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10 :sides 3})
=> false
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not a set: " props)
        (superset? props (into #{} (keys object)))) true
        :else false)
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:2:3)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not a set: " props)
        (superset? props (into #{} (keys object))) true
        :else false))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: superset? in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:4:9)
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not a set: " props)
        (set/superset? props (into #{} (keys object))) true
        :else false))
=> #'succulent.core/has-all?
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10 :sides 3})
=> true
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10})
=> true
(defn has-all? [& {props :props object :object}]
  (cond (not (map? object)) (str "Not a map:" object)
        (not (set? props))  (str "Not a set: " props)
        (set/superset? (into #{} (keys object)) props) true
        :else false))
=> #'succulent.core/has-all?
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10})
=> false
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10 :sides 3})
=> true
(defn defabstract [& {k :props props :constraints constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (do (swap! db update-in [:patterns] merge {k {:props (into #{} properties))
                  (get-in @db [:patterns k]))))
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: ]  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: k in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:5:19)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
()(defn defabstract [& {k :props props :constraints constraints}]
    (cond (not (vector? props)) (str "Not a vector: " props)
          (not (vector? constraints)) (str "Not a vector: " constraints)
          :else (do (swap! db update-in [:patterns] merge {k {:props (into #{} props}}))
          (get-in @db [:patterns k]))))
=> ()
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: ]  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: }  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: }  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: k in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:5:11)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn defabstract [& {k :props props :constraints constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (do (swap! db update-in [:patterns] merge {k {:props (into #{} props)}})
                  (get-in @db [:patterns k]))))
RuntimeException Map literal must contain an even number of forms  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: ]  clojure.lang.Util.runtimeException (Util.java:221)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: props in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:2:14)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn defabstract [& {:k k  :props props :constraints constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (do (swap! db update-in [:patterns] merge {k {:props (into #{} props)}})
                  (get-in @db [:patterns k]))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: k in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(defn defabstract [& {:k k  :props props :constraints constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (do (swap! db update-in [:patterns] merge {k {:props (into #{} props)}})
                  (get-in @db [:patterns]))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: k in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(defn defabstract [& {:k k  :props props :constraints constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (swap! db update-in [:patterns] merge {k {:props (into #{} props)}})))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: k in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)

(defn defabstract [& {k :k props :props constraints :constraints}]
  (cond (not (vector? props)) (str "Not a vector: " props)
        (not (vector? constraints)) (str "Not a vector: " constraints)
        :else (swap! db update-in [:patterns] merge {k {:props (into #{} props)}})))
=> #'succulent.core/defabstract
(has-all? :props (get-in @db [:patterns "quadrilateral" :props]) :object {:width 7 :height 10 :sides 3})
=> true
(defabstract :k :square :props [:width :height] :constraints [#(= (get-in % :width) (get-in % :height))])
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
            :square {:props #{:width :height}}}}
(defn fulfills? [instance pattern-name]
  (let [constraints (get-in @db [:pattern pattern-name :constraints])]
    (map #(apply % instance) constraints)))
=> #'succulent.core/fulfills?
(defn any? [coll]
  (complement not-any?))
=> #'succulent.core/any?
(any? [false false false true])
=> #object[clojure.core$complement$fn__4611 0x4c046bf1 "clojure.core$complement$fn__4611@4c046bf1"]
(not-any? [true true true])
ArityException Wrong number of args (1) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(not-any? true true true)
ArityException Wrong number of args (3) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(some [3 2])
ArityException Wrong number of args (1) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(some)
ArityException Wrong number of args (0) passed to: core/some  clojure.lang.AFn.throwArity (AFn.java:429)
(str/split "hello \n world" " #"\\n"))
RuntimeException Unsupported character: \\n  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException EOF while reading string  clojure.lang.Util.runtimeException (Util.java:221)
(str/split "hello \n world" " #"\n"))
RuntimeException EOF while reading string  clojure.lang.Util.runtimeException (Util.java:221)
(str/split "hello \n world" " #"\n")
RuntimeException EOF while reading string  clojure.lang.Util.runtimeException (Util.java:221)
(str/split "hello \n world" #"\n")
=> ["hello " " world"]
(str/split "hello \n world" #"\\n")
=> ["hello \nworld"]
(str/split "hello \n world" #"\w")
=> ["" "" "" "" "" " \n"]
(str/split "hello \n world" #"\s")
=> ["hello" "" "" "world"]
(str/split "hello \n world" #"\s+")
=> ["hello" "world"]
(str/split "hello ewieow \n world" #"\s+")
=> ["hello" "ewieow" "world"]
(str/split "hello ewieow \n world" #"\n+")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"+\n+")
PatternSyntaxException Dangling meta character '+' near index 0
+\n+
^  java.util.regex.Pattern.error (Pattern.java:1955)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(str/split "hello ewieow \n world" #"\n+")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"\n*")
=> ["h" "e" "l" "l" "o" " " "e" "w" "i" "e" "o" "w" " " "" " " "w" "o" "r" "l" "d"]
(str/split "hello ewieow \n world" #"\n+^")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"\n")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"$\n")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"\n$")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"\n+\w")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"\n\w+")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"\n")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"\n+")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"^\n+")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #"^\\n+")
=> ["hello ewieow \nworld"]
(str/split "hello ewieow \n world" #^"\n+")
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(str/split "hello ewieow \n world" #"[^\n+]")
=> ["" "" "" "" "" "" "" "" "" "" "" "" "" "\n"]
(str/split "hello ewieow \n world" #"[^\n]")
=> ["" "" "" "" "" "" "" "" "" "" "" "" "" "\n"]
(str/split "hello ewieow \n world" #"[$\n]")
=> ["hello ewieow " " world"]
(str/split "hello ewieow \n world" #"[$\n\w]")
=> ["" "" "" "" "" " " "" "" "" "" "" " " " "]
(str/split "hello ewieow \n world" #"[$\n \w]")
=> []
(str/split-lines "hello ewieow \n world")
=> ["hello ewieow " " world"]
(str/split-lines "hello ewieow\n world")
=> ["hello ewieow" " world"]
(map (comp #(apply str/split % #"\r") str/split-lines) "hello ewieow\n world\r\ncarriage\rreturn")
ClassCastException java.lang.Character cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp #(apply str/split [% #"\r"]) str/split-lines) "hello ewieow\n world\r\ncarriage\rreturn")
ClassCastException java.lang.Character cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp #(apply clojure.string/split [% #"\r"]) str/split-lines) "hello ewieow\n world\r\ncarriage\rreturn")
ClassCastException java.lang.Character cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (juxt #(apply clojure.string/split [% #"\r"]) str/split-lines) ["hello ewieow\n world\r\ncarriage\rreturn"])
=> ([["hello ewieow\nworld" "\ncarriage" "return"] ["hello ewieow" " world" "carriage\rreturn"]])
(map (comp #(apply clojure.string/split [% #"\r"]) str/split-lines) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp #(apply clojure.string/split [% #"\r"]) #(apply str/split-lines [%])) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp #(apply clojure.string/split [% #"\r"])) ["hello ewieow\n world\r\ncarriage\rreturn"])
=> (["hello ewieow\nworld" "\ncarriage" "return"])
(map (comp #(apply clojure.string/split [% #"\r"]) clojure.string/split-lines) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp #(apply clojure.string/split [% #"\r"]) #(apply clojure.string/split-lines [%])) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (juxt #(apply clojure.string/split [% #"\r"]) #(apply clojure.string/split-lines [%])) ["hello ewieow\n world\r\ncarriage\rreturn"])
=> ([["hello ewieow\nworld" "\ncarriage" "return"] ["hello ewieow" " world" "carriage\rreturn"]])
(map (comp count str)["hello ewieow\n world\r\ncarriage\rreturn"])
=> (36)
(map (comp str/split-lines) ["hello ewieow\n world\r\ncarriage\rreturn"])
=> (["hello ewieow" " world" "carriage\rreturn"])
(map (comp str/split-lines #(str/split % ["\r"])) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.util.regex.Pattern  clojure.string/split (string.clj:219)
(map (comp str/split-lines #(str/split % "\r")) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException java.lang.String cannot be cast to java.util.regex.Pattern  clojure.string/split (string.clj:219)
(map (comp str/split-lines #(str/split % #"\d+")) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(map (comp str/split-lines #(str/split % [#"\d+"])) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.util.regex.Pattern  clojure.string/split (string.clj:219)
(map (comp str/split-lines #(apply str/split [% #"\d+"])) ["hello ewieow\n world\r\ncarriage\rreturn"])
ClassCastException clojure.lang.PersistentVector cannot be cast to java.lang.CharSequence  clojure.string/split (string.clj:219)
(defn stripall [sentence substr] (map #(apply split [sentence %]) substr))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: split in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:40)
(defn stripall [sentence substr] (map #(apply clojure.string/split [sentence %]) substr))
=> #'succulent.core/stripall
(stripall "hello\nworld\r\nwindows\rmac" [#"\r\n" #\n #"\r"])
RuntimeException Reader tag must be a symbol  clojure.lang.LispReader$CtorReader.invoke (LispReader.java:1221)
=> #"\r"
RuntimeException Unmatched delimiter: ]  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn stripall [sentence substr] (map #(apply str/split [sentence %]) substr))
=> #'succulent.core/stripall
(stripall "hello\nworld\r\nwindows\rmac" [#"\r\n" #"\n" #"\r+"])
=> (["hello\nworld" "windows\rmac"] ["hello" "world\r" "windows\rmac"] ["hello\nworld" "\nwindows" "mac"])
(defn stripall [sentence substr] (map (comp #(apply str/split [sentence %])) substr))
=> #'succulent.core/stripall
(stripall "hello\nworld\r\nwindows\rmac" [#"\r\n" #"\n" #"\r+"])
=> (["hello\nworld" "windows\rmac"] ["hello" "world\r" "windows\rmac"] ["hello\nworld" "\nwindows" "mac"])
(put 5)
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Util.compare (Util.java:152)
(put "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
            :square {:props #{:width :height}}}}
(put "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "55", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
            :square {:props #{:width :height}}}}
(put "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "55", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
            :square {:props #{:width :height}}}}
(put "4")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "55", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "4", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
 :patterns {"quadrilateral" {:props #{:width :sides :height}, :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
            :square {:props #{:width :height}}}}
(put "=")
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
db
=>
#object[clojure.lang.Atom
        0x7143afb5
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "55", :children {}},
                                      1 {:idx :op, :state 2, :val "+", :children {}},
                                      2 {:idx :r2, :state 2, :val "4", :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
               :patterns {"quadrilateral" {:props #{:width :sides :height},
                                           :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
                          :square {:props #{:width :height}}}}}]
(put "=")
=> "Unsure what to do with ="
db
=>
#object[clojure.lang.Atom
        0x7143afb5
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:input]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x53ffb3f2 "succulent.core$make_root_component@53ffb3f2"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x16fd37e9 "succulent.core$make_nested_component@16fd37e9"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "55", :children {}},
                                      1 {:idx :op, :state 2, :val "+", :children {}},
                                      2 {:idx :r2, :state 2, :val "4", :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}},
               :patterns {"quadrilateral" {:props #{:width :sides :height},
                                           :constraints [#object[succulent.core$fn__5314 0x53000119 "succulent.core$fn__5314@53000119"]]},
                          :square {:props #{:width :height}}}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:17:1)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:79:3)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unmatched delimiter: ), compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:81:113)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: get-inref in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:240:39)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: get-inref in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:240:39)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 360, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1437:1)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 2 tests containing 2 assertions.
0 failures, 0 errors.
(put "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:registers]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:input]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "555", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "6")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:registers]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:input]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "5556", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:registers]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:input]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "5556", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:registers]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:input]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "5556", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "3", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                    1 {:idx :charcode, :state 0, :val 53, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "=")
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
db
=>
#object[clojure.lang.Atom
        0x40a7ce36
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:input]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x55b160e7 "succulent.core$make_root_component@55b160e7"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x687ca7b4 "succulent.core$make_nested_component@687ca7b4"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "5556", :children {}},
                                      1 {:idx :op, :state 2, :val "+", :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val "5", :children {}},
                                  1 {:idx :charcode, :state 0, :val 53, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :children {}},
                                  3 {:idx :destination, :state 0, :val [true :r1], :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(reset-db)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.IFn  clojure.core/swap! (core.clj:2253)
(reset-db)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.IFn  clojure.core/swap! (core.clj:2253)
Loading src/succulent/core.cljs... done
db
=>
#object[clojure.lang.Atom
        0x55c71a91
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:input]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 0, :val 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(put "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:registers]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:input]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 1, :val "3", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "+")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:registers]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:input]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "3", :children {}},
                        1 {:idx :op, :state 1, :val "+", :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "3")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:registers]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:input]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 2, :val "3", :children {}},
                        1 {:idx :op, :state 2, :val "+", :children {}},
                        2 {:idx :r2, :state 1, :val "3", :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(put "=")
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
db
=>
#object[clojure.lang.Atom
        0x55c71a91
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:input]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x34de0fff "succulent.core$make_root_component@34de0fff"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x5983b2c7 "succulent.core$make_nested_component@5983b2c7"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 2, :val "3", :children {}},
                                      1 {:idx :op, :state 2, :val "+", :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
(put "6")
=> "Unsure what to do with 6"
(active-register)
=> :r3
(green? :r1)
=> false
(green? :r3)
=> true
(defn refpath
  ([t]
   (if (contains? (into #{} (keys (get-in @db [:refs]))) t)
     (get-in @db [:refs t])
     :unknown))
  ([t param]
   (conj (refpath t) param)))
=> #'succulent.core/refpath
(refpath :r1 :val)
=> [:registers :children 0 :val]
(defn handle [k]
  (let [tag (inspect-tag e)
        curr (active-register)
        focus (goto curr)
        state (get focus :state)]
    (cond (= curr :r1) (cond (green? state)  (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (put k :r1)
                                                   :else db)
                             (yellow? state) (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (carry k :r1 :op)
                                                   (= tag :operator) (carry k :r1 :op)
                                                   :else db))
          (= curr :op) (cond (green? state)  (cond (= tag :operator) (put k :op)
                                                   (= tag :polymorphic) (put k :op)
                                                   :else db)
                             (yellow? state  (cond (= tag :number) (carry k :op :r2)
                                                   (= tag :polymorphic) (carry k :op :r2)
                                                   (= tag :operator) (replace k :op)
                                                   :else db))))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: e in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:2:13)
(defn handle [k]
  (let [tag (inspect-tag k)
        curr (active-register)
        focus (goto curr)
        state (get focus :state)]
    (cond (= curr :r1) (cond (green? state)  (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (put k :r1)
                                                   :else db)
                             (yellow? state) (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (carry k :r1 :op)
                                                   (= tag :operator) (carry k :r1 :op)
                                                   :else db))
          (= curr :op) (cond (green? state)  (cond (= tag :operator) (put k :op)
                                                   (= tag :polymorphic) (put k :op)
                                                   :else db)
                             (yellow? state  (cond (= tag :number) (carry k :op :r2)
                                                   (= tag :polymorphic) (carry k :op :r2)
                                                   (= tag :operator) (replace k :op)
                                                   :else db))))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: carry in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:10:73)
(defn lock [r]
  (let [current-state (ask r :state)]
    (if (yellow? r)
      (swap! db update-in (querytarget r :state) inc)
      "Can't lock: active register is empty!")))

(defn put [val reg]
  (if (green? reg)
    (swap! db assoc-in (refpath reg :val) (str val))
    (swap! db update-in (refpath reg :val) str val)))

(defn carry [val curr next]
  (do
    (lock curr)
    (handle val)))

(defn handle [k]
  (let [tag (inspect-tag k)
        curr (active-register)
        focus (goto curr)
        state (get focus :state)]
    (cond (= curr :r1) (cond (green? state)  (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (put k :r1)
                                                   :else db)
                             (yellow? state) (cond (= tag :number) (put k :r1)
                                                   (= tag :polymorphic) (carry k :r1 :op)
                                                   (= tag :operator) (carry k :r1 :op)
                                                   :else db))
          (= curr :op) (cond (green? state)  (cond (= tag :operator) (put k :op)
                                                   (= tag :polymorphic) (put k :op)
                                                   :else db)
                             (yellow? state  (cond (= tag :number) (carry k :op :r2)
                                                   (= tag :polymorphic) (carry k :op :r2)
                                                   (= tag :operator) (replace k :op)
                                                   :else db))))))
=> #'succulent.core/lock
=> #'succulent.core/put
=> #'succulent.core/carry
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:29:24)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:340:24)
Loading src/succulent/core.cljs... done
(handle "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:input]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(handle "9")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:input]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val "9", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(green? :r1)
=> true
(map #(= (refpath %1 :state) (+ (bool->int (string? (refpath %1 :val))) 0))  (keys (get-in @db [:refs])))
=> (false false false false false false false false false false false false false false false false false false false)
(map #(= (+ (bool->int (string? (refpath %1 :val))) 0))  (keys (get-in @db [:refs])))
=> (true true true true true true true true true true true true true true true true true true true)
(map #(+ (bool->int (string? (refpath %1 :val))) 0)  (keys (get-in @db [:refs])))
=> (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
(handle "5")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:registers]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:input]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :children {0 {:idx :r1, :state 0, :val "5", :children {}},
                        1 {:idx :op, :state 0, :val 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :children {}}}},
 :semaphores {:idx :semaphores, :state 0, :val 0, :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}
(map #(+ (bool->int (string? (refpath %1 :val))) 0)  (keys (get-in @db [:refs])))
=> (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
(map #(+ (bool->int (string? (refpath % :val))) 0)  (keys (get-in @db [:refs])))
=> (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
(keys (get-in @db [:refs])
RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(keys (get-in @db [:refs]))
=>
(:queue-val
 :registers
 :front-ptr
 :A
 :queue
 :data-caption
 :B
 :op
 :r2
 :charcode
 :r3
 :queue-state
 :r1
 :charstring
 :semaphores
 :input
 :atom2action
 :destination
 :rear-ptr)
(map (comp goto #(+ (bool->int (string? (refpath % :val))) 0)  (keys (get-in @db [:refs]))))
=> #object[clojure.core$map$fn__4781 0x3a8117c5 "clojure.core$map$fn__4781@3a8117c5"]
db
=>
#object[clojure.lang.Atom
        0x41e4b4fb
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:input]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x21211f3e "succulent.core$make_root_component@21211f3e"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x751c4694 "succulent.core$make_nested_component@751c4694"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :children {0 {:idx :r1, :state 0, :val "5", :children {}},
                                      1 {:idx :op, :state 0, :val 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :children {0 {:idx :A, :state 0, :val 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :children {}}}}}}]
({:foo "bar"} :foo)
=> "bar"
(some? 0)
=> true
(some? "")
=> true
(empty? "")
=> true
(defn sync [thread]
  (let [threadstate (goto thread)
        tempt? (pass? threadstate :t1)
        tlock? (pass? threadstate :t2)]
    (doseq [weight [1 2]]
      [val [tempt? tlock?]]
      (prn (* weight val)))))
WARNING: sync already refers to: #'clojure.core/sync in namespace: succulent.core, being replaced by: #'succulent.core/sync
CompilerException java.lang.RuntimeException: Unable to resolve symbol: pass? in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:3:16)
(defn pass? [component arg]
  (cond (= arg :t1) (and (string? (component :val))
                         (not (empty? (component :val))))
        (= arg :t2) (component :locked?)))

(defn syncstat [thread]
  (let [threadstate (goto thread)
        tempt? (pass? threadstate :t1)
        tlock? (pass? threadstate :t2)]
    (doseq [weight [1 2]]
      [val [tempt? tlock?]]
      (prn (* weight val)))))
=> #'succulent.core/pass?
=> #'succulent.core/syncstat
(syncstat :r1)
ClassCastException clojure.core$val cannot be cast to java.lang.Number  clojure.lang.Numbers.multiply (Numbers.java:148)
(doseq [weight [1 2]]
  [v [tempt? tlock?]]
  (prn (* weight v)))))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: v in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(doseq [weight [1 2]
  v [1 0]]
  (prn (* weight v)))
1
0
2
0
=> nil

(defn pass? [component arg]
  (cond (= arg :t1) (bool->int (and (string? (component :val))
                                    (not (empty? (component :val)))))
        (= arg :t2) (* 2 (bool->int (component :locked?)))))

(defn syncstat [thread]
  (let [threadstate (goto thread)]
    (+ (pass? threadstate :t1) (pass? threadstate :t2))))
=> #'succulent.core/pass?
=> #'succulent.core/syncstat
(syncstat :r1)
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 347, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1485:1)
Loading src/succulent/core.cljs... done
(syncstat :r1)
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
(pass? (goto :r1) :t1)
=> 0
(pass? (goto :r1) :t2)
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
db
=>
#object[clojure.lang.Atom
        0x12ae5626
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:input]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 0, :val 0, :locked? 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
(defn pass? [component arg]
  (cond (= arg :t1) (bool->int (and (string? (component :val))
                                    (not (empty? (component :val)))))
        (= arg :t2) (* 2 (component :locked?))))
=> #'succulent.core/pass?
(pass? (goto :r1) :t2)
=> 0
(defn syncstat [thread]
  (let [threadstate (goto thread)]
    (+ (pass? threadstate :t1) (pass? threadstate :t2))))
=> #'succulent.core/syncstat
(syncstat :r1)
=> 0
(syncstat :r2)
=> 0
(bit-flip false)
ArityException Wrong number of args (1) passed to: core/bit-flip  clojure.lang.AFn.throwArity (AFn.java:429)
(bit-not false)
IllegalArgumentException bit operation not supported for: class java.lang.Boolean  clojure.lang.Numbers.bitOpsCast (Numbers.java:1097)
(defn syncstat [thread]
  (let [threadstate (goto thread)
        preimageg (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        image (T preimage)]
    (swap! db assoc-in (refpath thread :state) image
RuntimeException EOF while reading, starting at line 6  clojure.lang.Util.runtimeException (Util.java:221)
(defn syncstat [thread]
  (let [threadstate (goto thread)
        preimageg (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        image (T preimage)]
    (swap! db assoc-in (refpath thread :state) image)))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: preimage in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:5:15)
(defn syncstat [thread]
  (let [threadstate (goto thread)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        image (T preimage)]
    (swap! db assoc-in (refpath thread :state) image)))

=> #'succulent.core/syncstat
(syncstat :r1)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:registers]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:input]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x44fb56c7 "succulent.core$make_root_component@44fb56c7"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x11cd454 "succulent.core$make_nested_component@11cd454"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :locked? 0,
             :children {0 {:idx :r1, :state 0, :val 0, :locked? 0, :children {}},
                        1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :locked? 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
(defn syncstat [thread]
  (let [threadstate (goto thread)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        image (T preimage)]
    (do
      (swap! db assoc-in (refpath thread :state) image)
      (str thread ": " image))))
=> #'succulent.core/syncstat
(syncstat :r1)
=> ":r1: 0"
(syncstat :r1)
=> ":r1: 0"
(defn syncstat [thread]
  (let [threadstate (goto thread)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        image (T preimage)]
    (do
      (swap! db assoc-in (refpath thread :state) image)
      [thread image])))
=> #'succulent.core/syncstat
(syncstat :r1)
=> [:r1 0]
(defn syncstat [thread]
  (let [threadstate (goto thread)
        prev (threadstate :state)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        v2 (T preimage)
        v1 (bool->int (= prev image))]
    (do
      (swap! db assoc-in (refpath thread :state) image)
      {:register thread :updated? v1 :image v2})))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: image in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:7:23)
(defn syncstat [thread]
  (let [threadstate (goto thread)
        prev (threadstate :state)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        current-state (T preimage)
        v1 (bool->int (= prev current-state))]
    (do
      (swap! db assoc-in (refpath thread :state) image)
      {:register thread :updated? v1 :state current-state})))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: image in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:9:7)
(defn syncstat [thread]
  (let [threadstate (goto thread)
        prev (threadstate :state)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        current-state (T preimage)
        v1 (bool->int (= prev current-state))]
    (do
      (swap! db assoc-in (refpath thread :state) current-state)
      {:register thread :updated? v1 :state current-state})))

=> #'succulent.core/syncstat
(syncstat :r1)
=> {:register :r1, :updated? 1, :state 0}
(bit-not 0)
=> -1
(defn syncstat [thread]
  (let [threadstate (goto thread)
        prev (threadstate :state)
        preimage (+ (pass? threadstate :t1) (pass? threadstate :t2))
        T [0 1 -1 2]
        current-state (T preimage)]
    (do
      (swap! db assoc-in (refpath thread :state) current-state)
      {:register thread :updated? (bit-flip (bool->int (= prev current-state)) 0) :state current-state})))
=> #'succulent.core/syncstat
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 0}
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 0, :state 1}
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1}
(handle "6")
=> {:register :r1, :updated? 0, :state 1}
(handle "+")
=> {:register :r1, :updated? 1, :state 1}
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: prev in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:370:8)
Loading src/succulent/core.cljs... done
(handle "4")
=> [{:register :r1, :updated? 1, :state 1} {:register :op, :updated? 0, :state 0}]
(handle "+")
=> [{:register :r1, :updated? 1, :state 1} {:register :op, :updated? 0, :state 1}]
db
=>
#object[clojure.lang.Atom
        0x188b9fa0
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:input]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 1, :val "4", :locked? 0, :children {}},
                                      1 {:idx :op, :state 1, :val "+", :locked? 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
(sendkey "4")
ArityException Wrong number of args (1) passed to: core/put  clojure.lang.AFn.throwArity (AFn.java:429)
(lock :r1)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:registers]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:input]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x38e6a380 "succulent.core$make_root_component@38e6a380"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x56623814 "succulent.core$make_nested_component@56623814"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :locked? 0,
             :children {0 {:idx :r1, :state 2, :val "4", :locked? 0, :children {}},
                        1 {:idx :op, :state 1, :val "+", :locked? 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :locked? 0,
         :children {0 {:idx :charstring, :state 0, :val "4", :locked? 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 52, :locked? 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val :number, :locked? 0, :children {}},
                    3 {:idx :destination, :state 0, :val [true :r1], :locked? 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
Loading src/succulent/core.cljs... done
(sendkey "4")
ArityException Wrong number of args (1) passed to: core/put  clojure.lang.AFn.throwArity (AFn.java:429)
(handle "+")
=> [{:register :r1, :updated? 0, :state 0} {:register :op, :updated? 0, :state 0}]
(handle "4")
=> [{:register :r1, :updated? 1, :state 1} {:register :op, :updated? 0, :state 0}]
(handle "5")
=> [{:register :r1, :updated? 0, :state 1} {:register :op, :updated? 0, :state 0}]
(handle "+")
StackOverflowError   clojure.lang.Numbers$LongOps.inc (Numbers.java:545)
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1}
(handle "9")
=> {:register :r1, :updated? 0, :state 1}
(handle "-")
StackOverflowError   clojure.lang.RT.boundedLength (RT.java:1749)
(active-register)
=> :r1
db
=>
#object[clojure.lang.Atom
        0x8a7c377
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x517e8d7c "succulent.core$make_root_component@517e8d7c"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x517e8d7c "succulent.core$make_root_component@517e8d7c"] [:input]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x517e8d7c "succulent.core$make_root_component@517e8d7c"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x4fd08de "succulent.core$make_nested_component@4fd08de"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 1, :val "59", :locked? 0, :children {}},
                                      1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                                      2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 1}
Loading src/succulent/core.cljs... done
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 0}
(handle "9")
=> {:register :r1, :updated? 1, :state 1}
(handle "3")
=> {:register :r1, :updated? 0, :state 1}
(handle "+")
StackOverflowError   clojure.lang.Util.dohasheq (Util.java:177)
(active-register)
=> :r1
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 1}
(goto :r1)
=> {:idx :r1, :state 1, :val "93", :locked? 0, :children {}, [:locked?] 1}
(lock :r1)
=> "Can't lock: active register is empty!"
(defn lock [r]
  (swap! db assoc-in (refpath r [:locked?]) 1))
=> #'succulent.core/lock
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 1}
(lock :r1)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:registers]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:input]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :locked? 0,
             :children {0 {:idx :r1, :state 1, :val "93", :locked? 0, :children {}, [:locked?] 1},
                        1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :locked? 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}

(defn lock [r]
  (swap! db assoc-in (refpath r :locked?) 1))
=> #'succulent.core/lock
(lock :r1)
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:registers]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:input]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3a608aad "succulent.core$make_root_component@3a608aad"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x5ac66938 "succulent.core$make_nested_component@5ac66938"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val 0,
             :locked? 0,
             :children {0 {:idx :r1, :state 1, :val "93", :locked? 1, :children {}, [:locked?] 1},
                        1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                        2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                        3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val 0,
         :locked? 0,
         :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                    1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                    3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
(syncstat :r1)
=> {:register :r1, :updated? 1, :state 2}
Loading src/succulent/core.cljs... done
(handle "3")
=> {:register :r1, :updated? 1, :state 1}
(handle "+")
=> {:register :op, :updated? 1, :state 1}
(handle "8")
=> nil
(put 3 :r3)
=> {:register :r3, :updated? 1, :state 1}
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 366, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1507:1)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:366:7)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:366:7)
Loading src/succulent/core.cljs... done
(handle "8")
=> {:register :r1, :updated? 1, :state 1, :val nil}
Loading src/succulent/core.cljs... done
(handle "8")
=> {:register :r1, :updated? 1, :state 1, :val "8"}
(handle "3")
=> {:register :r1, :updated? 0, :state 1, :val "83"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "2")
=> {:register :r2, :updated? 1, :state 1, :val "2"}
(handle "=")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
db
=>
#object[clojure.lang.Atom
        0x3916d069
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0xae65f08 "succulent.core$make_root_component@ae65f08"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0xae65f08 "succulent.core$make_root_component@ae65f08"] [:input]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0xae65f08 "succulent.core$make_root_component@ae65f08"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x684d9659 "succulent.core$make_nested_component@684d9659"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "83", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 1, :val "2", :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
(handle "+")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(atom2action "+")
=> #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"]
(apply (atom2acion "+") [2 3])
CompilerException java.lang.RuntimeException: Unable to resolve symbol: atom2acion in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:8)
(apply (atom2action "+") [2 3])
=> 5
(evaluate "+" "4" "3")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(number "4")
CompilerException java.lang.RuntimeException: Unable to resolve symbol: number in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(num "4")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.num (Numbers.java:1405)
(map read-string (re-seq #"[\d.]+" "120")
RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(map read-string (re-seq #"[\d.]+" "120"))
=> (120)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 357, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1521:1)
Loading src/succulent/core.cljs... done
(handle "2")
=> {:register :r1, :updated? 1, :state 1, :val "2"}
(handle "5")
=> {:register :r1, :updated? 0, :state 1, :val "25"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "9")
=> {:register :r2, :updated? 1, :state 1, :val "9"}
(handle "=")
ClassCastException clojure.lang.LazySeq cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(evaluate "+" "4" "5")
ClassCastException clojure.lang.LazySeq cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(defn evaluate [op arg1 arg2]
  (let [x (str->int arg1)
        y (str->int arg2)
        op (atom2action op)]
    (apply op [x y])))
=> #'succulent.core/evaluate
(evaluate "+" "4" "5")
ClassCastException clojure.lang.LazySeq cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(str->int "5")
=> (5)
(defn str->int [v]
  (if (string? v)
    (first (map read-string (re-seq #"[\d.]+" v)))
    (str "Not a string: " v)))
=> #'succulent.core/str->int
(str->int "5")
=> 5
(evaluate "+" "4" "5")
=> 9
Loading src/succulent/core.cljs... done
(handle "3")
=> {:register :r1, :updated? 1, :state 1, :val "3"}
(handle "5")
=> {:register :r1, :updated? 0, :state 1, :val "35"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "1")
=> {:register :r2, :updated? 1, :state 1, :val "1"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "36"}
db
=>
#object[clojure.lang.Atom
        0x29052d26
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3318e163 "succulent.core$make_root_component@3318e163"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3318e163 "succulent.core$make_root_component@3318e163"] [:input]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3318e163 "succulent.core$make_root_component@3318e163"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x78b8e89d "succulent.core$make_nested_component@78b8e89d"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "35", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 1, :val "1", :locked? 0, :children {}},
                                      3 {:idx :r3, :state 1, :val "36", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "3")
=> {:register :r2, :updated? 1, :state 1, :val "3"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "8"}
db
=>
#object[clojure.lang.Atom
        0x349c47c0
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x30d1f171 "succulent.core$make_root_component@30d1f171"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x30d1f171 "succulent.core$make_root_component@30d1f171"] [:input]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x30d1f171 "succulent.core$make_root_component@30d1f171"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x7a13a29b "succulent.core$make_nested_component@7a13a29b"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "5", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 1, :val "3", :locked? 1, :children {}},
                                      3 {:idx :r3, :state 1, :val "8", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "3")
=> {:register :r1, :updated? 1, :state 1, :val "3"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "3")
=> {:register :r2, :updated? 1, :state 1, :val "3"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "6"}
db
=>
#object[clojure.lang.Atom
        0x734166fa
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val 0,
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "3", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :locked? 1, :children {}},
                                      3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val 0,
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val 0,
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}}]
(resolve :r1)
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.Symbol  clojure.core/ns-resolve (core.clj:4239)
(goto :r1)
=> {:idx :r1, :state 2, :val "3", :locked? 1, :children {}}
(map (comp goto #(assoc-in % [:state] 0)) [:r1])
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(comp goto #(assoc-in % [:state] 0) [:r1])
=> #object[clojure.core$comp$fn__4727 0x359d77e7 "clojure.core$comp$fn__4727@359d77e7"]
((comp goto #(assoc-in % [:state] 0) [:r1]))
ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
((comp goto #(assoc-in % [:state] 0) [(goto :r1)]))
ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
(comp goto #(assoc-in % [:state] 0) [(goto :r1)])
=> #object[clojure.core$comp$fn__4727 0x121a8772 "clojure.core$comp$fn__4727@121a8772"]
(comp goto #(assoc % [:state] 0) [(goto :r1)])
=> #object[clojure.core$comp$fn__4727 0x6e0c578a "clojure.core$comp$fn__4727@6e0c578a"]
(comp goto #(assoc % [:state] 0) [:r1])
=> #object[clojure.core$comp$fn__4727 0x7fa2d195 "clojure.core$comp$fn__4727@7fa2d195"]
(comp goto [:r1])
=> #object[clojure.core$comp$fn__4727 0x6551cc01 "clojure.core$comp$fn__4727@6551cc01"]
(comp goto :r1)
=> #object[clojure.core$comp$fn__4727 0x4a31e97c "clojure.core$comp$fn__4727@4a31e97c"]
((comp goto [:r1]))
ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
((comp str + [8 8]))
ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
(comp str + [8 8])
=> #object[clojure.core$comp$fn__4727 0x30a4a876 "clojure.core$comp$fn__4727@30a4a876"]
(apply (comp str + [8 8]) [])
ArityException Wrong number of args (0) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
(map
  (comp - (partial + 3) (partial * 2))
  [1 2 3 4])
=> (-5 -7 -9 -11)
(apply (comp str +) [8 8]) [])
=> "16"
=> []
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
((comp str +) [8 8])
ClassCastException Cannot cast clojure.lang.PersistentVector to java.lang.Number  java.lang.Class.cast (Class.java:3369)
((comp str +) 8 8)
=> "16"
((comp goto #(assoc-in % [:state] 0)) :r1 :r2)
ArityException Wrong number of args (2) passed to: core/eval10719/fn--10720  clojure.lang.AFn.throwArity (AFn.java:429)
((comp goto) :r1 :r2)
ArityException Wrong number of args (2) passed to: core/goto  clojure.lang.AFn.throwArity (AFn.java:429)
(map (comp goto) :r1 :r2)
IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Keyword  clojure.lang.RT.seqFrom (RT.java:542)
(map (comp goto) [:r1 :r2])
=> ({:idx :r1, :state 2, :val "3", :locked? 1, :children {}} {:idx :r2, :state 2, :val "3", :locked? 1, :children {}})
(map (comp goto #(assoc-in % [:val 0])) [:r1 :r2])
ArityException Wrong number of args (2) passed to: core/assoc-in  clojure.lang.AFn.throwArity (AFn.java:429)
(map (comp goto #(assoc-in % [:val] 0)) [:r1 :r2])
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(map (comp goto #(assoc % :val 0)) [:r1 :r2])
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(map (comp goto #(% :val 0)) [:r1 :r2])
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(map (comp #(swap! db assoc-in (refpath % :state) 0)) [:r1 :r2]))
=>
({:refs {:queue-val [:queue :val],
         :registers [:registers],
         :front-ptr [:queue :front-ptr],
         :A [:semaphores :children 0],
         :queue [:queue],
         :data-caption [:input :children 2],
         :B [:semaphores :children 1],
         :op [:registers :children 1],
         :r2 [:registers :children 2],
         :charcode [:input :children 1],
         :r3 [:registers :children 3],
         :queue-state [:queue :state],
         :r1 [:registers :children 0],
         :charstring [:input :children 0],
         :semaphores [:semaphores],
         :input [:input],
         :atom2action [:atom2action],
         :destination [:input :children 3],
         :rear-ptr [:queue :rear-ptr]},
  :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
  :patterns {"component" #{:children :val :state :locked? :idx}},
  :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
          :front-ptr 15,
          :rear-ptr 15,
          :state 0,
          :children []},
  :registers {:idx :registers,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :r1, :state 0, :val "3", :locked? 1, :children {}},
                         1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                         2 {:idx :r2, :state 2, :val "3", :locked? 1, :children {}},
                         3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
  :input {:idx :input,
          :state 0,
          :val 0,
          :locked? 0,
          :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                     1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                     2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                     3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
  :semaphores {:idx :semaphores,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
 {:refs {:queue-val [:queue :val],
         :registers [:registers],
         :front-ptr [:queue :front-ptr],
         :A [:semaphores :children 0],
         :queue [:queue],
         :data-caption [:input :children 2],
         :B [:semaphores :children 1],
         :op [:registers :children 1],
         :r2 [:registers :children 2],
         :charcode [:input :children 1],
         :r3 [:registers :children 3],
         :queue-state [:queue :state],
         :r1 [:registers :children 0],
         :charstring [:input :children 0],
         :semaphores [:semaphores],
         :input [:input],
         :atom2action [:atom2action],
         :destination [:input :children 3],
         :rear-ptr [:queue :rear-ptr]},
  :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
  :patterns {"component" #{:children :val :state :locked? :idx}},
  :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
          :front-ptr 15,
          :rear-ptr 15,
          :state 0,
          :children []},
  :registers {:idx :registers,
              :state 0,
              :val 0,
              :locked? 0,
              :children {0 {:idx :r1, :state 0, :val "3", :locked? 1, :children {}},
                         1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                         2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                         3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
  :input {:idx :input,
          :state 0,
          :val 0,
          :locked? 0,
          :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                     1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                     2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                     3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
  :semaphores {:idx :semaphores,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}})
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(map (comp #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "")) [:r1 :op :r2 :r3])
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(map (juxt #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "")) [:r1 :op :r2 :r3])
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "+", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "3", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 1, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "6", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
(map (juxt #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "") #(swap! db assoc-in (refpath % :locked?) 0))  [:r1 :op :r2 :r3])
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 1, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 1, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 1, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]
 [{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:input]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x5746b805 "succulent.core$make_root_component@5746b805"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x5c97f01 "succulent.core$make_nested_component@5c97f01"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 330, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1528:1)
(juxt #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "") #(swap! db assoc-in (refpath % :locked?) 0)  [:r1])
=> #object[clojure.core$juxt$fn__4746 0x76d04b76 "clojure.core$juxt$fn__4746@76d04b76"]
(comp #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "") #(swap! db assoc-in (refpath % :locked?) 0))  :r1)
=> #object[clojure.core$comp$fn__4727 0x63a981e6 "clojure.core$comp$fn__4727@63a981e6"]
=> :r1
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(defn clear
  ([] (map clear [:r1 :op :r2 :r3]))
  ([targ] (map juxt #(swap! db assoc-in (refpath % :state) 0) #(swap! db assoc-in (refpath % :val) "") #(swap! db assoc-in (refpath % :locked?) 0))  [targ]))
=> #'succulent.core/clear
(clear)
=> ([:r1] [:op] [:r2] [:r3])
Loading src/succulent/core.cljs... done
(clear)
=>
(([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val 0, :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:input]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x53fda3d9 "succulent.core$make_root_component@53fda3d9"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x1eb39c0a "succulent.core$make_nested_component@1eb39c0a"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val 0,
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val 0,
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}]))
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: target in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:334:12)
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(clear :r1)
ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  clojure.core/apply (core.clj:641)
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(clear :r1)
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 1, :val "5", :locked? 0, :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "5", :locked? 0, :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(clear :r1)
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1,
                             :state 1,
                             :val "5",
                             :locked? 0,
                             :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"],
                                        1 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1,
                             :state 0,
                             :val "5",
                             :locked? 0,
                             :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"],
                                        1 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1,
                             :state 0,
                             :val "",
                             :locked? 0,
                             :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"],
                                        1 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:input]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x1a4f95ed "succulent.core$make_root_component@1a4f95ed"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x7e261181 "succulent.core$make_nested_component@7e261181"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1,
                             :state 0,
                             :val "",
                             :locked? 0,
                             :children {0 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"],
                                        1 #object[clojure.core$val 0x6dfa7f5b "clojure.core$val@6dfa7f5b"]}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "9")
=> {:register :r1, :updated? 0, :state 1, :val "59"}
(clear :r1)
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:registers]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:input]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 1, :val "59", :locked? 0, :children {0 "59"}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:registers]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:input]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "59", :locked? 0, :children {0 "59"}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:registers]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:input]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "59"}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:registers]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:input]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x33a16dd "succulent.core$make_root_component@33a16dd"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0xef5cf19 "succulent.core$make_nested_component@ef5cf19"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val 0,
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "59"}},
                          1 {:idx :op, :state 0, :val 0, :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val 0, :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val 0, :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val 0,
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val 0, :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val 0, :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val 0, :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val 0, :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val 0,
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val 0, :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val 0, :locked? 0, :children {}}}}}])
Loading src/succulent/core.cljs... done
(handle "9")
=> {:register :r1, :updated? 1, :state 1, :val "9"}
(clear :r1)
=>
([{:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val "",
               :locked? 0,
               :children {0 {:idx :r1, :state 1, :val "9", :locked? 0, :children {0 "9"}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val "",
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val "",
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "9", :locked? 0, :children {0 "9"}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val "",
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val "",
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9"}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val "",
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
  {:refs {:queue-val [:queue :val],
          :registers [:registers],
          :front-ptr [:queue :front-ptr],
          :A [:semaphores :children 0],
          :queue [:queue],
          :data-caption [:input :children 2],
          :B [:semaphores :children 1],
          :op [:registers :children 1],
          :r2 [:registers :children 2],
          :charcode [:input :children 1],
          :r3 [:registers :children 3],
          :queue-state [:queue :state],
          :r1 [:registers :children 0],
          :charstring [:input :children 0],
          :semaphores [:semaphores],
          :input [:input],
          :atom2action [:atom2action],
          :destination [:input :children 3],
          :rear-ptr [:queue :rear-ptr]},
   :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                 "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
   :patterns {"component" #{:children :val :state :locked? :idx}},
   :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                 [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                 [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                 [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
           :front-ptr 15,
           :rear-ptr 15,
           :state 0,
           :children []},
   :registers {:idx :registers,
               :state 0,
               :val "",
               :locked? 0,
               :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9"}},
                          1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                          2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                          3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
   :input {:idx :input,
           :state 0,
           :val "",
           :locked? 0,
           :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                      1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                      2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                      3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
   :semaphores {:idx :semaphores,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
(handle "2")
=> {:register :r1, :updated? 1, :state 1, :val "2"}
(clear)
=>
(([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 1, :val "2", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "2", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2"}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}]))
(defn clear
  ([] (map clear [:r1 :op :r2 :r3]))
  ([targ]
   (let [exiting-value (goto targ)
         v (get-in exiting-value [:val])
         i (kidsum targ)]
     (map (juxt
            #(swap! db update-in (refpath % :children) merge {i v})
            #(swap! db assoc-in (refpath % :state) 0)
            #(swap! db assoc-in (refpath % :val) "")
            #(swap! db assoc-in (refpath % :locked?) 0))  [targ]))))
=> #'succulent.core/clear
(clear)
=>
(([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}])
 ([{:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}
   {:refs {:queue-val [:queue :val],
           :registers [:registers],
           :front-ptr [:queue :front-ptr],
           :A [:semaphores :children 0],
           :queue [:queue],
           :data-caption [:input :children 2],
           :B [:semaphores :children 1],
           :op [:registers :children 1],
           :r2 [:registers :children 2],
           :charcode [:input :children 1],
           :r3 [:registers :children 3],
           :queue-state [:queue :state],
           :r1 [:registers :children 0],
           :charstring [:input :children 0],
           :semaphores [:semaphores],
           :input [:input],
           :atom2action [:atom2action],
           :destination [:input :children 3],
           :rear-ptr [:queue :rear-ptr]},
    :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                  "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
    :patterns {"component" #{:children :val :state :locked? :idx}},
    :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:registers]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r1]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :op]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r2]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:registers :r3]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:input]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charstring]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :charcode]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :data-caption]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:input :destination]]
                  [#object[succulent.core$make_root_component 0x60e34fd1 "succulent.core$make_root_component@60e34fd1"] [:semaphores]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :A]]
                  [#object[succulent.core$make_nested_component 0x9405d6c "succulent.core$make_nested_component@9405d6c"] [:semaphores :B]]
                  [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
            :front-ptr 15,
            :rear-ptr 15,
            :state 0,
            :children []},
    :registers {:idx :registers,
                :state 0,
                :val "",
                :locked? 0,
                :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :children {0 "9", 1 "2", 2 ""}},
                           1 {:idx :op, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           2 {:idx :r2, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}},
                           3 {:idx :r3, :state 0, :val "", :locked? 0, :children {0 "", 1 ""}}}},
    :input {:idx :input,
            :state 0,
            :val "",
            :locked? 0,
            :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                       1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                       2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                       3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
    :semaphores {:idx :semaphores,
                 :state 0,
                 :val "",
                 :locked? 0,
                 :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}]))
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "9")
=> {:register :r1, :updated? 0, :state 1, :val "59"}
(handle "0")
=> {:register :r1, :updated? 0, :state 1, :val "590"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=> {:register :r2, :updated? 1, :state 1, :val "-"}
(handle "9")
=>
#object[clojure.lang.Atom
        0x52999e8d
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x4d637a63 "succulent.core$make_root_component@4d637a63"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x4d637a63 "succulent.core$make_root_component@4d637a63"] [:input]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x4d637a63 "succulent.core$make_root_component@4d637a63"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x1337c902 "succulent.core$make_nested_component@1337c902"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "590", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 1, :val "-", :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "5")
ArityException Wrong number of args (2) passed to: core/pass?  clojure.lang.AFn.throwArity (AFn.java:429)
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 0, :state 0, :val "5"}
(handle "9")
=> {:register :r1, :updated? 0, :state 0, :val "9"}
(pass? (goto :r1) :t1 false)
=> 0
(pass? (goto :r1) :t1 true)
=> 0
(goto :r1)
=> {:idx :r1, :state 0, :val "9", :locked? 0, :children {}}
(str->int (component :val))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: component in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:11)
(str->int ((goto :r1) :val))
=> 9
(syncstat "5")
NullPointerException   succulent.core$syncstat.invokeStatic (core.cljs:321)
(syncstat :r1)
=> {:register :r1, :updated? 0, :state 0, :val "9"}
(syncstat "1")
NullPointerException   succulent.core$syncstat.invokeStatic (core.cljs:321)
(handle "9")
=> {:register :r1, :updated? 0, :state 0, :val "9"}
(count "9")
=> 1
Loading src/succulent/core.cljs... done
(handle "9")
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
Loading src/succulent/core.cljs... done
(handle "9")
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
Loading src/succulent/core.cljs... done
(handle "9")
NullPointerException   clojure.lang.Numbers.ops (Numbers.java:1013)
(pass? (goto :r1) :t1 false)
=> nil
(defn pass? [component arg op-reg?]
  (cond (= arg :t1) (bool->int (count (get-in component [:val])) 0)
        (= arg :t2) (bool->int (executable? (component :val)))
        (= arg :t3) (bool->int (number? (str->int (get-in component [:val]))))
        (= arg :t4) (* 2 (component :locked?))
        :else "?"))
=> #'succulent.core/pass?
(pass? (goto :r1) :t1 false)
ArityException Wrong number of args (2) passed to: core/bool->int  clojure.lang.AFn.throwArity (AFn.java:429)
Loading src/succulent/core.cljs... done
(pass? (goto :r1) :t1 false)
=> 0
(handle "9")
=> {:register :r1, :updated? 1, :state 1, :val "9"}
(pass? (goto :r1) :t1 false)
=> 1
(pass? (goto :r1) :t3 false)
=> 1
(handle "+")
StackOverflowError   clojure.lang.Util.dohasheq (Util.java:177)
(executable? "+")
=> true
Loading src/succulent/core.cljs... done
(handle "-")
=> {:register :r1, :updated? 1, :state 1, :val "-"}
(pass? (goto :r1) :t3 false)
=> 0
(pass? (goto :r1) :t2 false)
=> 0
Loading src/succulent/core.cljs... done
(handle "-")
=> {:register :r1, :updated? 1, :state 1, :val "-"}
(handle "3")
=> {:register :r1, :updated? 0, :state 1, :val "-3"}
(defn pass?
  ([component arg]   (cond (= arg :t1) (bool->int (> (count (get-in component [:val])) 0))
                           (= arg :t2) (bool->int (executable? (component :val)))
                           (= arg :t3) (bool->int (number? (str->int (get-in component [:val]))))
                           (= arg :t4) (* 2 (component :locked?))
                           :else "?"))
  ([component arg op-reg?] (if (= arg :t1)
                             (if op-reg? (and (pass? component :t1)
                                              (pass? component :t2))
                                         (and (pass? component :t1)
                                              (pass? component :t3)))
                             (pass component arg))))

CompilerException java.lang.RuntimeException: Unable to resolve symbol: pass in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:12:30)
(defn pass?
  ([component arg]   (cond (= arg :t1) (bool->int (> (count (get-in component [:val])) 0))
                           (= arg :t2) (bool->int (executable? (component :val)))
                           (= arg :t3) (bool->int (number? (str->int (get-in component [:val]))))
                           (= arg :t4) (* 2 (component :locked?))
                           :else "?"))
  ([component arg op-reg?] (if (= arg :t1)
                             (if op-reg? (and (pass? component :t1)
                                              (pass? component :t2))
                                         (and (pass? component :t1)
                                              (pass? component :t3)))
                             (pass? component arg))))
=> #'succulent.core/pass?
(handle "3")
=> {:register :r1, :updated? 0, :state 1, :val "-33"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=> {:register :r2, :updated? 0, :state 0, :val "-"}
(handle "1")
=> {:register :r2, :updated? 1, :state 1, :val "1"}
(handle "+")
=> {:register :r1, :updated? 0, :state 2, :val "-3334"}
db
=>
#object[clojure.lang.Atom
        0x40d91a2b
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x5db8c54 "succulent.core$make_root_component@5db8c54"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x5db8c54 "succulent.core$make_root_component@5db8c54"] [:input]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x5db8c54 "succulent.core$make_root_component@5db8c54"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x44319e1d "succulent.core$make_nested_component@44319e1d"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "-3334", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 2, :val "1", :locked? 1, :children {}},
                                      3 {:idx :r3, :state 1, :val "34", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "1")
=> {:register :r1, :updated? 1, :state 1, :val "1"}
db
=>
#object[clojure.lang.Atom
        0x36589e15
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:input]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :children {0 {:idx :r1, :state 1, :val "1", :locked? 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}}]
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=> {:register :r2, :updated? 0, :state 0, :val "-"}
(handle "1")
=> {:register :r2, :updated? 1, :state 1, :val "1"}
db
=>
#object[clojure.lang.Atom
        0x36589e15
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:input]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3a672b75 "succulent.core$make_root_component@3a672b75"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x24d481d0 "succulent.core$make_nested_component@24d481d0"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :children {0 {:idx :r1, :state 2, :val "1", :locked? 1, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :children {}},
                                      2 {:idx :r2, :state 1, :val "1", :locked? 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :children {}}, 1 {:idx :B, :state 0, :val "", :locked? 0, :children {}}}}}}]
(bit-flip 99 0)
=> 98
(bit-flip 99 32)
=> 4294967395
(bit-flip 99 16)
=> 65635
(bit-not 99)
=> -100
(bit-not 1)
=> -2
(bit-flip 1 -1)
=> -9223372036854775807
(bit-flip 1 64)
=> 0
(bit-flip 1 63)
=> -9223372036854775807
(bit-flip 5 64)
=> 4
(bit-flip 5 1)
=> 7
(bit-flip 5 0)
=> 4
(bit-flip 5 -1)
=> -9223372036854775803
(bit-flip 5 -2)
=> 4611686018427387909
(bit-not 1)
=> -2
(bit-not 0)
=> -1
(bit-flip 1 0)
=> 0
(bit-flip 0 0)
=> 1
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
(handle "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x1d166d82 "succulent.core$make_root_component@1d166d82"] [:registers]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x1d166d82 "succulent.core$make_root_component@1d166d82"] [:input]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x1d166d82 "succulent.core$make_root_component@1d166d82"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x3c46a720 "succulent.core$make_nested_component@3c46a720"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val "",
             :locked? 0,
             :sign-bit 0,
             :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 1, :children {}},
                        1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                        2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                        3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val "",
         :locked? 0,
         :sign-bit 0,
         :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val "",
              :locked? 0,
              :sign-bit 0,
              :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                         1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}
(handle "1")
=> {:register :r1, :updated? 1, :state 1, :val "1"}
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: active-target in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:375:10)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: else in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:378:5)
Loading src/succulent/core.cljs... done
(handle "1")
=> {:register :r1, :updated? 1, :state 1, :val "1"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:registers]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:input]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val "",
             :locked? 0,
             :sign-bit 0,
             :children {0 {:idx :r1, :state 2, :val "1", :locked? 1, :sign-bit 0, :children {}},
                        1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                        2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 1, :children {}},
                        3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val "",
         :locked? 0,
         :sign-bit 0,
         :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val "",
              :locked? 0,
              :sign-bit 0,
              :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                         1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}
(handle "4")
=> {:register :r2, :updated? 1, :state 1, :val "4"}
db
=>
#object[clojure.lang.Atom
        0x44510608
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:input]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x507562f6 "succulent.core$make_root_component@507562f6"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x689842ef "succulent.core$make_nested_component@689842ef"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "1", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 1, :val "4", :locked? 0, :sign-bit 1, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(bit-not 0)
=> -1
(bit-not -1)
=> 0
(bit-not 1)
=> -2
(bit-shift-right 0)
CompilerException clojure.lang.ArityException: Wrong number of args (1) passed to: core/bit-shift-right--inliner--4597, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:1)
(bit-shift-right 0 1)
=> 0
(bit-shift-right 0 2)
=> 0
Loading src/succulent/core.cljs... done
(handle "4")
=> {:register :r1, :updated? 1, :state 1, :val "4"}
(handle "8")
=> {:register :r1, :updated? 0, :state 1, :val "48"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:registers]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:input]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val "",
             :locked? 0,
             :sign-bit 0,
             :children {0 {:idx :r1, :state 2, :val "48", :locked? 1, :sign-bit 0, :children {}},
                        1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                        2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 1, :children {}},
                        3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val "",
         :locked? 0,
         :sign-bit 0,
         :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val "",
              :locked? 0,
              :sign-bit 0,
              :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                         1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}
(handle "6")
=> {:register :r2, :updated? 1, :state 1, :val "6"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "-6"}
db
=>
#object[clojure.lang.Atom
        0x4fdab298
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:input]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3aa20dc2 "succulent.core$make_root_component@3aa20dc2"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x73d19bda "succulent.core$make_nested_component@73d19bda"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "48", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "6", :locked? 1, :sign-bit 1, :children {}},
                                      3 {:idx :r3, :state 1, :val "-6", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "6")
=> {:register :r1, :updated? 1, :state 1, :val "6"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:registers]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:input]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val "",
             :locked? 0,
             :sign-bit 0,
             :children {0 {:idx :r1, :state 2, :val "6", :locked? 1, :sign-bit 0, :children {}},
                        1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                        2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 1, :children {}},
                        3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val "",
         :locked? 0,
         :sign-bit 0,
         :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val "",
              :locked? 0,
              :sign-bit 0,
              :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                         1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}
(handle "2")
=> {:register :r2, :updated? 1, :state 1, :val "2"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "-2"}
db
=>
#object[clojure.lang.Atom
        0x66f25c3f
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:input]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3e3ae286 "succulent.core$make_root_component@3e3ae286"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x67757138 "succulent.core$make_nested_component@67757138"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "6", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 1, :val "2", :locked? 0, :sign-bit 1, :children {}},
                                      3 {:idx :r3, :state 1, :val "-2", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(sign :r1)
=> 0
(sign :r2)
=> -1
Loading src/succulent/core.cljs... done
(handle "6")
=> {:register :r1, :updated? 1, :state 1, :val "6"}
(handle "2")
=> {:register :r1, :updated? 0, :state 1, :val "62"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "-")
=>
{:refs {:queue-val [:queue :val],
        :registers [:registers],
        :front-ptr [:queue :front-ptr],
        :A [:semaphores :children 0],
        :queue [:queue],
        :data-caption [:input :children 2],
        :B [:semaphores :children 1],
        :op [:registers :children 1],
        :r2 [:registers :children 2],
        :charcode [:input :children 1],
        :r3 [:registers :children 3],
        :queue-state [:queue :state],
        :r1 [:registers :children 0],
        :charstring [:input :children 0],
        :semaphores [:semaphores],
        :input [:input],
        :atom2action [:atom2action],
        :destination [:input :children 3],
        :rear-ptr [:queue :rear-ptr]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x1d608d9d "succulent.core$make_root_component@1d608d9d"] [:registers]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x1d608d9d "succulent.core$make_root_component@1d608d9d"] [:input]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x1d608d9d "succulent.core$make_root_component@1d608d9d"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x57f49151 "succulent.core$make_nested_component@57f49151"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 15,
         :rear-ptr 15,
         :state 0,
         :children []},
 :registers {:idx :registers,
             :state 0,
             :val "",
             :locked? 0,
             :sign-bit 0,
             :children {0 {:idx :r1, :state 2, :val "62", :locked? 1, :sign-bit 0, :children {}},
                        1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                        2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 1, :children {}},
                        3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :input {:idx :input,
         :state 0,
         :val "",
         :locked? 0,
         :sign-bit 0,
         :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                    3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
 :semaphores {:idx :semaphores,
              :state 0,
              :val "",
              :locked? 0,
              :sign-bit 0,
              :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                         1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}
(handle "2")
=> {:register :r2, :updated? 1, :state 1, :val "2"}
(handle "=")
=> {:register :r3, :updated? 1, :state 1, :val "-2"}
(evaluate (ask :op :val) (ask :r1 :val) (ask :r2 :val))
=> -2
(ask :r1 val)
=> nil
(ask :r2 val)
=> nil
(ask :r2 :val)
=> "2"
(ask :r1 :val)
=> "62"
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: let requires a vector for its binding in succulent.core:373, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:373:3)
Loading src/succulent/core.cljs... done
(ask :r1 :val)
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.multiply (Numbers.java:148)
Loading src/succulent/core.cljs... done
(ask :r1 :val)
=> "0"
(handle "-")
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(handle "3")
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
db
=>
#object[clojure.lang.Atom
        0x76e5391c
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x5188b43a "succulent.core$make_root_component@5188b43a"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x5188b43a "succulent.core$make_root_component@5188b43a"] [:input]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x5188b43a "succulent.core$make_root_component@5188b43a"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x543d8679 "succulent.core$make_nested_component@543d8679"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(ask :r1 :val)
=> "0"
Loading src/succulent/core.cljs... done
(handle "3")
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(put "3" :r1)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(green? :r1)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(get-color :r1)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(ask :r1 :state)
IllegalArgumentException Don't know how to create ISeq from: java.lang.Long  clojure.lang.RT.seqFrom (RT.java:542)
(ask :r1 :val)
=> ""
Loading src/succulent/core.cljs... done
(put "3" :r1)
=> {:register :r1, :updated? 1, :state 1, :val "3"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "6")
=> {:register :r2, :updated? 1, :state 1, :val "6"}
(handle "=")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
db
=>
#object[clojure.lang.Atom
        0x18ca5c7b
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:input]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "3", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "6", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(handle "+")
=> nil
db
=>
#object[clojure.lang.Atom
        0x18ca5c7b
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:input]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x6e470aa0 "succulent.core$make_root_component@6e470aa0"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x422590ef "succulent.core$make_nested_component@422590ef"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "3", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "6", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(active-register)
=> :r3
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unmatched delimiter: ], compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:376:40)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:394:7)
(copy :r1 :r2)
IllegalArgumentException Don't know how to create ISeq from: clojure.lang.Keyword  clojure.lang.RT.seqFrom (RT.java:542)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: selected in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:370:7)
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 384, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1543:1)
Loading src/succulent/core.cljs...
CompilerException java.lang.IllegalArgumentException: cond requires an even number of forms, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:393:7)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (AFn.java:429)
Uncaught exception, not in assertion.
expected: nil
  actual: clojure.lang.ArityException: Wrong number of args (1) passed to: core/put
 at clojure.lang.AFn.throwArity (AFn.java:429)
    clojure.lang.AFn.invoke (AFn.java:32)
    succulent.core$sendkey.invokeStatic (core.cljs:310)
    succulent.core$sendkey.invoke (core.cljs:304)
    succulent.core$fn__17820.invokeStatic (core.cljs:482)
    succulent.core/fn (core.cljs:479)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval17847$fn__17880.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval17847.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval17847.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number) (AFn.java:429)
Uncaught exception, not in assertion.
expected: nil
  actual: clojure.lang.ArityException: Wrong number of args (1) passed to: core/put
 at clojure.lang.AFn.throwArity (AFn.java:429)
    clojure.lang.AFn.invoke (AFn.java:32)
    succulent.core$sendkey.invokeStatic (core.cljs:310)
    succulent.core$sendkey.invoke (core.cljs:304)
    succulent.core$fn__17813.invokeStatic (core.cljs:476)
    succulent.core/fn (core.cljs:474)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval17847$fn__17880.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval17847.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval17847.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 2 tests containing 2 assertions.
0 failures, 2 errors.
(sendkey "5")
ArityException Wrong number of args (1) passed to: core/put  clojure.lang.AFn.throwArity (AFn.java:429)
Loading src/succulent/core.cljs... done
(sendkey "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 2 tests containing 2 assertions.
0 failures, 0 errors.
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 2 tests containing 2 assertions.
1 failures, 0 errors.
(run-all-tests)

Testing clojure.set

Testing clojure.tools.nrepl.ack

Testing clojure.stacktrace

Testing clojure.string

Testing clojure.java.browse

Testing clojure.tools.nrepl.middleware.load-file

Testing clojure.uuid

Testing complete.core

Testing cursive.repl.runtime

Testing succulent.core

FAIL in (input-number2) (core.cljs:483)
expected: (= (ask (active-register) :val) :this-will-fail)
  actual: (not (= "555" :this-will-fail))

Testing clojure.main

Testing clojure.tools.nrepl.middleware.session

Testing user

Testing clojure.test

Testing clojure.java.javadoc

Testing clojure.tools.nrepl

Testing clojure.repl

Testing clojure.tools.nrepl.bencode

Testing clojure.tools.nrepl.server

Testing clojure.edn

Testing clojure.core.server

Testing cursive.riddley

Testing clojure.java.io

Testing clojure.tools.nrepl.middleware

Testing clojure.template

Testing clojure.java.shell

Testing clojure.core.protocols

Testing clojure.tools.nrepl.transport

Testing clojure.tools.nrepl.middleware.interruptible-eval

Testing clojure.pprint

Testing clojure.reflect

Testing clojure.core

Testing clojure.tools.nrepl.misc

Testing clojure.tools.nrepl.middleware.pr-values

Testing clojure.walk

Testing cursive.riddley.compiler

Testing clojure.instant

Ran 2 tests containing 2 assertions.
1 failures, 0 errors.
=> {:test 2, :pass 1, :fail 1, :error 0, :type :summary}
(run-tests)

Testing succulent.core

FAIL in (input-number2) (core.cljs:483)
expected: (= (ask (active-register) :val) :this-will-fail)
  actual: (not (= "55555" :this-will-fail))

Ran 2 tests containing 2 assertions.
1 failures, 0 errors.
=> {:test 2, :pass 1, :fail 1, :error 0, :type :summary}
db
=>
#object[clojure.lang.Atom
        0x4b12101d
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0xc898ac8 "succulent.core$make_root_component@c898ac8"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0xc898ac8 "succulent.core$make_root_component@c898ac8"] [:input]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0xc898ac8 "succulent.core$make_root_component@c898ac8"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x4376d3e1 "succulent.core$make_nested_component@4376d3e1"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 1, :val "555555", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "5", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 53, :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val [true :r1], :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.IFn  clojure.core/swap! (core.clj:2253)
(defn reset-db! []
  (reset! db (atom {:refs {:queue [:queue]
                           :front-ptr [:queue :front-ptr]
                           :rear-ptr [:queue :rear-ptr]
                           :queue-val [:queue :val]
                           :queue-state [:queue :state]
                           :atom2action [:atom2action]}
                    :atom2action
                          {"+" +
                           "/" /}
                    :patterns
                          {"component" #{:val :state :children :idx :locked? :sign-bit}}
                    :queue {:val [[str ["Empty!"]] [str ["Empty!"]]]
                            :front-ptr 0
                            :rear-ptr 1
                            :state 0
                            :children []}})))
=> #'succulent.core/reset-db!
(reset-db!)
=>
#object[clojure.lang.Atom
        0x145f4296
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs... done
db
=>
#object[clojure.lang.Atom
        0x1d591c82
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x709e14e0 "succulent.core$make_root_component@709e14e0"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x709e14e0 "succulent.core$make_root_component@709e14e0"] [:input]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x709e14e0 "succulent.core$make_root_component@709e14e0"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x342e643a "succulent.core$make_nested_component@342e643a"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(empty-state)
=>
#object[clojure.lang.Atom
        0x9c3d014
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
(map sendkey ["5" "1" "0" "+" "4" "="])
=>
({:register :r1, :updated? 1, :state 1, :val "5"}
 {:register :r1, :updated? 0, :state 1, :val "51"}
 {:register :r1, :updated? 0, :state 1, :val "510"}
 {:register :r1, :updated? 0, :state 1, :val "510+"}
 {:register :r1, :updated? 0, :state 1, :val "510+4"}
 {:register :r1, :updated? 0, :state 1, :val "510+4="})
(reset-db!)
=>
#object[clojure.lang.Atom
        0x4029488e
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
(sendkey "5")
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
Loading src/succulent/core.cljs... done
(sendkey "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(sendkey "+")
=> {:register :r1, :updated? 0, :state 1, :val "5+"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
Loading src/succulent/core.cljs... done
(map handle ["5" "6" "+" "4" "="])
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(handle "5")
=> "This shouldn't ever be true"
db
=>
#object[clojure.lang.Atom
        0x18ad352
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x1628e11f "succulent.core$make_root_component@1628e11f"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x1628e11f "succulent.core$make_root_component@1628e11f"] [:input]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x1628e11f "succulent.core$make_root_component@1628e11f"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x41efb0cb "succulent.core$make_nested_component@41efb0cb"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "56", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "4", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "4")
=> {:register :r2, :updated? 1, :state 1, :val "4"}
(handle "=")
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
db
=>
#object[clojure.lang.Atom
        0x323b765f
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x36ce7e10 "succulent.core$make_root_component@36ce7e10"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x36ce7e10 "succulent.core$make_root_component@36ce7e10"] [:input]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x36ce7e10 "succulent.core$make_root_component@36ce7e10"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x610c1b6f "succulent.core$make_nested_component@610c1b6f"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "5", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "4", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
asciitable
=>
{" " [32 :invalid],
 "!" [33 :invalid],
 "\"" [34 :invalid],
 "#" [35 :invalid],
 "$" [36 :invalid],
 "%" [37 :invalid],
 "&" [38 :invalid],
 "'" [39 :invalid],
 "(" [40 :invalid],
 ")" [41 :invalid],
 "*" [42 :operator],
 "+" [43 :operator],
 "," [44 :invalid],
 "-" [45 :polymorphic],
 "." [46 :invalid],
 "/" [47 :operator],
 "0" [48 :number],
 "1" [49 :number],
 "2" [50 :number],
 "3" [51 :number],
 "4" [52 :number],
 "5" [53 :number],
 "6" [54 :number],
 "7" [55 :number],
 "8" [56 :number],
 "9" [57 :number],
 ":" [58 :invalid],
 ";" [59 :invalid],
 "<" [60 :invalid],
 "=" [61 :equals],
 ">" [62 :invalid],
 "?" [63 :invalid],
 "@" [64 :invalid],
 "A" [65 :invalid],
 "B" [66 :invalid],
 "C" [67 :invalid],
 "D" [68 :invalid],
 "E" [69 :invalid],
 "F" [70 :invalid],
 "G" [71 :invalid],
 "H" [72 :invalid],
 "I" [73 :invalid],
 "J" [74 :invalid],
 "K" [75 :invalid],
 "L" [76 :invalid],
 "M" [77 :invalid],
 "N" [78 :invalid],
 "O" [79 :invalid],
 "P" [80 :invalid],
 "Q" [81 :invalid],
 "R" [82 :invalid],
 "S" [83 :invalid],
 "T" [84 :invalid],
 "U" [85 :invalid],
 "V" [86 :invalid],
 "W" [87 :invalid],
 "X" [88 :invalid],
 "Y" [89 :invalid],
 "Z" [90 :invalid],
 "[" [91 :invalid],
 "\\" [92 :invalid],
 "]" [93 :invalid],
 "^" [94 :operator],
 "_" [95 :invalid],
 "`" [96 :invalid],
 "a" [97 :invalid],
 "b" [98 :invalid],
 "c" [99 :invalid],
 "d" [100 :invalid],
 "e" [101 :invalid],
 "f" [102 :invalid],
 "g" [103 :invalid],
 "h" [104 :invalid],
 "i" [105 :invalid],
 "j" [106 :invalid],
 "k" [107 :invalid],
 "l" [108 :invalid],
 "m" [109 :invalid],
 "n" [110 :invalid],
 "o" [111 :invalid],
 "p" [112 :invalid],
 "q" [113 :invalid],
 "r" [114 :invalid],
 "s" [115 :invalid],
 "t" [116 :invalid],
 "u" [117 :invalid],
 "v" [118 :invalid],
 "w" [119 :invalid],
 "x" [120 :invalid],
 "y" [121 :invalid],
 "z" [122 :invalid],
 "{" [123 :invalid],
 "|" [124 :invalid],
 "}" [125 :invalid],
 "~" [126 :invalid],
 "" [129 :invalid]}
(evaluate)
ClassCastException java.lang.String cannot be cast to java.lang.Number  clojure.lang.Numbers.add (Numbers.java:128)
(ask :op :val)
=> "+"
(atom2action "+")
=> #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"]
(ask :r1 :val)
=> "5"
(str->int "5")
=> 5
(str->int "-5")
=> 5
(nth "-183" 0)
=> \-
(defn neg? [repr] (if (and (string? repr) (not (empty? repr))) (let [sign-bit (nth repr 0)] (= sign-bit \-))))
WARNING: neg? already refers to: #'clojure.core/neg? in namespace: succulent.core, being replaced by: #'succulent.core/neg?
=> #'succulent.core/neg?
(defn tlt0 [repr] (if (and (string? repr) (not (empty? repr))) (let [sign-bit (nth repr 0)] (= sign-bit \-))))
=> #'succulent.core/tlt0
(tlt0 "-5")
=> true
(tlt0 "5")
=> false
(defn probe [repr index chr]
  (if (and (string? repr) (not (empty? repr))) (= (nth repr index) chr)))
=> #'succulent.core/probe
(probe "-5" 0 \-)
=> true
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Too many arguments to def, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:385:1)
Loading src/succulent/core.cljs... done
(str->int "-1")
=> -1
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "3")
=> {:register :r2, :updated? 1, :state 1, :val "3"}
(handle "=")
=> {:register :r3, :updated? 1, :state 2, :val "0"}
db
=>
#object[clojure.lang.Atom
        0x33875af9
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x3e35781a "succulent.core$make_root_component@3e35781a"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x3e35781a "succulent.core$make_root_component@3e35781a"] [:input]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x3e35781a "succulent.core$make_root_component@3e35781a"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x1a400abd "succulent.core$make_nested_component@1a400abd"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "5", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 2, :val "0", :locked? 1, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(evaluate)
=> 0
(defn evaluate []
  (let [x (str->int (ask :r1 :val))
        y (str->int (ask :r2 :val))
        op (atom2action (ask :op :val))]
    {:f op :x x :y y :fxy (apply op [x y])))}
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: }  clojure.lang.Util.runtimeException (Util.java:221)

(defn evaluate []
  (let [x (str->int (ask :r1 :val))
        y (str->int (ask :r2 :val))
        op (atom2action (ask :op :val))]
    {:f op :x x :y y :fxy (apply op [x y])}))
=> #'succulent.core/evaluate
(evaluate)
=> {:f #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"], :x 0, :y 0, :fxy 0}
(ask :r1 :val)
=> "5"
(str->int (ask :r1 :val))
=> 0
(str->int "-5")
=> -5
(str->int "5")
=> 0
Loading src/succulent/core.cljs... done
(str->int "-5")
=> -5
(str->int "5")
=> 5
(evaluate)
NullPointerException   clojure.core/apply (core.clj:646)
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(handle "+")
=> {:register :op, :updated? 1, :state 1, :val "+"}
(handle "7")
=> {:register :r2, :updated? 1, :state 1, :val "7"}
(handle "=")
=> {:register :r3, :updated? 1, :state 2, :val "{:f #object[clojure.core$_PLUS_ 0x534c2152 \"clojure.core$_PLUS_@534c2152\"], :x 5, :y 7, :fxy 12}"}
Loading src/succulent/core.cljs... done
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(empty-state)
=>
#object[clojure.lang.Atom
        0x7686a7b2
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
(reset! db (empty-state))
=>
#object[clojure.lang.Atom
        0x236aa066
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: EOF while reading, starting at line 613, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:1585:1)
Loading src/succulent/core.cljs...
CompilerException clojure.lang.ArityException: Wrong number of args (4) passed to: test/is, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:616:5)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (test1) (RT.java:792)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Atom cannot be cast to clojure.lang.Associative
 at clojure.lang.RT.assoc (RT.java:792)
    clojure.core$assoc__4371.invokeStatic (core.clj:191)
    clojure.core$assoc_in.invokeStatic (core.clj:5936)
    clojure.core$assoc_in.invoke (core.clj:5928)
    clojure.lang.Atom.swap (Atom.java:65)
    clojure.core$swap_BANG_.invokeStatic (core.clj:2262)
    clojure.core$swap_BANG_.invoke (core.clj:2253)
    succulent.core$load_inst.invokeStatic (core.cljs:154)
    succulent.core$load_inst.invoke (core.cljs:152)
    succulent.core$IR.invokeStatic (core.cljs:582)
    succulent.core$IR.invoke (core.cljs:567)
    succulent.core$reset_db_BANG_.invokeStatic (core.cljs:589)
    succulent.core$reset_db_BANG_.invoke (core.cljs:587)
    succulent.core$fn__21119.invokeStatic (core.cljs:614)
    succulent.core/fn (core.cljs:612)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21143$fn__21176.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21143.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21143.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$querytarget.invokeStatic (core.cljs:150)
    succulent.core$querytarget.invoke (core.cljs:149)
    succulent.core$sendkey.invokeStatic (core.cljs:312)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__21136.invokeStatic (core.cljs:624)
    succulent.core/fn (core.cljs:621)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21143$fn__21176.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21143.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21143.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$querytarget.invokeStatic (core.cljs:150)
    succulent.core$querytarget.invoke (core.cljs:149)
    succulent.core$sendkey.invokeStatic (core.cljs:312)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21143$fn__21176.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21143.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21143.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 3 tests containing 3 assertions.
0 failures, 3 errors.
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (test1) (RT.java:792)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Atom cannot be cast to clojure.lang.Associative
 at clojure.lang.RT.assoc (RT.java:792)
    clojure.core$assoc__4371.invokeStatic (core.clj:191)
    clojure.core$assoc_in.invokeStatic (core.clj:5936)
    clojure.core$assoc_in.invoke (core.clj:5928)
    clojure.lang.Atom.swap (Atom.java:65)
    clojure.core$swap_BANG_.invokeStatic (core.clj:2262)
    clojure.core$swap_BANG_.invoke (core.clj:2253)
    succulent.core$load_inst.invokeStatic (core.cljs:154)
    succulent.core$load_inst.invoke (core.cljs:152)
    succulent.core$IR.invokeStatic (core.cljs:582)
    succulent.core$IR.invoke (core.cljs:567)
    succulent.core$reset_db_BANG_.invokeStatic (core.cljs:606)
    succulent.core$reset_db_BANG_.invoke (core.cljs:587)
    succulent.core$fn__21567.invokeStatic (core.cljs:631)
    succulent.core/fn (core.cljs:629)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21591$fn__21624.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21591.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21591.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$querytarget.invokeStatic (core.cljs:150)
    succulent.core$querytarget.invoke (core.cljs:149)
    succulent.core$sendkey.invokeStatic (core.cljs:312)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21591$fn__21624.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21591.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21591.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$querytarget.invokeStatic (core.cljs:150)
    succulent.core$querytarget.invoke (core.cljs:149)
    succulent.core$sendkey.invokeStatic (core.cljs:312)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval21591$fn__21624.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval21591.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval21591.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 3 tests containing 3 assertions.
0 failures, 3 errors.
db
=>
#object[clojure.lang.Atom
        0x4fb4ac53
        {:status :ready,
         :val #object[clojure.lang.Atom
                      0x4aa85879
                      {:status :ready,
                       :val {:refs {:queue [:queue],
                                    :front-ptr [:queue :front-ptr],
                                    :rear-ptr [:queue :rear-ptr],
                                    :queue-val [:queue :val],
                                    :queue-state [:queue :state],
                                    :atom2action [:atom2action]},
                             :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                                           "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                                           "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                                           "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
                             :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
                             :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                                           [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                                     :front-ptr 0,
                                     :rear-ptr 1,
                                     :state 0,
                                     :children []}}}]}]
Loading src/succulent/core.cljs... done
db
=>
#object[clojure.lang.Atom
        0x6c2e35ad
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x596ffd2e "succulent.core$make_root_component@596ffd2e"] [:registers]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x596ffd2e "succulent.core$make_root_component@596ffd2e"] [:input]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x596ffd2e "succulent.core$make_root_component@596ffd2e"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0xa0f8c07 "succulent.core$make_nested_component@a0f8c07"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(reset-db!)
=>
#object[clojure.lang.Atom
        0x65593a3f
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs... done
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
Loading src/succulent/core.cljs... done
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
Loading src/succulent/core.cljs... done
(reset-db!)
=>
#object[clojure.lang.Atom
        0x1d733bbe
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs... done
(reset-db!)
ArityException Wrong number of args (2) passed to: core/IR  clojure.lang.AFn.throwArity (AFn.java:429)
Loading src/succulent/core.cljs... done
(reset-db!)
=>
#object[clojure.lang.Atom
        0x272243af
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs... done
(reset-db!)
=>
#object[clojure.lang.Atom
        0x2f0e9eac
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs... done
(reset-db!)
=>
#object[clojure.lang.Atom
        0x168b26d2
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: No reader function for tag object, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:607:115)
db
=>
#object[clojure.lang.Atom
        0x4fdd4f47
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0xadfc8d8 "succulent.core$make_root_component@adfc8d8"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0xadfc8d8 "succulent.core$make_root_component@adfc8d8"] [:input]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0xadfc8d8 "succulent.core$make_root_component@adfc8d8"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x66375128 "succulent.core$make_nested_component@66375128"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(reset-db!)
=>
#object[clojure.lang.Atom
        0x5996a75
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: No reader function for tag object, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:607:115)
(defn reset-db! []
  (swap! db atom {:hello "I'm new in town"}))
=> #'succulent.core/reset-db!
(reset-db!)
IllegalArgumentException No value supplied for key: {:hello "I'm new in town"}  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)
(swap! db reset! {:front-ptr 0,
                  :rear-ptr 1,
                  :state 0,
                  :children []}}))

RuntimeException Unmatched delimiter: }  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(swap! db reset! {:front-ptr 0,
                  :rear-ptr 1,
                  :state 0,
                  :children []})
ClassCastException clojure.lang.PersistentArrayMap cannot be cast to clojure.lang.IAtom  clojure.core/reset! (core.clj:2273)
(swap! db reset! (atom {:front-ptr 0,
                  :rear-ptr 1,
                  :state 0,
                  :children []}))
ClassCastException clojure.lang.PersistentArrayMap cannot be cast to clojure.lang.IAtom  clojure.core/reset! (core.clj:2273)
(swap! db (atom {:front-ptr 0,
                 :rear-ptr 1,
                 :state 0,
                 :children []}))
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.IFn  clojure.core/swap! (core.clj:2253)
(reset! db (atom {:front-ptr 0,
                 :rear-ptr 1,
                 :state 0,
                 :children []}))
=> #object[clojure.lang.Atom 0x5602e18f {:status :ready, :val {:front-ptr 0, :rear-ptr 1, :state 0, :children []}}]
Loading src/succulent/core.cljs... done
(reset-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.IFn  clojure.core/swap! (core.clj:2253)
(defn reset-db! []
  (reset! db (atom {:refs {:queue [:queue]
                           :front-ptr [:queue :front-ptr]
                           :rear-ptr [:queue :rear-ptr]
                           :queue-val [:queue :val]
                           :queue-state [:queue :state]
                           :atom2action [:atom2action]}
                    :atom2action
                          {"+" +
                           "/" /
                           "-" -
                           "*" *}
                    :patterns
                          {"component" #{:val :state :children :idx :locked? :sign-bit}}
                    :queue {:val [[str ["Empty!"]] [str ["Empty!"]]]
                            :front-ptr 0
                            :rear-ptr 1
                            :state 0
                            :children []}})))
=> #'succulent.core/reset-db!
(reset-db!)
=>
#object[clojure.lang.Atom
        0x2fdaf694
        {:status :ready,
         :val {:refs {:queue [:queue],
                      :front-ptr [:queue :front-ptr],
                      :rear-ptr [:queue :rear-ptr],
                      :queue-val [:queue :val],
                      :queue-state [:queue :state],
                      :atom2action [:atom2action]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 0,
                       :rear-ptr 1,
                       :state 0,
                       :children []}}}]
(init-db!)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(IR 0)
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
(load-inst (get {0 [[make-root-component [:registers]]
                    [make-nested-component [:registers :r1]]
                    [make-nested-component [:registers :op]]
                    [make-nested-component [:registers :r2]]
                    [make-nested-component [:registers :r3]]
                    [make-root-component [:input]]
                    [make-nested-component [:input :charstring]]
                    [make-nested-component [:input :charcode]]
                    [make-nested-component [:input :data-caption]]
                    [make-nested-component [:input :destination]]
                    [make-root-component [:semaphores]]
                    [make-nested-component [:semaphores :A]]
                    [make-nested-component [:semaphores :B]]
                    [str ["Empty!"]]]} 0))
ClassCastException clojure.lang.Atom cannot be cast to clojure.lang.Associative  clojure.lang.RT.assoc (RT.java:792)
db
=>
#object[clojure.lang.Atom
        0x193827b2
        {:status :ready,
         :val #object[clojure.lang.Atom
                      0x2fdaf694
                      {:status :ready,
                       :val {:refs {:queue [:queue],
                                    :front-ptr [:queue :front-ptr],
                                    :rear-ptr [:queue :rear-ptr],
                                    :queue-val [:queue :val],
                                    :queue-state [:queue :state],
                                    :atom2action [:atom2action]},
                             :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                                           "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                                           "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                                           "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
                             :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
                             :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                                           [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                                     :front-ptr 0,
                                     :rear-ptr 1,
                                     :state 0,
                                     :children []}}}]}]
Loading src/succulent/core.cljs... done
db
=>
#object[clojure.lang.Atom
        0x70af8112
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:input]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(reset-db!)
=>
{:refs {:queue [:queue],
        :front-ptr [:queue :front-ptr],
        :rear-ptr [:queue :rear-ptr],
        :queue-val [:queue :val],
        :queue-state [:queue :state],
        :atom2action [:atom2action]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
               "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
               "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 0,
         :rear-ptr 1,
         :state 0,
         :children []}}
(init-db!)
=>
{:refs {:queue [:queue],
        :front-ptr [:queue :front-ptr],
        :rear-ptr [:queue :rear-ptr],
        :queue-val [:queue :val],
        :queue-state [:queue :state],
        :atom2action [:atom2action]},
 :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
               "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
               "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
               "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
 :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
 :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
               [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:registers]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r1]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :op]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r2]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:registers :r3]]
               [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:input]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :charstring]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :charcode]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :data-caption]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:input :destination]]
               [#object[succulent.core$make_root_component 0x22ceba72 "succulent.core$make_root_component@22ceba72"] [:semaphores]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:semaphores :A]]
               [#object[succulent.core$make_nested_component 0x106b9a45 "succulent.core$make_nested_component@106b9a45"] [:semaphores :B]]
               [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
         :front-ptr 0,
         :rear-ptr 15,
         :state 2,
         :children []}}
Loading src/succulent/core.cljs... done
(reset-db!)
=> "Ready to do more stuff"
db
=>
#object[clojure.lang.Atom
        0xd433cad
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:input]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(sendkey "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
(reset-db!)
=> "Ready to do more stuff"
db
=>
#object[clojure.lang.Atom
        0xd433cad
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:input]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x77931427 "succulent.core$make_root_component@77931427"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x746ccd0a "succulent.core$make_nested_component@746ccd0a"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 3 tests containing 6 assertions.
5 failures, 0 errors.
(run-tests)

Testing succulent.core

FAIL in (test1) (core.cljs:633)
5+3=
expected: (= (ask :r1 :val) "5")
  actual: (not (= "" "5"))

FAIL in (test1) (core.cljs:634)
5+3=
expected: (= (ask :op :val) "+")
  actual: (not (= "" "+"))

FAIL in (test1) (core.cljs:635)
5+3=
expected: (= (ask :r2 :val) "3")
  actual: (not (= "" "3"))

FAIL in (test1) (core.cljs:636)
5+3=
expected: (= (ask :r3 :val) "8")
  actual: (not (= "" "8"))

FAIL in (input-number2) (core.cljs:642)
expected: (= (ask (active-register) :val) :this-will-fail)
  actual: (not (= "5" :this-will-fail))

Ran 3 tests containing 6 assertions.
5 failures, 0 errors.
=> {:test 3, :pass 1, :fail 5, :error 0, :type :summary}
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 3 tests containing 6 assertions.
5 failures, 0 errors.
(sendkey "%")
=> {:register :r1, :updated? 0, :state 1, :val "55%"}
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

Ran 3 tests containing 6 assertions.
5 failures, 0 errors.
db
=>
#object[clojure.lang.Atom
        0x40298540
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x52b1321 "succulent.core$make_root_component@52b1321"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x52b1321 "succulent.core$make_root_component@52b1321"] [:input]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x52b1321 "succulent.core$make_root_component@52b1321"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x404ecdda "succulent.core$make_nested_component@404ecdda"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 1, :val "55", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "5", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 53, :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val [true :r1], :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: Empty! in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:639:5)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval25735$fn__25768.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval25735.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval25735.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval25735$fn__25768.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval25735.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval25735.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 3 tests containing 6 assertions.
0 failures, 2 errors.
(str/split "4829+39=" #"\d+")
=> ["" "+" "="]
(str/split "4829+39=" #"\w+")
=> ["" "+" "="]
(str/split "4829+39=" #"*")
PatternSyntaxException Dangling meta character '*' near index 0
*
^  java.util.regex.Pattern.error (Pattern.java:1955)
RuntimeException Unmatched delimiter: )  clojure.lang.Util.runtimeException (Util.java:221)
(seq (char-array "5+3="))
=> (\5 \+ \3 \=)
(some-> "34" (nth 0) (= \-))
=> false
(doseq [chars (seq (char-array "5+3="))
RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(doseq [chars (seq (char-array "5+3="))
RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:221)
(doseq [chars (seq (char-array "5+3=")) :let [char (str chars)] :when true] (println [char chars]))
[5 5]
[+ +]
[3 3]
[= =]
=> nil
(doseq [chars (seq (char-array "5+3=")) :let [char (str chars)] :when true] (handle char))
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (println [(handle chr)]))
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (println [(handle chars)]))
ClassCastException java.lang.String cannot be cast to java.lang.Character  java.lang.Character.compareTo (Character.java:122)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (println [(handle (str chars))]))
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (apply handle [chr]))
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (apply handle [chars]))
ClassCastException java.lang.String cannot be cast to java.lang.Character  java.lang.Character.compareTo (Character.java:122)
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (apply str [chars]))
=> nil
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (apply str [chr]))
=> nil
(doseq [chars (seq (char-array "5+3=")) :let [chr (str chars)] :when true] (println (apply str [chr])))
5
+
3
=
=> nil
(doseq [chars (seq (char-array "5+3=")) :let [chr (handle (str chars))] :when true] (println (apply str [chr])))
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(handle "5")
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
(handle "-")
ClassCastException clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection  clojure.core/conj--4345 (core.clj:82)
db
=>
#object[clojure.lang.Atom
        0x543d8a7c
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x7e3e3fa8 "succulent.core$make_root_component@7e3e3fa8"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x7e3e3fa8 "succulent.core$make_root_component@7e3e3fa8"] [:input]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x7e3e3fa8 "succulent.core$make_root_component@7e3e3fa8"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x6ef00fdb "succulent.core$make_nested_component@6ef00fdb"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "5", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 2, :val "8", :locked? 1, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "5", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val 53, :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val :number, :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unmatched delimiter: ), compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:653:33)
Loading src/succulent/core.cljs... done
(handle "5")
=> {:register :r1, :updated? 1, :state 1, :val "5"}
Loading src/succulent/core.cljs... done
(doseq [chars (seq (char-array "5+3=")) :let [chr (handle (str chars))] :when true] (println (apply str [chr])))
{:register :r1, :updated? 1, :state 1, :val "5"}
{:register :op, :updated? 1, :state 1, :val "+"}
{:register :r2, :updated? 1, :state 1, :val "3"}
{:register :r3, :updated? 1, :state 2, :val "8"}
=> nil
db
=>
#object[clojure.lang.Atom
        0x537aa51f
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x51e5c778 "succulent.core$make_root_component@51e5c778"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x51e5c778 "succulent.core$make_root_component@51e5c778"] [:input]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x51e5c778 "succulent.core$make_root_component@51e5c778"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x7571bddf "succulent.core$make_nested_component@7571bddf"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 2, :val "5", :locked? 1, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 2, :val "+", :locked? 1, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 2, :val "3", :locked? 1, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 2, :val "8", :locked? 1, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
Loading src/succulent/core.cljs... done
(doseq [chars (seq (char-array "5+3=")) :let [chr (handle (str chars))] :when true] (println chr))
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}
=> nil
(reset-db!)
=> "Ready to do more stuff"
db
=>
#object[clojure.lang.Atom
        0x5a3831ec
        {:status :ready,
         :val {:refs {:queue-val [:queue :val],
                      :registers [:registers],
                      :front-ptr [:queue :front-ptr],
                      :A [:semaphores :children 0],
                      :queue [:queue],
                      :data-caption [:input :children 2],
                      :B [:semaphores :children 1],
                      :op [:registers :children 1],
                      :r2 [:registers :children 2],
                      :charcode [:input :children 1],
                      :r3 [:registers :children 3],
                      :queue-state [:queue :state],
                      :r1 [:registers :children 0],
                      :charstring [:input :children 0],
                      :semaphores [:semaphores],
                      :input [:input],
                      :atom2action [:atom2action],
                      :destination [:input :children 3],
                      :rear-ptr [:queue :rear-ptr]},
               :atom2action {"+" #object[clojure.core$_PLUS_ 0x534c2152 "clojure.core$_PLUS_@534c2152"],
                             "/" #object[clojure.core$_SLASH_ 0x3eade552 "clojure.core$_SLASH_@3eade552"],
                             "-" #object[clojure.core$_ 0x4d6dbae8 "clojure.core$_@4d6dbae8"],
                             "*" #object[clojure.core$_STAR_ 0x2c26ec77 "clojure.core$_STAR_@2c26ec77"]},
               :patterns {"component" #{:children :sign-bit :val :state :locked? :idx}},
               :queue {:val [[#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]
                             [#object[succulent.core$make_root_component 0x5cab65c9 "succulent.core$make_root_component@5cab65c9"] [:registers]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:registers :r1]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:registers :op]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:registers :r2]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:registers :r3]]
                             [#object[succulent.core$make_root_component 0x5cab65c9 "succulent.core$make_root_component@5cab65c9"] [:input]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:input :charstring]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:input :charcode]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:input :data-caption]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:input :destination]]
                             [#object[succulent.core$make_root_component 0x5cab65c9 "succulent.core$make_root_component@5cab65c9"] [:semaphores]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:semaphores :A]]
                             [#object[succulent.core$make_nested_component 0x6fdcced4 "succulent.core$make_nested_component@6fdcced4"] [:semaphores :B]]
                             [#object[clojure.core$str 0x765dee0a "clojure.core$str@765dee0a"] ["Empty!"]]],
                       :front-ptr 15,
                       :rear-ptr 15,
                       :state 0,
                       :children []},
               :registers {:idx :registers,
                           :state 0,
                           :val "",
                           :locked? 0,
                           :sign-bit 0,
                           :children {0 {:idx :r1, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      1 {:idx :op, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      2 {:idx :r2, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                      3 {:idx :r3, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :input {:idx :input,
                       :state 0,
                       :val "",
                       :locked? 0,
                       :sign-bit 0,
                       :children {0 {:idx :charstring, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  1 {:idx :charcode, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  2 {:idx :data-caption, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                  3 {:idx :destination, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}},
               :semaphores {:idx :semaphores,
                            :state 0,
                            :val "",
                            :locked? 0,
                            :sign-bit 0,
                            :children {0 {:idx :A, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}},
                                       1 {:idx :B, :state 0, :val "", :locked? 0, :sign-bit 0, :children {}}}}}}]
(doseq [chars (seq (char-array "5+3=")) :let [chr (handle (str chars))] :when true] (println chr))
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}
=> nil
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval27140$fn__27173.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval27140.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval27140.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval27140$fn__27173.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval27140.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval27140.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 4 tests containing 10 assertions.
0 failures, 2 errors.
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval27845$fn__27878.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval27845.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval27845.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval27845$fn__27878.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval27845.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval27845.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 4 tests containing 10 assertions.
0 failures, 2 errors.
(input-number)

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:220)
    succulent.core$active_register.invoke (core.cljs:217)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:293)
    succulent.core$compatible_QMARK_.invoke (core.cljs:291)
    succulent.core$sendkey.invokeStatic (core.cljs:315)
    succulent.core$sendkey.invoke (core.cljs:310)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    succulent.core$input_number.invokeStatic (core.cljs:609)
    succulent.core$input_number.invoke (core.cljs:609)
    succulent.core$eval27881.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval27881.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
=> nil
(map #(get-in % [:state]) (values (get-in @db [:registers :children])))
CompilerException java.lang.RuntimeException: Unable to resolve symbol: values in this context, compiling:(/private/var/folders/tl/jz2skppn6sgbswhzxgk0q0jr0000gn/T/form-init3183983122131059632.clj:1:27)
(map #(get-in % [:state]) (vals (get-in @db [:registers :children])))
=> (2 2 2 2)
(defn take-poll [attr]
  (into [] (map (juxt #(get-in % [:idx]) #(get-in % [attr]) (vals (get-in @db [:registers :children]))))))
=> #'succulent.core/take-poll
(map #(get-in % [:state]) (vals (get-in @db [:registers :children])))
=> (2 2 2 2)
(take-poll [:sign-bit])
IllegalArgumentException Don't know how to create ISeq from: clojure.core$map$fn__4781  clojure.lang.RT.seqFrom (RT.java:542)
(defn take-poll [attr]
  (map #(get-in % [attr]) (vals (get-in @db [:registers :children]))))
=> #'succulent.core/take-poll
(take-poll [:sign-bit])
=> (nil nil nil nil)
(take-poll [:val])
=> (nil nil nil nil)
(take-poll :val)
=> ("5" "+" "3" "8")
(defn take-poll [attr]
  (map (juxt #(get-in % [:idx]) #(get-in % [attr])) (vals (get-in @db [:registers :children]))))
=> #'succulent.core/take-poll
(take-poll :val)
=> ([:r1 "5"] [:op "+"] [:r2 "3"] [:r3 "8"])
(defn take-poll [attr]
  (seq (vec (map (juxt #(get-in % [:idx]) #(get-in % [attr])) (vals (get-in @db [:registers :children]))))))

=> #'succulent.core/take-poll
(take-poll :val)
=> ([:r1 "5"] [:op "+"] [:r2 "3"] [:r3 "8"])
Loading src/succulent/core.cljs... done
(take-poll :val)
=> [[:r1 ""] [:op ""] [:r2 ""] [:r3 ""]]
(nth ([:r1 "5"] [:op "+"] [:r2 "3"] [:r3 "8"]) 0)
ArityException Wrong number of args (3) passed to: PersistentVector  clojure.lang.AFn.throwArity (AFn.java:429)
(nth '([:r1 "5"] [:op "+"] [:r2 "3"] [:r3 "8"]) 0)
=> [:r1 "5"]
(nth [[:r1 ""] [:op ""] [:r2 ""] [:r3 ""]] 0)
=> [:r1 ""]
(take-poll :val)
=> [[:r1 ""] [:op ""] [:r2 ""] [:r3 ""]]
Loading src/succulent/core.cljs... done
(take-poll :val)
=> [[:r1 ""] [:op ""] [:r2 ""] [:r3 ""]]
(reduce true? [true true])
ArityException Wrong number of args (2) passed to: core/true?  clojure.lang.AFn.throwArity (AFn.java:429)
(reduce first [true true])
ArityException Wrong number of args (2) passed to: core/first--4339  clojure.lang.AFn.throwArity (AFn.java:429)
(not-any? false [true true])
ClassCastException java.lang.Boolean cannot be cast to clojure.lang.IFn  clojure.core/some (core.clj:2592)
(not-any? false? [true true])
=> true
(any? false? [true true])
=> false
(any? #(= 2 %) [false false])
=> false
(any? #(= 2 %) [false false 2])
=> true
Loading src/succulent/core.cljs...
CompilerException java.lang.RuntimeException: Unable to resolve symbol: any in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:659:12)
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval29173$fn__29206.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval29173.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29173.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}
clojure.lang.ArityException: Wrong number of args (2) passed to: core/take-poll
 at clojure.lang.AFn.throwArity (AFn.java:429)
    clojure.lang.AFn.invoke (AFn.java:36)
    succulent.core$fn__29144.invokeStatic (core.cljs:660)
    succulent.core/fn (core.cljs:652)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval29173$fn__29206.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval29173.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29173.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval29173$fn__29206.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval29173.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29173.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 4 tests containing 12 assertions.
0 failures, 3 errors.
Loading src/succulent/core.cljs... done
Loading src/succulent/core.cljs... done
Running tests in succulent.core

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval29709$fn__29742.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval29709.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29709.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    succulent.core$eval29709$fn__29742.invoke (form-init3183983122131059632.clj:1)
    clojure.core$with_redefs_fn.invokeStatic (core.clj:7216)
    clojure.core$with_redefs_fn.invoke (core.clj:7200)
    succulent.core$eval29709.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29709.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 4 tests containing 12 assertions.
0 failures, 2 errors.
(run-tests)

Testing succulent.core

ERROR in (input-number2) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__21584.invokeStatic (core.cljs:641)
    succulent.core/fn (core.cljs:638)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    clojure.test$run_tests.invokeStatic (test.clj:772)
    clojure.test$run_tests.invoke (test.clj:767)
    succulent.core$eval29745.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29745.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)
{:register :r1, :updated? 1, :state 1, :val 5}
{:register :op, :updated? 1, :state 1, :val +}
{:register :r2, :updated? 1, :state 1, :val 3}
{:register :r3, :updated? 1, :state 2, :val 8}

ERROR in (input-number) (core.clj:82)
Uncaught exception, not in assertion.
expected: nil
  actual: java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to clojure.lang.IPersistentCollection
 at clojure.core$conj__4345.invokeStatic (core.clj:82)
    clojure.core/conj (core.clj:82)
    succulent.core$ask.invokeStatic (core.cljs:145)
    succulent.core$ask.invoke (core.cljs:144)
    succulent.core$active_register.invokeStatic (core.cljs:222)
    succulent.core$active_register.invoke (core.cljs:219)
    succulent.core$compatible_QMARK_.invokeStatic (core.cljs:295)
    succulent.core$compatible_QMARK_.invoke (core.cljs:293)
    succulent.core$sendkey.invokeStatic (core.cljs:317)
    succulent.core$sendkey.invoke (core.cljs:312)
    succulent.core$fn__20342.invokeStatic (core.cljs:611)
    succulent.core/fn (core.cljs:609)
    clojure.test$test_var$fn__7983.invoke (test.clj:716)
    clojure.test$test_var.invokeStatic (test.clj:716)
    clojure.test$test_var.invoke (test.clj:707)
    clojure.test$test_vars$fn__8005$fn__8010.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars$fn__8005.invoke (test.clj:734)
    clojure.test$default_fixture.invokeStatic (test.clj:686)
    clojure.test$default_fixture.invoke (test.clj:682)
    clojure.test$test_vars.invokeStatic (test.clj:730)
    clojure.test$test_all_vars.invokeStatic (test.clj:736)
    clojure.test$test_ns.invokeStatic (test.clj:757)
    clojure.test$test_ns.invoke (test.clj:742)
    clojure.core$map$fn__4785.invoke (core.clj:2646)
    clojure.lang.LazySeq.sval (LazySeq.java:40)
    clojure.lang.LazySeq.seq (LazySeq.java:49)
    clojure.lang.Cons.next (Cons.java:39)
    clojure.lang.RT.boundedLength (RT.java:1749)
    clojure.lang.RestFn.applyTo (RestFn.java:130)
    clojure.core$apply.invokeStatic (core.clj:648)
    clojure.test$run_tests.invokeStatic (test.clj:767)
    clojure.test$run_tests.doInvoke (test.clj:767)
    clojure.lang.RestFn.invoke (RestFn.java:408)
    clojure.test$run_tests.invokeStatic (test.clj:772)
    clojure.test$run_tests.invoke (test.clj:767)
    succulent.core$eval29745.invokeStatic (form-init3183983122131059632.clj:1)
    succulent.core$eval29745.invoke (form-init3183983122131059632.clj:1)
    clojure.lang.Compiler.eval (Compiler.java:6927)
    clojure.lang.Compiler.eval (Compiler.java:6890)
    clojure.core$eval.invokeStatic (core.clj:3105)
    clojure.core$eval.invoke (core.clj:3101)
    clojure.main$repl$read_eval_print__7408$fn__7411.invoke (main.clj:240)
    clojure.main$repl$read_eval_print__7408.invoke (main.clj:240)
    clojure.main$repl$fn__7417.invoke (main.clj:258)
    clojure.main$repl.invokeStatic (main.clj:258)
    clojure.main$repl.doInvoke (main.clj:174)
    clojure.lang.RestFn.invoke (RestFn.java:1523)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke (interruptible_eval.clj:87)
    clojure.lang.AFn.applyToHelper (AFn.java:152)
    clojure.lang.AFn.applyTo (AFn.java:144)
    clojure.core$apply.invokeStatic (core.clj:646)
    clojure.core$with_bindings_STAR_.invokeStatic (core.clj:1881)
    clojure.core$with_bindings_STAR_.doInvoke (core.clj:1881)
    clojure.lang.RestFn.invoke (RestFn.java:425)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic (interruptible_eval.clj:85)
    clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke (interruptible_eval.clj:55)
    clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke (interruptible_eval.clj:222)
    clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke (interruptible_eval.clj:190)
    clojure.lang.AFn.run (AFn.java:22)
    java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:617)
    java.lang.Thread.run (Thread.java:745)

Ran 4 tests containing 12 assertions.
0 failures, 2 errors.
=> {:test 4, :pass 10, :fail 0, :error 2, :type :summary}
java.lang.RuntimeException: Unable to resolve symbol: any in this context, compiling:(/Users/kevinzeidler/rhizome/reg2/src/succulent/core.cljs:659:12)
	at clojure.lang.Compiler.analyze(Compiler.java:6688)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3766)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3834)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.access$300(Compiler.java:38)
	at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6269)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$TryExpr$Parser.parse(Compiler.java:2277)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5380)
	at clojure.lang.Compiler$FnExpr.parse(Compiler.java:3972)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6866)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$InvokeExpr.parse(Compiler.java:3766)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6870)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$TryExpr$Parser.parse(Compiler.java:2248)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$TryExpr$Parser.parse(Compiler.java:2277)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$LetExpr$Parser.parse(Compiler.java:6319)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$BodyExpr$Parser.parse(Compiler.java:6001)
	at clojure.lang.Compiler$FnMethod.parse(Compiler.java:5380)
	at clojure.lang.Compiler$FnExpr.parse(Compiler.java:3972)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6866)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6856)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$MapExpr.parse(Compiler.java:3072)
	at clojure.lang.Compiler.analyze(Compiler.java:6677)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler$DefExpr$Parser.parse(Compiler.java:588)
	at clojure.lang.Compiler.analyzeSeq(Compiler.java:6868)
	at clojure.lang.Compiler.analyze(Compiler.java:6669)
	at clojure.lang.Compiler.analyze(Compiler.java:6625)
	at clojure.lang.Compiler.eval(Compiler.java:6931)
	at clojure.lang.Compiler.load(Compiler.java:7379)
	at succulent.core$eval28435.invokeStatic(form-init3183983122131059632.clj:1)
	at succulent.core$eval28435.invoke(form-init3183983122131059632.clj:1)
	at clojure.lang.Compiler.eval(Compiler.java:6927)
	at clojure.lang.Compiler.eval(Compiler.java:6890)
	at clojure.core$eval.invokeStatic(core.clj:3105)
	at clojure.core$eval.invoke(core.clj:3101)
	at clojure.main$repl$read_eval_print__7408$fn__7411.invoke(main.clj:240)
	at clojure.main$repl$read_eval_print__7408.invoke(main.clj:240)
	at clojure.main$repl$fn__7417.invoke(main.clj:258)
	at clojure.main$repl.invokeStatic(main.clj:258)
	at clojure.main$repl.doInvoke(main.clj:174)
	at clojure.lang.RestFn.invoke(RestFn.java:1523)
	at clojure.tools.nrepl.middleware.interruptible_eval$evaluate$fn__650.invoke(interruptible_eval.clj:87)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:646)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1881)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1881)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invokeStatic(interruptible_eval.clj:85)
	at clojure.tools.nrepl.middleware.interruptible_eval$evaluate.invoke(interruptible_eval.clj:55)
	at clojure.tools.nrepl.middleware.interruptible_eval$interruptible_eval$fn__695$fn__698.invoke(interruptible_eval.clj:222)
	at clojure.tools.nrepl.middleware.interruptible_eval$run_next$fn__690.invoke(interruptible_eval.clj:190)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Unable to resolve symbol: any in this context
	at clojure.lang.Util.runtimeException(Util.java:221)
	at clojure.lang.Compiler.resolveIn(Compiler.java:7164)
	at clojure.lang.Compiler.resolve(Compiler.java:7108)
	at clojure.lang.Compiler.analyzeSymbol(Compiler.java:7069)
	at clojure.lang.Compiler.analyze(Compiler.java:6648)
	... 100 more

